{"ast":null,"code":"import { posToDOMRect, Extension } from '@tiptap/core';\nimport { Plugin, PluginKey } from 'prosemirror-state';\nimport tippy from 'tippy.js';\n\nclass FloatingMenuView {\n  constructor(_ref) {\n    let {\n      editor,\n      element,\n      view,\n      tippyOptions = {},\n      shouldShow\n    } = _ref;\n    this.preventHide = false;\n\n    this.shouldShow = _ref2 => {\n      let {\n        view,\n        state\n      } = _ref2;\n      const {\n        selection\n      } = state;\n      const {\n        $anchor,\n        empty\n      } = selection;\n      const isRootDepth = $anchor.depth === 1;\n      const isEmptyTextBlock = $anchor.parent.isTextblock && !$anchor.parent.type.spec.code && !$anchor.parent.textContent;\n\n      if (!view.hasFocus() || !empty || !isRootDepth || !isEmptyTextBlock) {\n        return false;\n      }\n\n      return true;\n    };\n\n    this.mousedownHandler = () => {\n      this.preventHide = true;\n    };\n\n    this.focusHandler = () => {\n      // we use `setTimeout` to make sure `selection` is already updated\n      setTimeout(() => this.update(this.editor.view));\n    };\n\n    this.blurHandler = _ref3 => {\n      let {\n        event\n      } = _ref3;\n\n      var _a;\n\n      if (this.preventHide) {\n        this.preventHide = false;\n        return;\n      }\n\n      if ((event === null || event === void 0 ? void 0 : event.relatedTarget) && ((_a = this.element.parentNode) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {\n        return;\n      }\n\n      this.hide();\n    };\n\n    this.editor = editor;\n    this.element = element;\n    this.view = view;\n\n    if (shouldShow) {\n      this.shouldShow = shouldShow;\n    }\n\n    this.element.addEventListener('mousedown', this.mousedownHandler, {\n      capture: true\n    });\n    this.editor.on('focus', this.focusHandler);\n    this.editor.on('blur', this.blurHandler);\n    this.tippyOptions = tippyOptions; // Detaches menu content from its current parent\n\n    this.element.remove();\n    this.element.style.visibility = 'visible';\n  }\n\n  createTooltip() {\n    const {\n      element: editorElement\n    } = this.editor.options;\n    const editorIsAttached = !!editorElement.parentElement;\n\n    if (this.tippy || !editorIsAttached) {\n      return;\n    }\n\n    this.tippy = tippy(editorElement, {\n      duration: 0,\n      getReferenceClientRect: null,\n      content: this.element,\n      interactive: true,\n      trigger: 'manual',\n      placement: 'right',\n      hideOnClick: 'toggle',\n      ...this.tippyOptions\n    }); // maybe we have to hide tippy on its own blur event as well\n\n    if (this.tippy.popper.firstChild) {\n      this.tippy.popper.firstChild.addEventListener('blur', event => {\n        this.blurHandler({\n          event\n        });\n      });\n    }\n  }\n\n  update(view, oldState) {\n    var _a, _b;\n\n    const {\n      state\n    } = view;\n    const {\n      doc,\n      selection\n    } = state;\n    const {\n      from,\n      to\n    } = selection;\n    const isSame = oldState && oldState.doc.eq(doc) && oldState.selection.eq(selection);\n\n    if (isSame) {\n      return;\n    }\n\n    this.createTooltip();\n    const shouldShow = (_a = this.shouldShow) === null || _a === void 0 ? void 0 : _a.call(this, {\n      editor: this.editor,\n      view,\n      state,\n      oldState\n    });\n\n    if (!shouldShow) {\n      this.hide();\n      return;\n    }\n\n    (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.setProps({\n      getReferenceClientRect: () => posToDOMRect(view, from, to)\n    });\n    this.show();\n  }\n\n  show() {\n    var _a;\n\n    (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.show();\n  }\n\n  hide() {\n    var _a;\n\n    (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.hide();\n  }\n\n  destroy() {\n    var _a;\n\n    (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.destroy();\n    this.element.removeEventListener('mousedown', this.mousedownHandler, {\n      capture: true\n    });\n    this.editor.off('focus', this.focusHandler);\n    this.editor.off('blur', this.blurHandler);\n  }\n\n}\n\nconst FloatingMenuPlugin = options => {\n  return new Plugin({\n    key: typeof options.pluginKey === 'string' ? new PluginKey(options.pluginKey) : options.pluginKey,\n    view: view => new FloatingMenuView({\n      view,\n      ...options\n    })\n  });\n};\n\nconst FloatingMenu = Extension.create({\n  name: 'floatingMenu',\n\n  addOptions() {\n    return {\n      element: null,\n      tippyOptions: {},\n      pluginKey: 'floatingMenu',\n      shouldShow: null\n    };\n  },\n\n  addProseMirrorPlugins() {\n    if (!this.options.element) {\n      return [];\n    }\n\n    return [FloatingMenuPlugin({\n      pluginKey: this.options.pluginKey,\n      editor: this.editor,\n      element: this.options.element,\n      tippyOptions: this.options.tippyOptions,\n      shouldShow: this.options.shouldShow\n    })];\n  }\n\n});\nexport { FloatingMenu, FloatingMenuPlugin, FloatingMenuView, FloatingMenu as default };","map":{"version":3,"sources":["../src/floating-menu-plugin.ts","../src/floating-menu.ts"],"names":[],"mappings":"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","sourcesContent":["import { Editor, posToDOMRect } from '@tiptap/core'\nimport { EditorState, Plugin, PluginKey } from 'prosemirror-state'\nimport { EditorView } from 'prosemirror-view'\nimport tippy, { Instance, Props } from 'tippy.js'\n\nexport interface FloatingMenuPluginProps {\n  pluginKey: PluginKey | string,\n  editor: Editor,\n  element: HTMLElement,\n  tippyOptions?: Partial<Props>,\n  shouldShow?: ((props: {\n    editor: Editor,\n    view: EditorView,\n    state: EditorState,\n    oldState?: EditorState,\n  }) => boolean) | null,\n}\n\nexport type FloatingMenuViewProps = FloatingMenuPluginProps & {\n  view: EditorView,\n}\n\nexport class FloatingMenuView {\n  public editor: Editor\n\n  public element: HTMLElement\n\n  public view: EditorView\n\n  public preventHide = false\n\n  public tippy: Instance | undefined\n\n  public tippyOptions?: Partial<Props>\n\n  public shouldShow: Exclude<FloatingMenuPluginProps['shouldShow'], null> = ({ view, state }) => {\n    const { selection } = state\n    const { $anchor, empty } = selection\n    const isRootDepth = $anchor.depth === 1\n    const isEmptyTextBlock = $anchor.parent.isTextblock\n      && !$anchor.parent.type.spec.code\n      && !$anchor.parent.textContent\n\n    if (\n      !view.hasFocus()\n      || !empty\n      || !isRootDepth\n      || !isEmptyTextBlock\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  constructor({\n    editor,\n    element,\n    view,\n    tippyOptions = {},\n    shouldShow,\n  }: FloatingMenuViewProps) {\n    this.editor = editor\n    this.element = element\n    this.view = view\n\n    if (shouldShow) {\n      this.shouldShow = shouldShow\n    }\n\n    this.element.addEventListener('mousedown', this.mousedownHandler, { capture: true })\n    this.editor.on('focus', this.focusHandler)\n    this.editor.on('blur', this.blurHandler)\n    this.tippyOptions = tippyOptions\n    // Detaches menu content from its current parent\n    this.element.remove()\n    this.element.style.visibility = 'visible'\n  }\n\n  mousedownHandler = () => {\n    this.preventHide = true\n  }\n\n  focusHandler = () => {\n    // we use `setTimeout` to make sure `selection` is already updated\n    setTimeout(() => this.update(this.editor.view))\n  }\n\n  blurHandler = ({ event }: { event: FocusEvent }) => {\n    if (this.preventHide) {\n      this.preventHide = false\n\n      return\n    }\n\n    if (\n      event?.relatedTarget\n      && this.element.parentNode?.contains(event.relatedTarget as Node)\n    ) {\n      return\n    }\n\n    this.hide()\n  }\n\n  createTooltip() {\n    const { element: editorElement } = this.editor.options\n    const editorIsAttached = !!editorElement.parentElement\n\n    if (this.tippy || !editorIsAttached) {\n      return\n    }\n\n    this.tippy = tippy(editorElement, {\n      duration: 0,\n      getReferenceClientRect: null,\n      content: this.element,\n      interactive: true,\n      trigger: 'manual',\n      placement: 'right',\n      hideOnClick: 'toggle',\n      ...this.tippyOptions,\n    })\n\n    // maybe we have to hide tippy on its own blur event as well\n    if (this.tippy.popper.firstChild) {\n      (this.tippy.popper.firstChild as HTMLElement).addEventListener('blur', event => {\n        this.blurHandler({ event })\n      })\n    }\n  }\n\n  update(view: EditorView, oldState?: EditorState) {\n    const { state } = view\n    const { doc, selection } = state\n    const { from, to } = selection\n    const isSame = oldState && oldState.doc.eq(doc) && oldState.selection.eq(selection)\n\n    if (isSame) {\n      return\n    }\n\n    this.createTooltip()\n\n    const shouldShow = this.shouldShow?.({\n      editor: this.editor,\n      view,\n      state,\n      oldState,\n    })\n\n    if (!shouldShow) {\n      this.hide()\n\n      return\n    }\n\n    this.tippy?.setProps({\n      getReferenceClientRect: () => posToDOMRect(view, from, to),\n    })\n\n    this.show()\n  }\n\n  show() {\n    this.tippy?.show()\n  }\n\n  hide() {\n    this.tippy?.hide()\n  }\n\n  destroy() {\n    this.tippy?.destroy()\n    this.element.removeEventListener('mousedown', this.mousedownHandler, { capture: true })\n    this.editor.off('focus', this.focusHandler)\n    this.editor.off('blur', this.blurHandler)\n  }\n}\n\nexport const FloatingMenuPlugin = (options: FloatingMenuPluginProps) => {\n  return new Plugin({\n    key: typeof options.pluginKey === 'string'\n      ? new PluginKey(options.pluginKey)\n      : options.pluginKey,\n    view: view => new FloatingMenuView({ view, ...options }),\n  })\n}\n","import { Extension } from '@tiptap/core'\nimport { FloatingMenuPlugin, FloatingMenuPluginProps } from './floating-menu-plugin'\n\nexport type FloatingMenuOptions = Omit<FloatingMenuPluginProps, 'editor' | 'element'> & {\n  element: HTMLElement | null,\n}\n\nexport const FloatingMenu = Extension.create<FloatingMenuOptions>({\n  name: 'floatingMenu',\n\n  addOptions() {\n    return {\n      element: null,\n      tippyOptions: {},\n      pluginKey: 'floatingMenu',\n      shouldShow: null,\n    }\n  },\n\n  addProseMirrorPlugins() {\n    if (!this.options.element) {\n      return []\n    }\n\n    return [\n      FloatingMenuPlugin({\n        pluginKey: this.options.pluginKey,\n        editor: this.editor,\n        element: this.options.element,\n        tippyOptions: this.options.tippyOptions,\n        shouldShow: this.options.shouldShow,\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}