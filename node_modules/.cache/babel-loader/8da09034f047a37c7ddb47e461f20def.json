{"ast":null,"code":"import { Node, mergeAttributes, wrappingInputRule } from '@tiptap/core';\nconst inputRegex = /^\\s*([-+*])\\s$/;\nconst BulletList = Node.create({\n  name: 'bulletList',\n\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {}\n    };\n  },\n\n  group: 'block list',\n\n  content() {\n    return `${this.options.itemTypeName}+`;\n  },\n\n  parseHTML() {\n    return [{\n      tag: 'ul'\n    }];\n  },\n\n  renderHTML(_ref) {\n    let {\n      HTMLAttributes\n    } = _ref;\n    return ['ul', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n\n  addCommands() {\n    return {\n      toggleBulletList: () => _ref2 => {\n        let {\n          commands\n        } = _ref2;\n        return commands.toggleList(this.name, this.options.itemTypeName);\n      }\n    };\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-8': () => this.editor.commands.toggleBulletList()\n    };\n  },\n\n  addInputRules() {\n    return [wrappingInputRule({\n      find: inputRegex,\n      type: this.type\n    })];\n  }\n\n});\nexport { BulletList, BulletList as default, inputRegex };","map":{"version":3,"sources":["../src/bullet-list.ts"],"names":[],"mappings":";MAkBa,UAAU,GAAG,gB;MAEb,UAAU,GAAG,IAAI,CAAC,MAAL,CAA+B;AACvD,EAAA,IAAI,EAAE,YADiD;;AAGvD,EAAA,UAAU,GAAA;AACR,WAAO;AACL,MAAA,YAAY,EAAE,UADT;AAEL,MAAA,cAAc,EAAE;AAFX,KAAP;AAID,GARsD;;AAUvD,EAAA,KAAK,EAAE,YAVgD;;AAYvD,EAAA,OAAO,GAAA;AACL,WAAO,GAAG,KAAK,OAAL,CAAa,YAAY,GAAnC;AACD,GAdsD;;AAgBvD,EAAA,SAAS,GAAA;AACP,WAAO,CACL;AAAE,MAAA,GAAG,EAAE;AAAP,KADK,CAAP;AAGD,GApBsD;;AAsBvD,EAAA,UAAU,OAAmB;AAAA,QAAlB;AAAE,MAAA;AAAF,KAAkB;AAC3B,WAAO,CAAC,IAAD,EAAO,eAAe,CAAC,KAAK,OAAL,CAAa,cAAd,EAA8B,cAA9B,CAAtB,EAAqE,CAArE,CAAP;AACD,GAxBsD;;AA0BvD,EAAA,WAAW,GAAA;AACT,WAAO;AACL,MAAA,gBAAgB,EAAE,MAAM,SAAa;AAAA,YAAZ;AAAE,UAAA;AAAF,SAAY;AACnC,eAAO,QAAQ,CAAC,UAAT,CAAoB,KAAK,IAAzB,EAA+B,KAAK,OAAL,CAAa,YAA5C,CAAP;AACD;AAHI,KAAP;AAKD,GAhCsD;;AAkCvD,EAAA,oBAAoB,GAAA;AAClB,WAAO;AACL,qBAAe,MAAM,KAAK,MAAL,CAAY,QAAZ,CAAqB,gBAArB;AADhB,KAAP;AAGD,GAtCsD;;AAwCvD,EAAA,aAAa,GAAA;AACX,WAAO,CACL,iBAAiB,CAAC;AAChB,MAAA,IAAI,EAAE,UADU;AAEhB,MAAA,IAAI,EAAE,KAAK;AAFK,KAAD,CADZ,CAAP;AAMD;;AA/CsD,CAA/B,C","sourcesContent":["import { Node, mergeAttributes, wrappingInputRule } from '@tiptap/core'\n\nexport interface BulletListOptions {\n  itemTypeName: string,\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    bulletList: {\n      /**\n       * Toggle a bullet list\n       */\n      toggleBulletList: () => ReturnType,\n    }\n  }\n}\n\nexport const inputRegex = /^\\s*([-+*])\\s$/\n\nexport const BulletList = Node.create<BulletListOptions>({\n  name: 'bulletList',\n\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n    }\n  },\n\n  group: 'block list',\n\n  content() {\n    return `${this.options.itemTypeName}+`\n  },\n\n  parseHTML() {\n    return [\n      { tag: 'ul' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['ul', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      toggleBulletList: () => ({ commands }) => {\n        return commands.toggleList(this.name, this.options.itemTypeName)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-8': () => this.editor.commands.toggleBulletList(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}