{"ast":null,"code":"import { Node, mergeAttributes, wrappingInputRule } from '@tiptap/core';\nconst inputRegex = /^(\\d+)\\.\\s$/;\nconst OrderedList = Node.create({\n  name: 'orderedList',\n\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {}\n    };\n  },\n\n  group: 'block list',\n\n  content() {\n    return `${this.options.itemTypeName}+`;\n  },\n\n  addAttributes() {\n    return {\n      start: {\n        default: 1,\n        parseHTML: element => {\n          return element.hasAttribute('start') ? parseInt(element.getAttribute('start') || '', 10) : 1;\n        }\n      }\n    };\n  },\n\n  parseHTML() {\n    return [{\n      tag: 'ol'\n    }];\n  },\n\n  renderHTML(_ref) {\n    let {\n      HTMLAttributes\n    } = _ref;\n    const {\n      start,\n      ...attributesWithoutStart\n    } = HTMLAttributes;\n    return start === 1 ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0] : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n\n  addCommands() {\n    return {\n      toggleOrderedList: () => _ref2 => {\n        let {\n          commands\n        } = _ref2;\n        return commands.toggleList(this.name, this.options.itemTypeName);\n      }\n    };\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-7': () => this.editor.commands.toggleOrderedList()\n    };\n  },\n\n  addInputRules() {\n    return [wrappingInputRule({\n      find: inputRegex,\n      type: this.type,\n      getAttributes: match => ({\n        start: +match[1]\n      }),\n      joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1]\n    })];\n  }\n\n});\nexport { OrderedList, OrderedList as default, inputRegex };","map":{"version":3,"sources":["../src/ordered-list.ts"],"names":[],"mappings":";MAkBa,UAAU,GAAG,a;MAEb,WAAW,GAAG,IAAI,CAAC,MAAL,CAAgC;AACzD,EAAA,IAAI,EAAE,aADmD;;AAGzD,EAAA,UAAU,GAAA;AACR,WAAO;AACL,MAAA,YAAY,EAAE,UADT;AAEL,MAAA,cAAc,EAAE;AAFX,KAAP;AAID,GARwD;;AAUzD,EAAA,KAAK,EAAE,YAVkD;;AAYzD,EAAA,OAAO,GAAA;AACL,WAAO,GAAG,KAAK,OAAL,CAAa,YAAY,GAAnC;AACD,GAdwD;;AAgBzD,EAAA,aAAa,GAAA;AACX,WAAO;AACL,MAAA,KAAK,EAAE;AACL,QAAA,OAAO,EAAE,CADJ;AAEL,QAAA,SAAS,EAAE,OAAO,IAAA;AAChB,iBAAO,OAAO,CAAC,YAAR,CAAqB,OAArB,IACH,QAAQ,CAAC,OAAO,CAAC,YAAR,CAAqB,OAArB,KAAiC,EAAlC,EAAsC,EAAtC,CADL,GAEH,CAFJ;AAGD;AANI;AADF,KAAP;AAUD,GA3BwD;;AA6BzD,EAAA,SAAS,GAAA;AACP,WAAO,CACL;AACE,MAAA,GAAG,EAAE;AADP,KADK,CAAP;AAKD,GAnCwD;;AAqCzD,EAAA,UAAU,OAAmB;AAAA,QAAlB;AAAE,MAAA;AAAF,KAAkB;AAC3B,UAAM;AAAE,MAAA,KAAF;AAAS,SAAG;AAAZ,QAAuC,cAA7C;AAEA,WAAO,KAAK,KAAK,CAAV,GACH,CAAC,IAAD,EAAO,eAAe,CAAC,KAAK,OAAL,CAAa,cAAd,EAA8B,sBAA9B,CAAtB,EAA6E,CAA7E,CADG,GAEH,CAAC,IAAD,EAAO,eAAe,CAAC,KAAK,OAAL,CAAa,cAAd,EAA8B,cAA9B,CAAtB,EAAqE,CAArE,CAFJ;AAGD,GA3CwD;;AA6CzD,EAAA,WAAW,GAAA;AACT,WAAO;AACL,MAAA,iBAAiB,EAAE,MAAM,SAAa;AAAA,YAAZ;AAAE,UAAA;AAAF,SAAY;AACpC,eAAO,QAAQ,CAAC,UAAT,CAAoB,KAAK,IAAzB,EAA+B,KAAK,OAAL,CAAa,YAA5C,CAAP;AACD;AAHI,KAAP;AAKD,GAnDwD;;AAqDzD,EAAA,oBAAoB,GAAA;AAClB,WAAO;AACL,qBAAe,MAAM,KAAK,MAAL,CAAY,QAAZ,CAAqB,iBAArB;AADhB,KAAP;AAGD,GAzDwD;;AA2DzD,EAAA,aAAa,GAAA;AACX,WAAO,CACL,iBAAiB,CAAC;AAChB,MAAA,IAAI,EAAE,UADU;AAEhB,MAAA,IAAI,EAAE,KAAK,IAFK;AAGhB,MAAA,aAAa,EAAE,KAAK,KAAK;AAAE,QAAA,KAAK,EAAE,CAAC,KAAK,CAAC,CAAD;AAAf,OAAL,CAHJ;AAIhB,MAAA,aAAa,EAAE,CAAC,KAAD,EAAQ,IAAR,KAAiB,IAAI,CAAC,UAAL,GAAkB,IAAI,CAAC,KAAL,CAAW,KAA7B,KAAuC,CAAC,KAAK,CAAC,CAAD;AAJ7D,KAAD,CADZ,CAAP;AAQD;;AApEwD,CAAhC,C","sourcesContent":["import { Node, mergeAttributes, wrappingInputRule } from '@tiptap/core'\n\nexport interface OrderedListOptions {\n  itemTypeName: string,\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    orderedList: {\n      /**\n       * Toggle an ordered list\n       */\n      toggleOrderedList: () => ReturnType,\n    }\n  }\n}\n\nexport const inputRegex = /^(\\d+)\\.\\s$/\n\nexport const OrderedList = Node.create<OrderedListOptions>({\n  name: 'orderedList',\n\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n    }\n  },\n\n  group: 'block list',\n\n  content() {\n    return `${this.options.itemTypeName}+`\n  },\n\n  addAttributes() {\n    return {\n      start: {\n        default: 1,\n        parseHTML: element => {\n          return element.hasAttribute('start')\n            ? parseInt(element.getAttribute('start') || '', 10)\n            : 1\n        },\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'ol',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    const { start, ...attributesWithoutStart } = HTMLAttributes\n\n    return start === 1\n      ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0]\n      : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      toggleOrderedList: () => ({ commands }) => {\n        return commands.toggleList(this.name, this.options.itemTypeName)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-7': () => this.editor.commands.toggleOrderedList(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n        getAttributes: match => ({ start: +match[1] }),\n        joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}