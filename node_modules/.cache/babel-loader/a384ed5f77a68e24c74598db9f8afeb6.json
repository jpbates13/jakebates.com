{"ast":null,"code":"import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\nconst inputRegex = /(?:^|\\s)((?:`)((?:[^`]+))(?:`))$/;\nconst pasteRegex = /(?:^|\\s)((?:`)((?:[^`]+))(?:`))/g;\nconst Code = Mark.create({\n  name: 'code',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n\n  excludes: '_',\n  code: true,\n\n  parseHTML() {\n    return [{\n      tag: 'code'\n    }];\n  },\n\n  renderHTML(_ref) {\n    let {\n      HTMLAttributes\n    } = _ref;\n    return ['code', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n\n  addCommands() {\n    return {\n      setCode: () => _ref2 => {\n        let {\n          commands\n        } = _ref2;\n        return commands.setMark(this.name);\n      },\n      toggleCode: () => _ref3 => {\n        let {\n          commands\n        } = _ref3;\n        return commands.toggleMark(this.name);\n      },\n      unsetCode: () => _ref4 => {\n        let {\n          commands\n        } = _ref4;\n        return commands.unsetMark(this.name);\n      }\n    };\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-e': () => this.editor.commands.toggleCode()\n    };\n  },\n\n  addInputRules() {\n    return [markInputRule({\n      find: inputRegex,\n      type: this.type\n    })];\n  },\n\n  addPasteRules() {\n    return [markPasteRule({\n      find: pasteRegex,\n      type: this.type\n    })];\n  }\n\n});\nexport { Code, Code as default, inputRegex, pasteRegex };","map":{"version":3,"sources":["../src/code.ts"],"names":[],"mappings":";MA8Ba,UAAU,GAAG,kC;MACb,UAAU,GAAG,kC;MAEb,IAAI,GAAG,IAAI,CAAC,MAAL,CAAyB;AAC3C,EAAA,IAAI,EAAE,MADqC;;AAG3C,EAAA,UAAU,GAAA;AACR,WAAO;AACL,MAAA,cAAc,EAAE;AADX,KAAP;AAGD,GAP0C;;AAS3C,EAAA,QAAQ,EAAE,GATiC;AAW3C,EAAA,IAAI,EAAE,IAXqC;;AAa3C,EAAA,SAAS,GAAA;AACP,WAAO,CACL;AAAE,MAAA,GAAG,EAAE;AAAP,KADK,CAAP;AAGD,GAjB0C;;AAmB3C,EAAA,UAAU,OAAmB;AAAA,QAAlB;AAAE,MAAA;AAAF,KAAkB;AAC3B,WAAO,CAAC,MAAD,EAAS,eAAe,CAAC,KAAK,OAAL,CAAa,cAAd,EAA8B,cAA9B,CAAxB,EAAuE,CAAvE,CAAP;AACD,GArB0C;;AAuB3C,EAAA,WAAW,GAAA;AACT,WAAO;AACL,MAAA,OAAO,EAAE,MAAM,SAAa;AAAA,YAAZ;AAAE,UAAA;AAAF,SAAY;AAC1B,eAAO,QAAQ,CAAC,OAAT,CAAiB,KAAK,IAAtB,CAAP;AACD,OAHI;AAIL,MAAA,UAAU,EAAE,MAAM,SAAa;AAAA,YAAZ;AAAE,UAAA;AAAF,SAAY;AAC7B,eAAO,QAAQ,CAAC,UAAT,CAAoB,KAAK,IAAzB,CAAP;AACD,OANI;AAOL,MAAA,SAAS,EAAE,MAAM,SAAa;AAAA,YAAZ;AAAE,UAAA;AAAF,SAAY;AAC5B,eAAO,QAAQ,CAAC,SAAT,CAAmB,KAAK,IAAxB,CAAP;AACD;AATI,KAAP;AAWD,GAnC0C;;AAqC3C,EAAA,oBAAoB,GAAA;AAClB,WAAO;AACL,eAAS,MAAM,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB;AADV,KAAP;AAGD,GAzC0C;;AA2C3C,EAAA,aAAa,GAAA;AACX,WAAO,CACL,aAAa,CAAC;AACZ,MAAA,IAAI,EAAE,UADM;AAEZ,MAAA,IAAI,EAAE,KAAK;AAFC,KAAD,CADR,CAAP;AAMD,GAlD0C;;AAoD3C,EAAA,aAAa,GAAA;AACX,WAAO,CACL,aAAa,CAAC;AACZ,MAAA,IAAI,EAAE,UADM;AAEZ,MAAA,IAAI,EAAE,KAAK;AAFC,KAAD,CADR,CAAP;AAMD;;AA3D0C,CAAzB,C","sourcesContent":["import {\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface CodeOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    code: {\n      /**\n       * Set a code mark\n       */\n      setCode: () => ReturnType,\n      /**\n       * Toggle inline code\n       */\n      toggleCode: () => ReturnType,\n      /**\n       * Unset a code mark\n       */\n      unsetCode: () => ReturnType,\n    }\n  }\n}\n\nexport const inputRegex = /(?:^|\\s)((?:`)((?:[^`]+))(?:`))$/\nexport const pasteRegex = /(?:^|\\s)((?:`)((?:[^`]+))(?:`))/g\n\nexport const Code = Mark.create<CodeOptions>({\n  name: 'code',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  excludes: '_',\n\n  code: true,\n\n  parseHTML() {\n    return [\n      { tag: 'code' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['code', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setCode: () => ({ commands }) => {\n        return commands.setMark(this.name)\n      },\n      toggleCode: () => ({ commands }) => {\n        return commands.toggleMark(this.name)\n      },\n      unsetCode: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-e': () => this.editor.commands.toggleCode(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: pasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}