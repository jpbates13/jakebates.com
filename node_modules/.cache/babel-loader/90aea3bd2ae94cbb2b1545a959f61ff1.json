{"ast":null,"code":"import { Node, mergeAttributes, wrappingInputRule } from '@tiptap/core';\nconst inputRegex = /^\\s*>\\s$/;\nconst Blockquote = Node.create({\n  name: 'blockquote',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n\n  content: 'block+',\n  group: 'block',\n  defining: true,\n\n  parseHTML() {\n    return [{\n      tag: 'blockquote'\n    }];\n  },\n\n  renderHTML(_ref) {\n    let {\n      HTMLAttributes\n    } = _ref;\n    return ['blockquote', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n\n  addCommands() {\n    return {\n      setBlockquote: () => _ref2 => {\n        let {\n          commands\n        } = _ref2;\n        return commands.wrapIn(this.name);\n      },\n      toggleBlockquote: () => _ref3 => {\n        let {\n          commands\n        } = _ref3;\n        return commands.toggleWrap(this.name);\n      },\n      unsetBlockquote: () => _ref4 => {\n        let {\n          commands\n        } = _ref4;\n        return commands.lift(this.name);\n      }\n    };\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-b': () => this.editor.commands.toggleBlockquote()\n    };\n  },\n\n  addInputRules() {\n    return [wrappingInputRule({\n      find: inputRegex,\n      type: this.type\n    })];\n  }\n\n});\nexport { Blockquote, Blockquote as default, inputRegex };","map":{"version":3,"sources":["../src/blockquote.ts"],"names":[],"mappings":";MAyBa,UAAU,GAAG,U;MAEb,UAAU,GAAG,IAAI,CAAC,MAAL,CAA+B;AAEvD,EAAA,IAAI,EAAE,YAFiD;;AAIvD,EAAA,UAAU,GAAA;AACR,WAAO;AACL,MAAA,cAAc,EAAE;AADX,KAAP;AAGD,GARsD;;AAUvD,EAAA,OAAO,EAAE,QAV8C;AAYvD,EAAA,KAAK,EAAE,OAZgD;AAcvD,EAAA,QAAQ,EAAE,IAd6C;;AAgBvD,EAAA,SAAS,GAAA;AACP,WAAO,CACL;AAAE,MAAA,GAAG,EAAE;AAAP,KADK,CAAP;AAGD,GApBsD;;AAsBvD,EAAA,UAAU,OAAmB;AAAA,QAAlB;AAAE,MAAA;AAAF,KAAkB;AAC3B,WAAO,CAAC,YAAD,EAAe,eAAe,CAAC,KAAK,OAAL,CAAa,cAAd,EAA8B,cAA9B,CAA9B,EAA6E,CAA7E,CAAP;AACD,GAxBsD;;AA0BvD,EAAA,WAAW,GAAA;AACT,WAAO;AACL,MAAA,aAAa,EAAE,MAAM,SAAa;AAAA,YAAZ;AAAE,UAAA;AAAF,SAAY;AAChC,eAAO,QAAQ,CAAC,MAAT,CAAgB,KAAK,IAArB,CAAP;AACD,OAHI;AAIL,MAAA,gBAAgB,EAAE,MAAM,SAAa;AAAA,YAAZ;AAAE,UAAA;AAAF,SAAY;AACnC,eAAO,QAAQ,CAAC,UAAT,CAAoB,KAAK,IAAzB,CAAP;AACD,OANI;AAOL,MAAA,eAAe,EAAE,MAAM,SAAa;AAAA,YAAZ;AAAE,UAAA;AAAF,SAAY;AAClC,eAAO,QAAQ,CAAC,IAAT,CAAc,KAAK,IAAnB,CAAP;AACD;AATI,KAAP;AAWD,GAtCsD;;AAwCvD,EAAA,oBAAoB,GAAA;AAClB,WAAO;AACL,qBAAe,MAAM,KAAK,MAAL,CAAY,QAAZ,CAAqB,gBAArB;AADhB,KAAP;AAGD,GA5CsD;;AA8CvD,EAAA,aAAa,GAAA;AACX,WAAO,CACL,iBAAiB,CAAC;AAChB,MAAA,IAAI,EAAE,UADU;AAEhB,MAAA,IAAI,EAAE,KAAK;AAFK,KAAD,CADZ,CAAP;AAMD;;AArDsD,CAA/B,C","sourcesContent":["import { Node, mergeAttributes, wrappingInputRule } from '@tiptap/core'\n\nexport interface BlockquoteOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    blockQuote: {\n      /**\n       * Set a blockquote node\n       */\n      setBlockquote: () => ReturnType,\n      /**\n       * Toggle a blockquote node\n       */\n      toggleBlockquote: () => ReturnType,\n      /**\n       * Unset a blockquote node\n       */\n      unsetBlockquote: () => ReturnType,\n    }\n  }\n}\n\nexport const inputRegex = /^\\s*>\\s$/\n\nexport const Blockquote = Node.create<BlockquoteOptions>({\n\n  name: 'blockquote',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  content: 'block+',\n\n  group: 'block',\n\n  defining: true,\n\n  parseHTML() {\n    return [\n      { tag: 'blockquote' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['blockquote', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setBlockquote: () => ({ commands }) => {\n        return commands.wrapIn(this.name)\n      },\n      toggleBlockquote: () => ({ commands }) => {\n        return commands.toggleWrap(this.name)\n      },\n      unsetBlockquote: () => ({ commands }) => {\n        return commands.lift(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-b': () => this.editor.commands.toggleBlockquote(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}