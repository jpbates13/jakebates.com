{"ast":null,"code":"import { Node, mergeAttributes, textblockTypeInputRule } from '@tiptap/core';\nconst Heading = Node.create({\n  name: 'heading',\n\n  addOptions() {\n    return {\n      levels: [1, 2, 3, 4, 5, 6],\n      HTMLAttributes: {}\n    };\n  },\n\n  content: 'inline*',\n  group: 'block',\n  defining: true,\n\n  addAttributes() {\n    return {\n      level: {\n        default: 1,\n        rendered: false\n      }\n    };\n  },\n\n  parseHTML() {\n    return this.options.levels.map(level => ({\n      tag: `h${level}`,\n      attrs: {\n        level\n      }\n    }));\n  },\n\n  renderHTML(_ref) {\n    let {\n      node,\n      HTMLAttributes\n    } = _ref;\n    const hasLevel = this.options.levels.includes(node.attrs.level);\n    const level = hasLevel ? node.attrs.level : this.options.levels[0];\n    return [`h${level}`, mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n\n  addCommands() {\n    return {\n      setHeading: attributes => _ref2 => {\n        let {\n          commands\n        } = _ref2;\n\n        if (!this.options.levels.includes(attributes.level)) {\n          return false;\n        }\n\n        return commands.setNode(this.name, attributes);\n      },\n      toggleHeading: attributes => _ref3 => {\n        let {\n          commands\n        } = _ref3;\n\n        if (!this.options.levels.includes(attributes.level)) {\n          return false;\n        }\n\n        return commands.toggleNode(this.name, 'paragraph', attributes);\n      }\n    };\n  },\n\n  addKeyboardShortcuts() {\n    return this.options.levels.reduce((items, level) => ({ ...items,\n      ...{\n        [`Mod-Alt-${level}`]: () => this.editor.commands.toggleHeading({\n          level\n        })\n      }\n    }), {});\n  },\n\n  addInputRules() {\n    return this.options.levels.map(level => {\n      return textblockTypeInputRule({\n        find: new RegExp(`^(#{1,${level}})\\\\s$`),\n        type: this.type,\n        getAttributes: {\n          level\n        }\n      });\n    });\n  }\n\n});\nexport { Heading, Heading as default };","map":{"version":3,"sources":["../src/heading.ts"],"names":[],"mappings":"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","sourcesContent":["import { Node, mergeAttributes, textblockTypeInputRule } from '@tiptap/core'\n\ntype Level = 1 | 2 | 3 | 4 | 5 | 6\n\nexport interface HeadingOptions {\n  levels: Level[],\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    heading: {\n      /**\n       * Set a heading node\n       */\n      setHeading: (attributes: { level: Level }) => ReturnType,\n      /**\n       * Toggle a heading node\n       */\n      toggleHeading: (attributes: { level: Level }) => ReturnType,\n    }\n  }\n}\n\nexport const Heading = Node.create<HeadingOptions>({\n  name: 'heading',\n\n  addOptions() {\n    return {\n      levels: [1, 2, 3, 4, 5, 6],\n      HTMLAttributes: {},\n    }\n  },\n\n  content: 'inline*',\n\n  group: 'block',\n\n  defining: true,\n\n  addAttributes() {\n    return {\n      level: {\n        default: 1,\n        rendered: false,\n      },\n    }\n  },\n\n  parseHTML() {\n    return this.options.levels\n      .map((level: Level) => ({\n        tag: `h${level}`,\n        attrs: { level },\n      }))\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    const hasLevel = this.options.levels.includes(node.attrs.level)\n    const level = hasLevel\n      ? node.attrs.level\n      : this.options.levels[0]\n\n    return [`h${level}`, mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setHeading: attributes => ({ commands }) => {\n        if (!this.options.levels.includes(attributes.level)) {\n          return false\n        }\n\n        return commands.setNode(this.name, attributes)\n      },\n      toggleHeading: attributes => ({ commands }) => {\n        if (!this.options.levels.includes(attributes.level)) {\n          return false\n        }\n\n        return commands.toggleNode(this.name, 'paragraph', attributes)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return this.options.levels.reduce((items, level) => ({\n      ...items,\n      ...{\n        [`Mod-Alt-${level}`]: () => this.editor.commands.toggleHeading({ level }),\n      },\n    }), {})\n  },\n\n  addInputRules() {\n    return this.options.levels.map(level => {\n      return textblockTypeInputRule({\n        find: new RegExp(`^(#{1,${level}})\\\\s$`),\n        type: this.type,\n        getAttributes: {\n          level,\n        },\n      })\n    })\n  },\n})\n"]},"metadata":{},"sourceType":"module"}