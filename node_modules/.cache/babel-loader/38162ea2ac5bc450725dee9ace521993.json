{"ast":null,"code":"import { Plugin, PluginKey, TextSelection, Selection, NodeSelection, EditorState } from 'prosemirror-state';\nimport { liftTarget, ReplaceStep, ReplaceAroundStep, canSplit, canJoin, findWrapping, Transform } from 'prosemirror-transform';\nimport { createParagraphNear as createParagraphNear$2, deleteSelection as deleteSelection$2, exitCode as exitCode$2, joinBackward as joinBackward$2, joinForward as joinForward$2, lift as lift$2, liftEmptyBlock as liftEmptyBlock$2, newlineInCode as newlineInCode$2, selectNodeBackward as selectNodeBackward$2, selectNodeForward as selectNodeForward$2, selectParentNode as selectParentNode$2, setBlockType, wrapIn as wrapIn$2 } from 'prosemirror-commands';\nimport { Fragment, DOMParser, Slice, DOMSerializer, Schema, Node as Node$1 } from 'prosemirror-model';\nimport { liftListItem as liftListItem$2, sinkListItem as sinkListItem$2, wrapInList as wrapInList$2 } from 'prosemirror-schema-list';\nimport { EditorView } from 'prosemirror-view';\nimport { keymap } from 'prosemirror-keymap'; // see: https://github.com/mesqueeb/is-what/blob/88d6e4ca92fb2baab6003c54e02eedf4e729e5ab/src/index.ts\n\nfunction getType(value) {\n  return Object.prototype.toString.call(value).slice(8, -1);\n}\n\nfunction isPlainObject(value) {\n  if (getType(value) !== 'Object') {\n    return false;\n  }\n\n  return value.constructor === Object && Object.getPrototypeOf(value) === Object.prototype;\n}\n\nfunction mergeDeep(target, source) {\n  const output = { ...target\n  };\n\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (isPlainObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, {\n            [key]: source[key]\n          });\n        } else {\n          output[key] = mergeDeep(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, {\n          [key]: source[key]\n        });\n      }\n    });\n  }\n\n  return output;\n}\n\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n/**\r\n * Optionally calls `value` as a function.\r\n * Otherwise it is returned directly.\r\n * @param value Function or any value.\r\n * @param context Optional context to bind to function.\r\n * @param props Optional props to pass to function.\r\n */\n\n\nfunction callOrReturn(value) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n  if (isFunction(value)) {\n    for (var _len = arguments.length, props = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      props[_key - 2] = arguments[_key];\n    }\n\n    if (context) {\n      return value.bind(context)(...props);\n    }\n\n    return value(...props);\n  }\n\n  return value;\n}\n\nfunction getExtensionField(extension, field, context) {\n  if (extension.config[field] === undefined && extension.parent) {\n    return getExtensionField(extension.parent, field, context);\n  }\n\n  if (typeof extension.config[field] === 'function') {\n    const value = extension.config[field].bind({ ...context,\n      parent: extension.parent ? getExtensionField(extension.parent, field, context) : null\n    });\n    return value;\n  }\n\n  return extension.config[field];\n}\n\nclass Extension {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.type = 'extension';\n    this.name = 'extension';\n    this.parent = null;\n    this.child = null;\n    this.config = {\n      name: this.name,\n      defaultOptions: {}\n    };\n    this.config = { ...this.config,\n      ...config\n    };\n    this.name = this.config.name;\n\n    if (config.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`);\n    } // TODO: remove `addOptions` fallback\n\n\n    this.options = this.config.defaultOptions;\n\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField(this, 'addOptions', {\n        name: this.name\n      }));\n    }\n\n    this.storage = callOrReturn(getExtensionField(this, 'addStorage', {\n      name: this.name,\n      options: this.options\n    })) || {};\n  }\n\n  static create() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return new Extension(config);\n  }\n\n  configure() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend();\n    extension.options = mergeDeep(this.options, options);\n    extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n      name: extension.name,\n      options: extension.options\n    }));\n    return extension;\n  }\n\n  extend() {\n    let extendedConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const extension = new Extension(extendedConfig);\n    extension.parent = this;\n    this.child = extension;\n    extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n\n    if (extendedConfig.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`);\n    }\n\n    extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {\n      name: extension.name\n    }));\n    extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n      name: extension.name,\n      options: extension.options\n    }));\n    return extension;\n  }\n\n}\n\nfunction getTextBetween(startNode, range, options) {\n  const {\n    from,\n    to\n  } = range;\n  const {\n    blockSeparator = '\\n\\n',\n    textSerializers = {}\n  } = options || {};\n  let text = '';\n  let separated = true;\n  startNode.nodesBetween(from, to, (node, pos, parent, index) => {\n    var _a;\n\n    const textSerializer = textSerializers === null || textSerializers === void 0 ? void 0 : textSerializers[node.type.name];\n\n    if (textSerializer) {\n      if (node.isBlock && !separated) {\n        text += blockSeparator;\n        separated = true;\n      }\n\n      text += textSerializer({\n        node,\n        pos,\n        parent,\n        index\n      });\n    } else if (node.isText) {\n      text += (_a = node === null || node === void 0 ? void 0 : node.text) === null || _a === void 0 ? void 0 : _a.slice(Math.max(from, pos) - pos, to - pos);\n      separated = false;\n    } else if (node.isBlock && !separated) {\n      text += blockSeparator;\n      separated = true;\n    }\n  });\n  return text;\n}\n\nfunction getTextSeralizersFromSchema(schema) {\n  return Object.fromEntries(Object.entries(schema.nodes).filter(_ref => {\n    let [, node] = _ref;\n    return node.spec.toText;\n  }).map(_ref2 => {\n    let [name, node] = _ref2;\n    return [name, node.spec.toText];\n  }));\n}\n\nconst ClipboardTextSerializer = Extension.create({\n  name: 'clipboardTextSerializer',\n\n  addProseMirrorPlugins() {\n    return [new Plugin({\n      key: new PluginKey('clipboardTextSerializer'),\n      props: {\n        clipboardTextSerializer: () => {\n          const {\n            editor\n          } = this;\n          const {\n            state,\n            schema\n          } = editor;\n          const {\n            doc,\n            selection\n          } = state;\n          const {\n            ranges\n          } = selection;\n          const from = Math.min(...ranges.map(range => range.$from.pos));\n          const to = Math.max(...ranges.map(range => range.$to.pos));\n          const textSerializers = getTextSeralizersFromSchema(schema);\n          const range = {\n            from,\n            to\n          };\n          return getTextBetween(doc, range, {\n            textSerializers\n          });\n        }\n      }\n    })];\n  }\n\n});\n\nconst blur = () => _ref3 => {\n  let {\n    editor,\n    view\n  } = _ref3;\n  requestAnimationFrame(() => {\n    if (!editor.isDestroyed) {\n      view.dom.blur();\n    }\n  });\n  return true;\n};\n\nvar blur$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  blur: blur\n});\n\nconst clearContent = function () {\n  let emitUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  return _ref4 => {\n    let {\n      commands\n    } = _ref4;\n    return commands.setContent('', emitUpdate);\n  };\n};\n\nvar clearContent$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  clearContent: clearContent\n});\n\nconst clearNodes = () => _ref5 => {\n  let {\n    state,\n    tr,\n    dispatch\n  } = _ref5;\n  const {\n    selection\n  } = tr;\n  const {\n    ranges\n  } = selection;\n\n  if (!dispatch) {\n    return true;\n  }\n\n  ranges.forEach(_ref6 => {\n    let {\n      $from,\n      $to\n    } = _ref6;\n    state.doc.nodesBetween($from.pos, $to.pos, (node, pos) => {\n      if (node.type.isText) {\n        return;\n      }\n\n      const {\n        doc,\n        mapping\n      } = tr;\n      const $mappedFrom = doc.resolve(mapping.map(pos));\n      const $mappedTo = doc.resolve(mapping.map(pos + node.nodeSize));\n      const nodeRange = $mappedFrom.blockRange($mappedTo);\n\n      if (!nodeRange) {\n        return;\n      }\n\n      const targetLiftDepth = liftTarget(nodeRange);\n\n      if (node.type.isTextblock) {\n        const {\n          defaultType\n        } = $mappedFrom.parent.contentMatchAt($mappedFrom.index());\n        tr.setNodeMarkup(nodeRange.start, defaultType);\n      }\n\n      if (targetLiftDepth || targetLiftDepth === 0) {\n        tr.lift(nodeRange, targetLiftDepth);\n      }\n    });\n  });\n  return true;\n};\n\nvar clearNodes$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  clearNodes: clearNodes\n});\n\nconst command = fn => props => {\n  return fn(props);\n};\n\nvar command$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  command: command\n});\n\nconst createParagraphNear = () => _ref7 => {\n  let {\n    state,\n    dispatch\n  } = _ref7;\n  return createParagraphNear$2(state, dispatch);\n};\n\nvar createParagraphNear$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createParagraphNear: createParagraphNear\n});\n\nfunction getNodeType(nameOrType, schema) {\n  if (typeof nameOrType === 'string') {\n    if (!schema.nodes[nameOrType]) {\n      throw Error(`There is no node type named '${nameOrType}'. Maybe you forgot to add the extension?`);\n    }\n\n    return schema.nodes[nameOrType];\n  }\n\n  return nameOrType;\n}\n\nconst deleteNode = typeOrName => _ref8 => {\n  let {\n    tr,\n    state,\n    dispatch\n  } = _ref8;\n  const type = getNodeType(typeOrName, state.schema);\n  const $pos = tr.selection.$anchor;\n\n  for (let depth = $pos.depth; depth > 0; depth -= 1) {\n    const node = $pos.node(depth);\n\n    if (node.type === type) {\n      if (dispatch) {\n        const from = $pos.before(depth);\n        const to = $pos.after(depth);\n        tr.delete(from, to).scrollIntoView();\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n};\n\nvar deleteNode$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  deleteNode: deleteNode\n});\n\nconst deleteRange = range => _ref9 => {\n  let {\n    tr,\n    dispatch\n  } = _ref9;\n  const {\n    from,\n    to\n  } = range;\n\n  if (dispatch) {\n    tr.delete(from, to);\n  }\n\n  return true;\n};\n\nvar deleteRange$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  deleteRange: deleteRange\n});\n\nconst deleteSelection = () => _ref10 => {\n  let {\n    state,\n    dispatch\n  } = _ref10;\n  return deleteSelection$2(state, dispatch);\n};\n\nvar deleteSelection$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  deleteSelection: deleteSelection\n});\n\nconst enter = () => _ref11 => {\n  let {\n    commands\n  } = _ref11;\n  return commands.keyboardShortcut('Enter');\n};\n\nvar enter$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  enter: enter\n});\n\nconst exitCode = () => _ref12 => {\n  let {\n    state,\n    dispatch\n  } = _ref12;\n  return exitCode$2(state, dispatch);\n};\n\nvar exitCode$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  exitCode: exitCode\n});\n\nfunction getMarkType(nameOrType, schema) {\n  if (typeof nameOrType === 'string') {\n    if (!schema.marks[nameOrType]) {\n      throw Error(`There is no mark type named '${nameOrType}'. Maybe you forgot to add the extension?`);\n    }\n\n    return schema.marks[nameOrType];\n  }\n\n  return nameOrType;\n}\n\nfunction isRegExp(value) {\n  return Object.prototype.toString.call(value) === '[object RegExp]';\n}\n/**\r\n * Check if object1 includes object2\r\n * @param object1 Object\r\n * @param object2 Object\r\n */\n\n\nfunction objectIncludes(object1, object2) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    strict: true\n  };\n  const keys = Object.keys(object2);\n\n  if (!keys.length) {\n    return true;\n  }\n\n  return keys.every(key => {\n    if (options.strict) {\n      return object2[key] === object1[key];\n    }\n\n    if (isRegExp(object2[key])) {\n      return object2[key].test(object1[key]);\n    }\n\n    return object2[key] === object1[key];\n  });\n}\n\nfunction findMarkInSet(marks, type) {\n  let attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return marks.find(item => {\n    return item.type === type && objectIncludes(item.attrs, attributes);\n  });\n}\n\nfunction isMarkInSet(marks, type) {\n  let attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return !!findMarkInSet(marks, type, attributes);\n}\n\nfunction getMarkRange($pos, type) {\n  let attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (!$pos || !type) {\n    return;\n  }\n\n  const start = $pos.parent.childAfter($pos.parentOffset);\n\n  if (!start.node) {\n    return;\n  }\n\n  const mark = findMarkInSet(start.node.marks, type, attributes);\n\n  if (!mark) {\n    return;\n  }\n\n  let startIndex = $pos.index();\n  let startPos = $pos.start() + start.offset;\n  let endIndex = startIndex + 1;\n  let endPos = startPos + start.node.nodeSize;\n  findMarkInSet(start.node.marks, type, attributes);\n\n  while (startIndex > 0 && mark.isInSet($pos.parent.child(startIndex - 1).marks)) {\n    startIndex -= 1;\n    startPos -= $pos.parent.child(startIndex).nodeSize;\n  }\n\n  while (endIndex < $pos.parent.childCount && isMarkInSet($pos.parent.child(endIndex).marks, type, attributes)) {\n    endPos += $pos.parent.child(endIndex).nodeSize;\n    endIndex += 1;\n  }\n\n  return {\n    from: startPos,\n    to: endPos\n  };\n}\n\nconst extendMarkRange = function (typeOrName) {\n  let attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return _ref13 => {\n    let {\n      tr,\n      state,\n      dispatch\n    } = _ref13;\n    const type = getMarkType(typeOrName, state.schema);\n    const {\n      doc,\n      selection\n    } = tr;\n    const {\n      $from,\n      from,\n      to\n    } = selection;\n\n    if (dispatch) {\n      const range = getMarkRange($from, type, attributes);\n\n      if (range && range.from <= from && range.to >= to) {\n        const newSelection = TextSelection.create(doc, range.from, range.to);\n        tr.setSelection(newSelection);\n      }\n    }\n\n    return true;\n  };\n};\n\nvar extendMarkRange$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  extendMarkRange: extendMarkRange\n});\n\nconst first = commands => props => {\n  const items = typeof commands === 'function' ? commands(props) : commands;\n\n  for (let i = 0; i < items.length; i += 1) {\n    if (items[i](props)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nvar first$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  first: first\n});\n\nfunction isClass(value) {\n  var _a;\n\n  if (((_a = value.constructor) === null || _a === void 0 ? void 0 : _a.toString().substring(0, 5)) !== 'class') {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isObject(value) {\n  return value && typeof value === 'object' && !Array.isArray(value) && !isClass(value);\n}\n\nfunction isTextSelection(value) {\n  return isObject(value) && value instanceof TextSelection;\n}\n\nfunction isiOS() {\n  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform) // iPad on iOS 13 detection\n  || navigator.userAgent.includes('Mac') && 'ontouchend' in document;\n}\n\nfunction minMax() {\n  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return Math.min(Math.max(value, min), max);\n}\n\nfunction resolveFocusPosition(doc) {\n  let position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (!position) {\n    return null;\n  }\n\n  if (position === 'start' || position === true) {\n    return Selection.atStart(doc);\n  }\n\n  if (position === 'end') {\n    return Selection.atEnd(doc);\n  }\n\n  if (position === 'all') {\n    return TextSelection.create(doc, 0, doc.content.size);\n  } // Check if `position` is in bounds of the doc if `position` is a number.\n\n\n  const minPos = Selection.atStart(doc).from;\n  const maxPos = Selection.atEnd(doc).to;\n  const resolvedFrom = minMax(position, minPos, maxPos);\n  const resolvedEnd = minMax(position, minPos, maxPos);\n  return TextSelection.create(doc, resolvedFrom, resolvedEnd);\n}\n\nconst focus = function () {\n  let position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let options = arguments.length > 1 ? arguments[1] : undefined;\n  return _ref14 => {\n    let {\n      editor,\n      view,\n      tr,\n      dispatch\n    } = _ref14;\n    options = {\n      scrollIntoView: true,\n      ...options\n    };\n\n    const delayedFocus = () => {\n      // focus within `requestAnimationFrame` breaks focus on iOS\n      // so we have to call this\n      if (isiOS()) {\n        view.dom.focus();\n      } // For React we have to focus asynchronously. Otherwise wild things happen.\n      // see: https://github.com/ueberdosis/tiptap/issues/1520\n\n\n      requestAnimationFrame(() => {\n        if (!editor.isDestroyed) {\n          view.focus();\n\n          if (options === null || options === void 0 ? void 0 : options.scrollIntoView) {\n            editor.commands.scrollIntoView();\n          }\n        }\n      });\n    };\n\n    if (view.hasFocus() && position === null || position === false) {\n      return true;\n    } // we don’t try to resolve a NodeSelection or CellSelection\n\n\n    if (dispatch && position === null && !isTextSelection(editor.state.selection)) {\n      delayedFocus();\n      return true;\n    }\n\n    const selection = resolveFocusPosition(editor.state.doc, position) || editor.state.selection;\n    const isSameSelection = editor.state.selection.eq(selection);\n\n    if (dispatch) {\n      if (!isSameSelection) {\n        tr.setSelection(selection);\n      } // `tr.setSelection` resets the stored marks\n      // so we’ll restore them if the selection is the same as before\n\n\n      if (isSameSelection && tr.storedMarks) {\n        tr.setStoredMarks(tr.storedMarks);\n      }\n\n      delayedFocus();\n    }\n\n    return true;\n  };\n};\n\nvar focus$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  focus: focus\n});\n\nconst forEach = (items, fn) => props => {\n  return items.every((item, index) => fn(item, { ...props,\n    index\n  }));\n};\n\nvar forEach$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  forEach: forEach\n});\n\nconst insertContent = (value, options) => _ref15 => {\n  let {\n    tr,\n    commands\n  } = _ref15;\n  return commands.insertContentAt({\n    from: tr.selection.from,\n    to: tr.selection.to\n  }, value, options);\n};\n\nvar insertContent$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  insertContent: insertContent\n});\n\nfunction elementFromString(value) {\n  // add a wrapper to preserve leading and trailing whitespace\n  const wrappedValue = `<body>${value}</body>`;\n  return new window.DOMParser().parseFromString(wrappedValue, 'text/html').body;\n}\n\nfunction createNodeFromContent(content, schema, options) {\n  options = {\n    slice: true,\n    parseOptions: {},\n    ...options\n  };\n\n  if (typeof content === 'object' && content !== null) {\n    try {\n      if (Array.isArray(content)) {\n        return Fragment.fromArray(content.map(item => schema.nodeFromJSON(item)));\n      }\n\n      return schema.nodeFromJSON(content);\n    } catch (error) {\n      console.warn('[tiptap warn]: Invalid content.', 'Passed value:', content, 'Error:', error);\n      return createNodeFromContent('', schema, options);\n    }\n  }\n\n  if (typeof content === 'string') {\n    const parser = DOMParser.fromSchema(schema);\n    return options.slice ? parser.parseSlice(elementFromString(content), options.parseOptions).content : parser.parse(elementFromString(content), options.parseOptions);\n  }\n\n  return createNodeFromContent('', schema, options);\n} // source: https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.js#L466\n\n\nfunction selectionToInsertionEnd(tr, startLen, bias) {\n  const last = tr.steps.length - 1;\n\n  if (last < startLen) {\n    return;\n  }\n\n  const step = tr.steps[last];\n\n  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) {\n    return;\n  }\n\n  const map = tr.mapping.maps[last];\n  let end = 0;\n  map.forEach((_from, _to, _newFrom, newTo) => {\n    if (end === 0) {\n      end = newTo;\n    }\n  });\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias));\n}\n\nconst isFragment = nodeOrFragment => {\n  return nodeOrFragment.toString().startsWith('<');\n};\n\nconst insertContentAt = (position, value, options) => _ref16 => {\n  let {\n    tr,\n    dispatch,\n    editor\n  } = _ref16;\n\n  if (dispatch) {\n    options = {\n      parseOptions: {},\n      updateSelection: true,\n      ...options\n    };\n    const content = createNodeFromContent(value, editor.schema, {\n      parseOptions: {\n        preserveWhitespace: 'full',\n        ...options.parseOptions\n      }\n    }); // don’t dispatch an empty fragment because this can lead to strange errors\n\n    if (content.toString() === '<>') {\n      return true;\n    }\n\n    let {\n      from,\n      to\n    } = typeof position === 'number' ? {\n      from: position,\n      to: position\n    } : position;\n    let isOnlyBlockContent = true;\n    const nodes = isFragment(content) ? content : [content];\n    nodes.forEach(node => {\n      // check if added node is valid\n      node.check();\n      isOnlyBlockContent = isOnlyBlockContent ? node.isBlock : false;\n    }); // check if we can replace the wrapping node by\n    // the newly inserted content\n    // example:\n    // replace an empty paragraph by an inserted image\n    // instead of inserting the image below the paragraph\n\n    if (from === to && isOnlyBlockContent) {\n      const {\n        parent\n      } = tr.doc.resolve(from);\n      const isEmptyTextBlock = parent.isTextblock && !parent.type.spec.code && !parent.childCount;\n\n      if (isEmptyTextBlock) {\n        from -= 1;\n        to += 1;\n      }\n    }\n\n    tr.replaceWith(from, to, content); // set cursor at end of inserted content\n\n    if (options.updateSelection) {\n      selectionToInsertionEnd(tr, tr.steps.length - 1, -1);\n    }\n  }\n\n  return true;\n};\n\nvar insertContentAt$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  insertContentAt: insertContentAt\n});\n\nconst joinBackward = () => _ref17 => {\n  let {\n    state,\n    dispatch\n  } = _ref17;\n  return joinBackward$2(state, dispatch);\n};\n\nvar joinBackward$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  joinBackward: joinBackward\n});\n\nconst joinForward = () => _ref18 => {\n  let {\n    state,\n    dispatch\n  } = _ref18;\n  return joinForward$2(state, dispatch);\n};\n\nvar joinForward$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  joinForward: joinForward\n});\nconst mac = typeof navigator !== 'undefined' ? /Mac/.test(navigator.platform) : false;\n\nfunction normalizeKeyName(name) {\n  const parts = name.split(/-(?!$)/);\n  let result = parts[parts.length - 1];\n\n  if (result === 'Space') {\n    result = ' ';\n  }\n\n  let alt;\n  let ctrl;\n  let shift;\n  let meta;\n\n  for (let i = 0; i < parts.length - 1; i += 1) {\n    const mod = parts[i];\n\n    if (/^(cmd|meta|m)$/i.test(mod)) {\n      meta = true;\n    } else if (/^a(lt)?$/i.test(mod)) {\n      alt = true;\n    } else if (/^(c|ctrl|control)$/i.test(mod)) {\n      ctrl = true;\n    } else if (/^s(hift)?$/i.test(mod)) {\n      shift = true;\n    } else if (/^mod$/i.test(mod)) {\n      if (mac) {\n        meta = true;\n      } else {\n        ctrl = true;\n      }\n    } else {\n      throw new Error(`Unrecognized modifier name: ${mod}`);\n    }\n  }\n\n  if (alt) {\n    result = `Alt-${result}`;\n  }\n\n  if (ctrl) {\n    result = `Ctrl-${result}`;\n  }\n\n  if (meta) {\n    result = `Meta-${result}`;\n  }\n\n  if (shift) {\n    result = `Shift-${result}`;\n  }\n\n  return result;\n}\n\nconst keyboardShortcut = name => _ref19 => {\n  let {\n    editor,\n    view,\n    tr,\n    dispatch\n  } = _ref19;\n  const keys = normalizeKeyName(name).split(/-(?!$)/);\n  const key = keys.find(item => !['Alt', 'Ctrl', 'Meta', 'Shift'].includes(item));\n  const event = new KeyboardEvent('keydown', {\n    key: key === 'Space' ? ' ' : key,\n    altKey: keys.includes('Alt'),\n    ctrlKey: keys.includes('Ctrl'),\n    metaKey: keys.includes('Meta'),\n    shiftKey: keys.includes('Shift'),\n    bubbles: true,\n    cancelable: true\n  });\n  const capturedTransaction = editor.captureTransaction(() => {\n    view.someProp('handleKeyDown', f => f(view, event));\n  });\n  capturedTransaction === null || capturedTransaction === void 0 ? void 0 : capturedTransaction.steps.forEach(step => {\n    const newStep = step.map(tr.mapping);\n\n    if (newStep && dispatch) {\n      tr.maybeStep(newStep);\n    }\n  });\n  return true;\n};\n\nvar keyboardShortcut$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  keyboardShortcut: keyboardShortcut\n});\n\nfunction isNodeActive(state, typeOrName) {\n  let attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    from,\n    to,\n    empty\n  } = state.selection;\n  const type = typeOrName ? getNodeType(typeOrName, state.schema) : null;\n  const nodeRanges = [];\n  state.doc.nodesBetween(from, to, (node, pos) => {\n    if (node.isText) {\n      return;\n    }\n\n    const relativeFrom = Math.max(from, pos);\n    const relativeTo = Math.min(to, pos + node.nodeSize);\n    nodeRanges.push({\n      node,\n      from: relativeFrom,\n      to: relativeTo\n    });\n  });\n  const selectionRange = to - from;\n  const matchedNodeRanges = nodeRanges.filter(nodeRange => {\n    if (!type) {\n      return true;\n    }\n\n    return type.name === nodeRange.node.type.name;\n  }).filter(nodeRange => objectIncludes(nodeRange.node.attrs, attributes, {\n    strict: false\n  }));\n\n  if (empty) {\n    return !!matchedNodeRanges.length;\n  }\n\n  const range = matchedNodeRanges.reduce((sum, nodeRange) => sum + nodeRange.to - nodeRange.from, 0);\n  return range >= selectionRange;\n}\n\nconst lift = function (typeOrName) {\n  let attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return _ref20 => {\n    let {\n      state,\n      dispatch\n    } = _ref20;\n    const type = getNodeType(typeOrName, state.schema);\n    const isActive = isNodeActive(state, type, attributes);\n\n    if (!isActive) {\n      return false;\n    }\n\n    return lift$2(state, dispatch);\n  };\n};\n\nvar lift$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  lift: lift\n});\n\nconst liftEmptyBlock = () => _ref21 => {\n  let {\n    state,\n    dispatch\n  } = _ref21;\n  return liftEmptyBlock$2(state, dispatch);\n};\n\nvar liftEmptyBlock$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  liftEmptyBlock: liftEmptyBlock\n});\n\nconst liftListItem = typeOrName => _ref22 => {\n  let {\n    state,\n    dispatch\n  } = _ref22;\n  const type = getNodeType(typeOrName, state.schema);\n  return liftListItem$2(type)(state, dispatch);\n};\n\nvar liftListItem$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  liftListItem: liftListItem\n});\n\nconst newlineInCode = () => _ref23 => {\n  let {\n    state,\n    dispatch\n  } = _ref23;\n  return newlineInCode$2(state, dispatch);\n};\n\nvar newlineInCode$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  newlineInCode: newlineInCode\n});\n\nfunction getSchemaTypeNameByName(name, schema) {\n  if (schema.nodes[name]) {\n    return 'node';\n  }\n\n  if (schema.marks[name]) {\n    return 'mark';\n  }\n\n  return null;\n}\n/**\r\n * Remove a property or an array of properties from an object\r\n * @param obj Object\r\n * @param key Key to remove\r\n */\n\n\nfunction deleteProps(obj, propOrProps) {\n  const props = typeof propOrProps === 'string' ? [propOrProps] : propOrProps;\n  return Object.keys(obj).reduce((newObj, prop) => {\n    if (!props.includes(prop)) {\n      newObj[prop] = obj[prop];\n    }\n\n    return newObj;\n  }, {});\n}\n\nconst resetAttributes = (typeOrName, attributes) => _ref24 => {\n  let {\n    tr,\n    state,\n    dispatch\n  } = _ref24;\n  let nodeType = null;\n  let markType = null;\n  const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);\n\n  if (!schemaType) {\n    return false;\n  }\n\n  if (schemaType === 'node') {\n    nodeType = getNodeType(typeOrName, state.schema);\n  }\n\n  if (schemaType === 'mark') {\n    markType = getMarkType(typeOrName, state.schema);\n  }\n\n  if (dispatch) {\n    tr.selection.ranges.forEach(range => {\n      state.doc.nodesBetween(range.$from.pos, range.$to.pos, (node, pos) => {\n        if (nodeType && nodeType === node.type) {\n          tr.setNodeMarkup(pos, undefined, deleteProps(node.attrs, attributes));\n        }\n\n        if (markType && node.marks.length) {\n          node.marks.forEach(mark => {\n            if (markType === mark.type) {\n              tr.addMark(pos, pos + node.nodeSize, markType.create(deleteProps(mark.attrs, attributes)));\n            }\n          });\n        }\n      });\n    });\n  }\n\n  return true;\n};\n\nvar resetAttributes$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  resetAttributes: resetAttributes\n});\n\nconst scrollIntoView = () => _ref25 => {\n  let {\n    tr,\n    dispatch\n  } = _ref25;\n\n  if (dispatch) {\n    tr.scrollIntoView();\n  }\n\n  return true;\n};\n\nvar scrollIntoView$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  scrollIntoView: scrollIntoView\n});\n\nconst selectAll = () => _ref26 => {\n  let {\n    tr,\n    commands\n  } = _ref26;\n  return commands.setTextSelection({\n    from: 0,\n    to: tr.doc.content.size\n  });\n};\n\nvar selectAll$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  selectAll: selectAll\n});\n\nconst selectNodeBackward = () => _ref27 => {\n  let {\n    state,\n    dispatch\n  } = _ref27;\n  return selectNodeBackward$2(state, dispatch);\n};\n\nvar selectNodeBackward$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  selectNodeBackward: selectNodeBackward\n});\n\nconst selectNodeForward = () => _ref28 => {\n  let {\n    state,\n    dispatch\n  } = _ref28;\n  return selectNodeForward$2(state, dispatch);\n};\n\nvar selectNodeForward$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  selectNodeForward: selectNodeForward\n});\n\nconst selectParentNode = () => _ref29 => {\n  let {\n    state,\n    dispatch\n  } = _ref29;\n  return selectParentNode$2(state, dispatch);\n};\n\nvar selectParentNode$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  selectParentNode: selectParentNode\n});\n\nfunction createDocument(content, schema) {\n  let parseOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return createNodeFromContent(content, schema, {\n    slice: false,\n    parseOptions\n  });\n}\n\nconst setContent = function (content) {\n  let emitUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let parseOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return _ref30 => {\n    let {\n      tr,\n      editor,\n      dispatch\n    } = _ref30;\n    const {\n      doc\n    } = tr;\n    const document = createDocument(content, editor.schema, parseOptions);\n    const selection = TextSelection.create(doc, 0, doc.content.size);\n\n    if (dispatch) {\n      tr.setSelection(selection).replaceSelectionWith(document, false).setMeta('preventUpdate', !emitUpdate);\n    }\n\n    return true;\n  };\n};\n\nvar setContent$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  setContent: setContent\n});\n\nfunction getMarkAttributes(state, typeOrName) {\n  const type = getMarkType(typeOrName, state.schema);\n  const {\n    from,\n    to,\n    empty\n  } = state.selection;\n  const marks = [];\n\n  if (empty) {\n    if (state.storedMarks) {\n      marks.push(...state.storedMarks);\n    }\n\n    marks.push(...state.selection.$head.marks());\n  } else {\n    state.doc.nodesBetween(from, to, node => {\n      marks.push(...node.marks);\n    });\n  }\n\n  const mark = marks.find(markItem => markItem.type.name === type.name);\n\n  if (!mark) {\n    return {};\n  }\n\n  return { ...mark.attrs\n  };\n}\n\nconst setMark = function (typeOrName) {\n  let attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return _ref31 => {\n    let {\n      tr,\n      state,\n      dispatch\n    } = _ref31;\n    const {\n      selection\n    } = tr;\n    const {\n      empty,\n      ranges\n    } = selection;\n    const type = getMarkType(typeOrName, state.schema);\n\n    if (dispatch) {\n      if (empty) {\n        const oldAttributes = getMarkAttributes(state, type);\n        tr.addStoredMark(type.create({ ...oldAttributes,\n          ...attributes\n        }));\n      } else {\n        ranges.forEach(range => {\n          const from = range.$from.pos;\n          const to = range.$to.pos;\n          state.doc.nodesBetween(from, to, (node, pos) => {\n            const trimmedFrom = Math.max(pos, from);\n            const trimmedTo = Math.min(pos + node.nodeSize, to);\n            const someHasMark = node.marks.find(mark => mark.type === type); // if there is already a mark of this type\n            // we know that we have to merge its attributes\n            // otherwise we add a fresh new mark\n\n            if (someHasMark) {\n              node.marks.forEach(mark => {\n                if (type === mark.type) {\n                  tr.addMark(trimmedFrom, trimmedTo, type.create({ ...mark.attrs,\n                    ...attributes\n                  }));\n                }\n              });\n            } else {\n              tr.addMark(trimmedFrom, trimmedTo, type.create(attributes));\n            }\n          });\n        });\n      }\n    }\n\n    return true;\n  };\n};\n\nvar setMark$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  setMark: setMark\n});\n\nconst setMeta = (key, value) => _ref32 => {\n  let {\n    tr\n  } = _ref32;\n  tr.setMeta(key, value);\n  return true;\n};\n\nvar setMeta$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  setMeta: setMeta\n});\n\nconst setNode = function (typeOrName) {\n  let attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return _ref33 => {\n    let {\n      state,\n      dispatch,\n      chain\n    } = _ref33;\n    const type = getNodeType(typeOrName, state.schema); // TODO: use a fallback like insertContent?\n\n    if (!type.isTextblock) {\n      console.warn('[tiptap warn]: Currently \"setNode()\" only supports text block nodes.');\n      return false;\n    }\n\n    return chain() // try to convert node to default node if needed\n    .command(_ref34 => {\n      let {\n        commands\n      } = _ref34;\n      const canSetBlock = setBlockType(type, attributes)(state);\n\n      if (canSetBlock) {\n        return true;\n      }\n\n      return commands.clearNodes();\n    }).command(_ref35 => {\n      let {\n        state: updatedState\n      } = _ref35;\n      return setBlockType(type, attributes)(updatedState, dispatch);\n    }).run();\n  };\n};\n\nvar setNode$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  setNode: setNode\n});\n\nconst setNodeSelection = position => _ref36 => {\n  let {\n    tr,\n    dispatch\n  } = _ref36;\n\n  if (dispatch) {\n    const {\n      doc\n    } = tr;\n    const minPos = Selection.atStart(doc).from;\n    const maxPos = Selection.atEnd(doc).to;\n    const resolvedPos = minMax(position, minPos, maxPos);\n    const selection = NodeSelection.create(doc, resolvedPos);\n    tr.setSelection(selection);\n  }\n\n  return true;\n};\n\nvar setNodeSelection$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  setNodeSelection: setNodeSelection\n});\n\nconst setTextSelection = position => _ref37 => {\n  let {\n    tr,\n    dispatch\n  } = _ref37;\n\n  if (dispatch) {\n    const {\n      doc\n    } = tr;\n    const {\n      from,\n      to\n    } = typeof position === 'number' ? {\n      from: position,\n      to: position\n    } : position;\n    const minPos = Selection.atStart(doc).from;\n    const maxPos = Selection.atEnd(doc).to;\n    const resolvedFrom = minMax(from, minPos, maxPos);\n    const resolvedEnd = minMax(to, minPos, maxPos);\n    const selection = TextSelection.create(doc, resolvedFrom, resolvedEnd);\n    tr.setSelection(selection);\n  }\n\n  return true;\n};\n\nvar setTextSelection$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  setTextSelection: setTextSelection\n});\n\nconst sinkListItem = typeOrName => _ref38 => {\n  let {\n    state,\n    dispatch\n  } = _ref38;\n  const type = getNodeType(typeOrName, state.schema);\n  return sinkListItem$2(type)(state, dispatch);\n};\n\nvar sinkListItem$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  sinkListItem: sinkListItem\n});\n\nfunction getSplittedAttributes(extensionAttributes, typeName, attributes) {\n  return Object.fromEntries(Object.entries(attributes).filter(_ref39 => {\n    let [name] = _ref39;\n    const extensionAttribute = extensionAttributes.find(item => {\n      return item.type === typeName && item.name === name;\n    });\n\n    if (!extensionAttribute) {\n      return false;\n    }\n\n    return extensionAttribute.attribute.keepOnSplit;\n  }));\n}\n\nfunction defaultBlockAt$1(match) {\n  for (let i = 0; i < match.edgeCount; i += 1) {\n    const {\n      type\n    } = match.edge(i);\n\n    if (type.isTextblock && !type.hasRequiredAttrs()) {\n      return type;\n    }\n  }\n\n  return null;\n}\n\nfunction ensureMarks(state, splittableMarks) {\n  const marks = state.storedMarks || state.selection.$to.parentOffset && state.selection.$from.marks();\n\n  if (marks) {\n    const filteredMarks = marks.filter(mark => splittableMarks === null || splittableMarks === void 0 ? void 0 : splittableMarks.includes(mark.type.name));\n    state.tr.ensureMarks(filteredMarks);\n  }\n}\n\nconst splitBlock = function () {\n  let {\n    keepMarks = true\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return _ref40 => {\n    let {\n      tr,\n      state,\n      dispatch,\n      editor\n    } = _ref40;\n    const {\n      selection,\n      doc\n    } = tr;\n    const {\n      $from,\n      $to\n    } = selection;\n    const extensionAttributes = editor.extensionManager.attributes;\n    const newAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);\n\n    if (selection instanceof NodeSelection && selection.node.isBlock) {\n      if (!$from.parentOffset || !canSplit(doc, $from.pos)) {\n        return false;\n      }\n\n      if (dispatch) {\n        if (keepMarks) {\n          ensureMarks(state, editor.extensionManager.splittableMarks);\n        }\n\n        tr.split($from.pos).scrollIntoView();\n      }\n\n      return true;\n    }\n\n    if (!$from.parent.isBlock) {\n      return false;\n    }\n\n    if (dispatch) {\n      const atEnd = $to.parentOffset === $to.parent.content.size;\n\n      if (selection instanceof TextSelection) {\n        tr.deleteSelection();\n      }\n\n      const deflt = $from.depth === 0 ? undefined : defaultBlockAt$1($from.node(-1).contentMatchAt($from.indexAfter(-1)));\n      let types = atEnd && deflt ? [{\n        type: deflt,\n        attrs: newAttributes\n      }] : undefined;\n      let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types);\n\n      if (!types && !can && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{\n        type: deflt\n      }] : undefined)) {\n        can = true;\n        types = deflt ? [{\n          type: deflt,\n          attrs: newAttributes\n        }] : undefined;\n      }\n\n      if (can) {\n        tr.split(tr.mapping.map($from.pos), 1, types);\n\n        if (deflt && !atEnd && !$from.parentOffset && $from.parent.type !== deflt) {\n          const first = tr.mapping.map($from.before());\n          const $first = tr.doc.resolve(first);\n\n          if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt)) {\n            tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);\n          }\n        }\n      }\n\n      if (keepMarks) {\n        ensureMarks(state, editor.extensionManager.splittableMarks);\n      }\n\n      tr.scrollIntoView();\n    }\n\n    return true;\n  };\n};\n\nvar splitBlock$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  splitBlock: splitBlock\n});\n\nconst splitListItem = typeOrName => _ref41 => {\n  let {\n    tr,\n    state,\n    dispatch,\n    editor\n  } = _ref41;\n\n  var _a;\n\n  const type = getNodeType(typeOrName, state.schema);\n  const {\n    $from,\n    $to\n  } = state.selection; // @ts-ignore\n  // eslint-disable-next-line\n\n  const node = state.selection.node;\n\n  if (node && node.isBlock || $from.depth < 2 || !$from.sameParent($to)) {\n    return false;\n  }\n\n  const grandParent = $from.node(-1);\n\n  if (grandParent.type !== type) {\n    return false;\n  }\n\n  const extensionAttributes = editor.extensionManager.attributes;\n\n  if ($from.parent.content.size === 0 && $from.node(-1).childCount === $from.indexAfter(-1)) {\n    // In an empty block. If this is a nested list, the wrapping\n    // list item should be split. Otherwise, bail out and let next\n    // command handle lifting.\n    if ($from.depth === 2 || $from.node(-3).type !== type || $from.index(-2) !== $from.node(-2).childCount - 1) {\n      return false;\n    }\n\n    if (dispatch) {\n      let wrap = Fragment.empty; // eslint-disable-next-line\n\n      const depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3; // Build a fragment containing empty versions of the structure\n      // from the outer list item to the parent node of the cursor\n\n      for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d -= 1) {\n        wrap = Fragment.from($from.node(d).copy(wrap));\n      } // eslint-disable-next-line\n\n\n      const depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1 : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3; // Add a second list item with an empty default start node\n\n      const newNextTypeAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);\n      const nextType = ((_a = type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.createAndFill(newNextTypeAttributes)) || undefined;\n      wrap = wrap.append(Fragment.from(type.createAndFill(null, nextType) || undefined));\n      const start = $from.before($from.depth - (depthBefore - 1));\n      tr.replace(start, $from.after(-depthAfter), new Slice(wrap, 4 - depthBefore, 0));\n      let sel = -1;\n      tr.doc.nodesBetween(start, tr.doc.content.size, (n, pos) => {\n        if (sel > -1) {\n          return false;\n        }\n\n        if (n.isTextblock && n.content.size === 0) {\n          sel = pos + 1;\n        }\n      });\n\n      if (sel > -1) {\n        tr.setSelection(TextSelection.near(tr.doc.resolve(sel)));\n      }\n\n      tr.scrollIntoView();\n    }\n\n    return true;\n  }\n\n  const nextType = $to.pos === $from.end() ? grandParent.contentMatchAt(0).defaultType : null;\n  const newTypeAttributes = getSplittedAttributes(extensionAttributes, grandParent.type.name, grandParent.attrs);\n  const newNextTypeAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);\n  tr.delete($from.pos, $to.pos);\n  const types = nextType ? [{\n    type,\n    attrs: newTypeAttributes\n  }, {\n    type: nextType,\n    attrs: newNextTypeAttributes\n  }] : [{\n    type,\n    attrs: newTypeAttributes\n  }];\n\n  if (!canSplit(tr.doc, $from.pos, 2)) {\n    return false;\n  }\n\n  if (dispatch) {\n    tr.split($from.pos, 2, types).scrollIntoView();\n  }\n\n  return true;\n};\n\nvar splitListItem$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  splitListItem: splitListItem\n});\n\nfunction findParentNodeClosestToPos($pos, predicate) {\n  for (let i = $pos.depth; i > 0; i -= 1) {\n    const node = $pos.node(i);\n\n    if (predicate(node)) {\n      return {\n        pos: i > 0 ? $pos.before(i) : 0,\n        start: $pos.start(i),\n        depth: i,\n        node\n      };\n    }\n  }\n}\n\nfunction findParentNode(predicate) {\n  return selection => findParentNodeClosestToPos(selection.$from, predicate);\n}\n\nfunction splitExtensions(extensions) {\n  const baseExtensions = extensions.filter(extension => extension.type === 'extension');\n  const nodeExtensions = extensions.filter(extension => extension.type === 'node');\n  const markExtensions = extensions.filter(extension => extension.type === 'mark');\n  return {\n    baseExtensions,\n    nodeExtensions,\n    markExtensions\n  };\n}\n\nfunction isList(name, extensions) {\n  const {\n    nodeExtensions\n  } = splitExtensions(extensions);\n  const extension = nodeExtensions.find(item => item.name === name);\n\n  if (!extension) {\n    return false;\n  }\n\n  const context = {\n    name: extension.name,\n    options: extension.options,\n    storage: extension.storage\n  };\n  const group = callOrReturn(getExtensionField(extension, 'group', context));\n\n  if (typeof group !== 'string') {\n    return false;\n  }\n\n  return group.split(' ').includes('list');\n}\n\nconst joinListBackwards = (tr, listType) => {\n  const list = findParentNode(node => node.type === listType)(tr.selection);\n\n  if (!list) {\n    return true;\n  }\n\n  const before = tr.doc.resolve(Math.max(0, list.pos - 1)).before(list.depth);\n\n  if (before === undefined) {\n    return true;\n  }\n\n  const nodeBefore = tr.doc.nodeAt(before);\n  const canJoinBackwards = list.node.type === (nodeBefore === null || nodeBefore === void 0 ? void 0 : nodeBefore.type) && canJoin(tr.doc, list.pos);\n\n  if (!canJoinBackwards) {\n    return true;\n  }\n\n  tr.join(list.pos);\n  return true;\n};\n\nconst joinListForwards = (tr, listType) => {\n  const list = findParentNode(node => node.type === listType)(tr.selection);\n\n  if (!list) {\n    return true;\n  }\n\n  const after = tr.doc.resolve(list.start).after(list.depth);\n\n  if (after === undefined) {\n    return true;\n  }\n\n  const nodeAfter = tr.doc.nodeAt(after);\n  const canJoinForwards = list.node.type === (nodeAfter === null || nodeAfter === void 0 ? void 0 : nodeAfter.type) && canJoin(tr.doc, after);\n\n  if (!canJoinForwards) {\n    return true;\n  }\n\n  tr.join(after);\n  return true;\n};\n\nconst toggleList = (listTypeOrName, itemTypeOrName) => _ref42 => {\n  let {\n    editor,\n    tr,\n    state,\n    dispatch,\n    chain,\n    commands,\n    can\n  } = _ref42;\n  const {\n    extensions\n  } = editor.extensionManager;\n  const listType = getNodeType(listTypeOrName, state.schema);\n  const itemType = getNodeType(itemTypeOrName, state.schema);\n  const {\n    selection\n  } = state;\n  const {\n    $from,\n    $to\n  } = selection;\n  const range = $from.blockRange($to);\n\n  if (!range) {\n    return false;\n  }\n\n  const parentList = findParentNode(node => isList(node.type.name, extensions))(selection);\n\n  if (range.depth >= 1 && parentList && range.depth - parentList.depth <= 1) {\n    // remove list\n    if (parentList.node.type === listType) {\n      return commands.liftListItem(itemType);\n    } // change list type\n\n\n    if (isList(parentList.node.type.name, extensions) && listType.validContent(parentList.node.content) && dispatch) {\n      return chain().command(() => {\n        tr.setNodeMarkup(parentList.pos, listType);\n        return true;\n      }).command(() => joinListBackwards(tr, listType)).command(() => joinListForwards(tr, listType)).run();\n    }\n  }\n\n  return chain() // try to convert node to default node if needed\n  .command(() => {\n    const canWrapInList = can().wrapInList(listType);\n\n    if (canWrapInList) {\n      return true;\n    }\n\n    return commands.clearNodes();\n  }).wrapInList(listType).command(() => joinListBackwards(tr, listType)).command(() => joinListForwards(tr, listType)).run();\n};\n\nvar toggleList$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  toggleList: toggleList\n});\n\nfunction isMarkActive(state, typeOrName) {\n  let attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    empty,\n    ranges\n  } = state.selection;\n  const type = typeOrName ? getMarkType(typeOrName, state.schema) : null;\n\n  if (empty) {\n    return !!(state.storedMarks || state.selection.$from.marks()).filter(mark => {\n      if (!type) {\n        return true;\n      }\n\n      return type.name === mark.type.name;\n    }).find(mark => objectIncludes(mark.attrs, attributes, {\n      strict: false\n    }));\n  }\n\n  let selectionRange = 0;\n  const markRanges = [];\n  ranges.forEach(_ref43 => {\n    let {\n      $from,\n      $to\n    } = _ref43;\n    const from = $from.pos;\n    const to = $to.pos;\n    state.doc.nodesBetween(from, to, (node, pos) => {\n      if (!node.isText && !node.marks.length) {\n        return;\n      }\n\n      const relativeFrom = Math.max(from, pos);\n      const relativeTo = Math.min(to, pos + node.nodeSize);\n      const range = relativeTo - relativeFrom;\n      selectionRange += range;\n      markRanges.push(...node.marks.map(mark => ({\n        mark,\n        from: relativeFrom,\n        to: relativeTo\n      })));\n    });\n  });\n\n  if (selectionRange === 0) {\n    return false;\n  } // calculate range of matched mark\n\n\n  const matchedRange = markRanges.filter(markRange => {\n    if (!type) {\n      return true;\n    }\n\n    return type.name === markRange.mark.type.name;\n  }).filter(markRange => objectIncludes(markRange.mark.attrs, attributes, {\n    strict: false\n  })).reduce((sum, markRange) => sum + markRange.to - markRange.from, 0); // calculate range of marks that excludes the searched mark\n  // for example `code` doesn’t allow any other marks\n\n  const excludedRange = markRanges.filter(markRange => {\n    if (!type) {\n      return true;\n    }\n\n    return markRange.mark.type !== type && markRange.mark.type.excludes(type);\n  }).reduce((sum, markRange) => sum + markRange.to - markRange.from, 0); // we only include the result of `excludedRange`\n  // if there is a match at all\n\n  const range = matchedRange > 0 ? matchedRange + excludedRange : matchedRange;\n  return range >= selectionRange;\n}\n\nconst toggleMark = function (typeOrName) {\n  let attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return _ref44 => {\n    let {\n      state,\n      commands\n    } = _ref44;\n    const {\n      extendEmptyMarkRange = false\n    } = options;\n    const type = getMarkType(typeOrName, state.schema);\n    const isActive = isMarkActive(state, type, attributes);\n\n    if (isActive) {\n      return commands.unsetMark(type, {\n        extendEmptyMarkRange\n      });\n    }\n\n    return commands.setMark(type, attributes);\n  };\n};\n\nvar toggleMark$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  toggleMark: toggleMark\n});\n\nconst toggleNode = function (typeOrName, toggleTypeOrName) {\n  let attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return _ref45 => {\n    let {\n      state,\n      commands\n    } = _ref45;\n    const type = getNodeType(typeOrName, state.schema);\n    const toggleType = getNodeType(toggleTypeOrName, state.schema);\n    const isActive = isNodeActive(state, type, attributes);\n\n    if (isActive) {\n      return commands.setNode(toggleType);\n    }\n\n    return commands.setNode(type, attributes);\n  };\n};\n\nvar toggleNode$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  toggleNode: toggleNode\n});\n\nconst toggleWrap = function (typeOrName) {\n  let attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return _ref46 => {\n    let {\n      state,\n      commands\n    } = _ref46;\n    const type = getNodeType(typeOrName, state.schema);\n    const isActive = isNodeActive(state, type, attributes);\n\n    if (isActive) {\n      return commands.lift(type);\n    }\n\n    return commands.wrapIn(type, attributes);\n  };\n};\n\nvar toggleWrap$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  toggleWrap: toggleWrap\n});\n\nconst undoInputRule = () => _ref47 => {\n  let {\n    state,\n    dispatch\n  } = _ref47;\n  const plugins = state.plugins;\n\n  for (let i = 0; i < plugins.length; i += 1) {\n    const plugin = plugins[i];\n    let undoable; // @ts-ignore\n    // eslint-disable-next-line\n\n    if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {\n      if (dispatch) {\n        const tr = state.tr;\n        const toUndo = undoable.transform;\n\n        for (let j = toUndo.steps.length - 1; j >= 0; j -= 1) {\n          tr.step(toUndo.steps[j].invert(toUndo.docs[j]));\n        }\n\n        if (undoable.text) {\n          const marks = tr.doc.resolve(undoable.from).marks();\n          tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks));\n        } else {\n          tr.delete(undoable.from, undoable.to);\n        }\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n};\n\nvar undoInputRule$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  undoInputRule: undoInputRule\n});\n\nconst unsetAllMarks = () => _ref48 => {\n  let {\n    tr,\n    dispatch\n  } = _ref48;\n  const {\n    selection\n  } = tr;\n  const {\n    empty,\n    ranges\n  } = selection;\n\n  if (empty) {\n    return true;\n  }\n\n  if (dispatch) {\n    ranges.forEach(range => {\n      tr.removeMark(range.$from.pos, range.$to.pos);\n    });\n  }\n\n  return true;\n};\n\nvar unsetAllMarks$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  unsetAllMarks: unsetAllMarks\n});\n\nconst unsetMark = function (typeOrName) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return _ref49 => {\n    let {\n      tr,\n      state,\n      dispatch\n    } = _ref49;\n\n    var _a;\n\n    const {\n      extendEmptyMarkRange = false\n    } = options;\n    const {\n      selection\n    } = tr;\n    const type = getMarkType(typeOrName, state.schema);\n    const {\n      $from,\n      empty,\n      ranges\n    } = selection;\n\n    if (!dispatch) {\n      return true;\n    }\n\n    if (empty && extendEmptyMarkRange) {\n      let {\n        from,\n        to\n      } = selection;\n      const attrs = (_a = $from.marks().find(mark => mark.type === type)) === null || _a === void 0 ? void 0 : _a.attrs;\n      const range = getMarkRange($from, type, attrs);\n\n      if (range) {\n        from = range.from;\n        to = range.to;\n      }\n\n      tr.removeMark(from, to, type);\n    } else {\n      ranges.forEach(range => {\n        tr.removeMark(range.$from.pos, range.$to.pos, type);\n      });\n    }\n\n    tr.removeStoredMark(type);\n    return true;\n  };\n};\n\nvar unsetMark$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  unsetMark: unsetMark\n});\n\nconst updateAttributes = function (typeOrName) {\n  let attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return _ref50 => {\n    let {\n      tr,\n      state,\n      dispatch\n    } = _ref50;\n    let nodeType = null;\n    let markType = null;\n    const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);\n\n    if (!schemaType) {\n      return false;\n    }\n\n    if (schemaType === 'node') {\n      nodeType = getNodeType(typeOrName, state.schema);\n    }\n\n    if (schemaType === 'mark') {\n      markType = getMarkType(typeOrName, state.schema);\n    }\n\n    if (dispatch) {\n      tr.selection.ranges.forEach(range => {\n        const from = range.$from.pos;\n        const to = range.$to.pos;\n        state.doc.nodesBetween(from, to, (node, pos) => {\n          if (nodeType && nodeType === node.type) {\n            tr.setNodeMarkup(pos, undefined, { ...node.attrs,\n              ...attributes\n            });\n          }\n\n          if (markType && node.marks.length) {\n            node.marks.forEach(mark => {\n              if (markType === mark.type) {\n                const trimmedFrom = Math.max(pos, from);\n                const trimmedTo = Math.min(pos + node.nodeSize, to);\n                tr.addMark(trimmedFrom, trimmedTo, markType.create({ ...mark.attrs,\n                  ...attributes\n                }));\n              }\n            });\n          }\n        });\n      });\n    }\n\n    return true;\n  };\n};\n\nvar updateAttributes$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  updateAttributes: updateAttributes\n});\n\nconst wrapIn = function (typeOrName) {\n  let attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return _ref51 => {\n    let {\n      state,\n      dispatch\n    } = _ref51;\n    const type = getNodeType(typeOrName, state.schema);\n    return wrapIn$2(type, attributes)(state, dispatch);\n  };\n};\n\nvar wrapIn$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  wrapIn: wrapIn\n});\n\nconst wrapInList = function (typeOrName) {\n  let attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return _ref52 => {\n    let {\n      state,\n      dispatch\n    } = _ref52;\n    const type = getNodeType(typeOrName, state.schema);\n    return wrapInList$2(type, attributes)(state, dispatch);\n  };\n};\n\nvar wrapInList$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  wrapInList: wrapInList\n});\nconst Commands = Extension.create({\n  name: 'commands',\n\n  addCommands() {\n    return { ...blur$1,\n      ...clearContent$1,\n      ...clearNodes$1,\n      ...command$1,\n      ...createParagraphNear$1,\n      ...deleteNode$1,\n      ...deleteRange$1,\n      ...deleteSelection$1,\n      ...enter$1,\n      ...exitCode$1,\n      ...extendMarkRange$1,\n      ...first$1,\n      ...focus$1,\n      ...forEach$1,\n      ...insertContent$1,\n      ...insertContentAt$1,\n      ...joinBackward$1,\n      ...joinForward$1,\n      ...keyboardShortcut$1,\n      ...lift$1,\n      ...liftEmptyBlock$1,\n      ...liftListItem$1,\n      ...newlineInCode$1,\n      ...resetAttributes$1,\n      ...scrollIntoView$1,\n      ...selectAll$1,\n      ...selectNodeBackward$1,\n      ...selectNodeForward$1,\n      ...selectParentNode$1,\n      ...setContent$1,\n      ...setMark$1,\n      ...setMeta$1,\n      ...setNode$1,\n      ...setNodeSelection$1,\n      ...setTextSelection$1,\n      ...sinkListItem$1,\n      ...splitBlock$1,\n      ...splitListItem$1,\n      ...toggleList$1,\n      ...toggleMark$1,\n      ...toggleNode$1,\n      ...toggleWrap$1,\n      ...undoInputRule$1,\n      ...unsetAllMarks$1,\n      ...unsetMark$1,\n      ...updateAttributes$1,\n      ...wrapIn$1,\n      ...wrapInList$1\n    };\n  }\n\n});\nconst Editable = Extension.create({\n  name: 'editable',\n\n  addProseMirrorPlugins() {\n    return [new Plugin({\n      key: new PluginKey('editable'),\n      props: {\n        editable: () => this.editor.options.editable\n      }\n    })];\n  }\n\n});\nconst FocusEvents = Extension.create({\n  name: 'focusEvents',\n\n  addProseMirrorPlugins() {\n    const {\n      editor\n    } = this;\n    return [new Plugin({\n      key: new PluginKey('focusEvents'),\n      props: {\n        handleDOMEvents: {\n          focus: (view, event) => {\n            editor.isFocused = true;\n            const transaction = editor.state.tr.setMeta('focus', {\n              event\n            }).setMeta('addToHistory', false);\n            view.dispatch(transaction);\n            return false;\n          },\n          blur: (view, event) => {\n            editor.isFocused = false;\n            const transaction = editor.state.tr.setMeta('blur', {\n              event\n            }).setMeta('addToHistory', false);\n            view.dispatch(transaction);\n            return false;\n          }\n        }\n      }\n    })];\n  }\n\n});\n\nfunction createChainableState(config) {\n  const {\n    state,\n    transaction\n  } = config;\n  let {\n    selection\n  } = transaction;\n  let {\n    doc\n  } = transaction;\n  let {\n    storedMarks\n  } = transaction;\n  return { ...state,\n    schema: state.schema,\n    plugins: state.plugins,\n    apply: state.apply.bind(state),\n    applyTransaction: state.applyTransaction.bind(state),\n    reconfigure: state.reconfigure.bind(state),\n    toJSON: state.toJSON.bind(state),\n\n    get storedMarks() {\n      return storedMarks;\n    },\n\n    get selection() {\n      return selection;\n    },\n\n    get doc() {\n      return doc;\n    },\n\n    get tr() {\n      selection = transaction.selection;\n      doc = transaction.doc;\n      storedMarks = transaction.storedMarks;\n      return transaction;\n    }\n\n  };\n}\n\nclass CommandManager {\n  constructor(props) {\n    this.editor = props.editor;\n    this.rawCommands = this.editor.extensionManager.commands;\n    this.customState = props.state;\n  }\n\n  get hasCustomState() {\n    return !!this.customState;\n  }\n\n  get state() {\n    return this.customState || this.editor.state;\n  }\n\n  get commands() {\n    var _this = this;\n\n    const {\n      rawCommands,\n      editor,\n      state\n    } = this;\n    const {\n      view\n    } = editor;\n    const {\n      tr\n    } = state;\n    const props = this.buildProps(tr);\n    return Object.fromEntries(Object.entries(rawCommands).map(_ref53 => {\n      let [name, command] = _ref53;\n\n      const method = function () {\n        const callback = command(...arguments)(props);\n\n        if (!tr.getMeta('preventDispatch') && !_this.hasCustomState) {\n          view.dispatch(tr);\n        }\n\n        return callback;\n      };\n\n      return [name, method];\n    }));\n  }\n\n  get chain() {\n    return () => this.createChain();\n  }\n\n  get can() {\n    return () => this.createCan();\n  }\n\n  createChain(startTr) {\n    var _this2 = this;\n\n    let shouldDispatch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const {\n      rawCommands,\n      editor,\n      state\n    } = this;\n    const {\n      view\n    } = editor;\n    const callbacks = [];\n    const hasStartTransaction = !!startTr;\n    const tr = startTr || state.tr;\n\n    const run = () => {\n      if (!hasStartTransaction && shouldDispatch && !tr.getMeta('preventDispatch') && !this.hasCustomState) {\n        view.dispatch(tr);\n      }\n\n      return callbacks.every(callback => callback === true);\n    };\n\n    const chain = { ...Object.fromEntries(Object.entries(rawCommands).map(_ref54 => {\n        let [name, command] = _ref54;\n\n        const chainedCommand = function () {\n          const props = _this2.buildProps(tr, shouldDispatch);\n\n          const callback = command(...arguments)(props);\n          callbacks.push(callback);\n          return chain;\n        };\n\n        return [name, chainedCommand];\n      })),\n      run\n    };\n    return chain;\n  }\n\n  createCan(startTr) {\n    const {\n      rawCommands,\n      state\n    } = this;\n    const dispatch = undefined;\n    const tr = startTr || state.tr;\n    const props = this.buildProps(tr, dispatch);\n    const formattedCommands = Object.fromEntries(Object.entries(rawCommands).map(_ref55 => {\n      let [name, command] = _ref55;\n      return [name, function () {\n        return command(...arguments)({ ...props,\n          dispatch\n        });\n      }];\n    }));\n    return { ...formattedCommands,\n      chain: () => this.createChain(tr, dispatch)\n    };\n  }\n\n  buildProps(tr) {\n    let shouldDispatch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const {\n      rawCommands,\n      editor,\n      state\n    } = this;\n    const {\n      view\n    } = editor;\n\n    if (state.storedMarks) {\n      tr.setStoredMarks(state.storedMarks);\n    }\n\n    const props = {\n      tr,\n      editor,\n      view,\n      state: createChainableState({\n        state,\n        transaction: tr\n      }),\n      dispatch: shouldDispatch ? () => undefined : undefined,\n      chain: () => this.createChain(tr),\n      can: () => this.createCan(tr),\n\n      get commands() {\n        return Object.fromEntries(Object.entries(rawCommands).map(_ref56 => {\n          let [name, command] = _ref56;\n          return [name, function () {\n            return command(...arguments)(props);\n          }];\n        }));\n      }\n\n    };\n    return props;\n  }\n\n}\n\nconst Keymap = Extension.create({\n  name: 'keymap',\n\n  addKeyboardShortcuts() {\n    const handleBackspace = () => this.editor.commands.first(_ref57 => {\n      let {\n        commands\n      } = _ref57;\n      return [() => commands.undoInputRule(), // maybe convert first text block node to default node\n      () => commands.command(_ref58 => {\n        let {\n          tr\n        } = _ref58;\n        const {\n          selection,\n          doc\n        } = tr;\n        const {\n          empty,\n          $anchor\n        } = selection;\n        const {\n          pos,\n          parent\n        } = $anchor;\n        const isAtStart = Selection.atStart(doc).from === pos;\n\n        if (!empty || !isAtStart || !parent.type.isTextblock || parent.textContent.length) {\n          return false;\n        }\n\n        return commands.clearNodes();\n      }), () => commands.deleteSelection(), () => commands.joinBackward(), () => commands.selectNodeBackward()];\n    });\n\n    const handleDelete = () => this.editor.commands.first(_ref59 => {\n      let {\n        commands\n      } = _ref59;\n      return [() => commands.deleteSelection(), () => commands.joinForward(), () => commands.selectNodeForward()];\n    });\n\n    return {\n      Enter: () => this.editor.commands.first(_ref60 => {\n        let {\n          commands\n        } = _ref60;\n        return [() => commands.newlineInCode(), () => commands.createParagraphNear(), () => commands.liftEmptyBlock(), () => commands.splitBlock()];\n      }),\n      'Mod-Enter': () => this.editor.commands.exitCode(),\n      Backspace: handleBackspace,\n      'Mod-Backspace': handleBackspace,\n      'Shift-Backspace': handleBackspace,\n      Delete: handleDelete,\n      'Mod-Delete': handleDelete,\n      'Mod-a': () => this.editor.commands.selectAll()\n    };\n  },\n\n  addProseMirrorPlugins() {\n    return [// With this plugin we check if the whole document was selected and deleted.\n    // In this case we will additionally call `clearNodes()` to convert e.g. a heading\n    // to a paragraph if necessary.\n    // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well\n    // with many other commands.\n    new Plugin({\n      key: new PluginKey('clearDocument'),\n      appendTransaction: (transactions, oldState, newState) => {\n        const docChanges = transactions.some(transaction => transaction.docChanged) && !oldState.doc.eq(newState.doc);\n\n        if (!docChanges) {\n          return;\n        }\n\n        const {\n          empty,\n          from,\n          to\n        } = oldState.selection;\n        const allFrom = Selection.atStart(oldState.doc).from;\n        const allEnd = Selection.atEnd(oldState.doc).to;\n        const allWasSelected = from === allFrom && to === allEnd;\n        const isEmpty = newState.doc.textBetween(0, newState.doc.content.size, ' ', ' ').length === 0;\n\n        if (empty || !allWasSelected || !isEmpty) {\n          return;\n        }\n\n        const tr = newState.tr;\n        const state = createChainableState({\n          state: newState,\n          transaction: tr\n        });\n        const {\n          commands\n        } = new CommandManager({\n          editor: this.editor,\n          state\n        });\n        commands.clearNodes();\n\n        if (!tr.steps.length) {\n          return;\n        }\n\n        return tr;\n      }\n    })];\n  }\n\n});\nconst Tabindex = Extension.create({\n  name: 'tabindex',\n\n  addProseMirrorPlugins() {\n    return [new Plugin({\n      key: new PluginKey('tabindex'),\n      props: {\n        attributes: {\n          tabindex: '0'\n        }\n      }\n    })];\n  }\n\n});\nvar extensions = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ClipboardTextSerializer: ClipboardTextSerializer,\n  Commands: Commands,\n  Editable: Editable,\n  FocusEvents: FocusEvents,\n  Keymap: Keymap,\n  Tabindex: Tabindex\n});\n\nfunction getNodeAttributes(state, typeOrName) {\n  const type = getNodeType(typeOrName, state.schema);\n  const {\n    from,\n    to\n  } = state.selection;\n  const nodes = [];\n  state.doc.nodesBetween(from, to, node => {\n    nodes.push(node);\n  });\n  const node = nodes.reverse().find(nodeItem => nodeItem.type.name === type.name);\n\n  if (!node) {\n    return {};\n  }\n\n  return { ...node.attrs\n  };\n}\n\nfunction getAttributes(state, typeOrName) {\n  const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);\n\n  if (schemaType === 'node') {\n    return getNodeAttributes(state, typeOrName);\n  }\n\n  if (schemaType === 'mark') {\n    return getMarkAttributes(state, typeOrName);\n  }\n\n  return {};\n}\n\nfunction isActive(state, name) {\n  let attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (!name) {\n    return isNodeActive(state, null, attributes) || isMarkActive(state, null, attributes);\n  }\n\n  const schemaType = getSchemaTypeNameByName(name, state.schema);\n\n  if (schemaType === 'node') {\n    return isNodeActive(state, name, attributes);\n  }\n\n  if (schemaType === 'mark') {\n    return isMarkActive(state, name, attributes);\n  }\n\n  return false;\n}\n\nfunction getHTMLFromFragment(fragment, schema) {\n  const documentFragment = DOMSerializer.fromSchema(schema).serializeFragment(fragment);\n  const temporaryDocument = document.implementation.createHTMLDocument();\n  const container = temporaryDocument.createElement('div');\n  container.appendChild(documentFragment);\n  return container.innerHTML;\n}\n\nfunction getText(node, options) {\n  const range = {\n    from: 0,\n    to: node.content.size\n  };\n  return getTextBetween(node, range, options);\n}\n\nfunction isNodeEmpty(node) {\n  var _a;\n\n  const defaultContent = (_a = node.type.createAndFill()) === null || _a === void 0 ? void 0 : _a.toJSON();\n  const content = node.toJSON();\n  return JSON.stringify(defaultContent) === JSON.stringify(content);\n}\n\nfunction createStyleTag(style) {\n  const tipTapStyleTag = document.querySelector('style[data-tiptap-style]');\n\n  if (tipTapStyleTag !== null) {\n    return tipTapStyleTag;\n  }\n\n  const styleNode = document.createElement('style');\n  styleNode.setAttribute('data-tiptap-style', '');\n  styleNode.innerHTML = style;\n  document.getElementsByTagName('head')[0].appendChild(styleNode);\n  return styleNode;\n}\n\nclass InputRule {\n  constructor(config) {\n    this.find = config.find;\n    this.handler = config.handler;\n  }\n\n}\n\nconst inputRuleMatcherHandler = (text, find) => {\n  if (isRegExp(find)) {\n    return find.exec(text);\n  }\n\n  const inputRuleMatch = find(text);\n\n  if (!inputRuleMatch) {\n    return null;\n  }\n\n  const result = [];\n  result.push(inputRuleMatch.text);\n  result.index = inputRuleMatch.index;\n  result.input = text;\n  result.data = inputRuleMatch.data;\n\n  if (inputRuleMatch.replaceWith) {\n    if (!inputRuleMatch.text.includes(inputRuleMatch.replaceWith)) {\n      console.warn('[tiptap warn]: \"inputRuleMatch.replaceWith\" must be part of \"inputRuleMatch.text\".');\n    }\n\n    result.push(inputRuleMatch.replaceWith);\n  }\n\n  return result;\n};\n\nfunction run$1(config) {\n  var _a;\n\n  const {\n    editor,\n    from,\n    to,\n    text,\n    rules,\n    plugin\n  } = config;\n  const {\n    view\n  } = editor;\n\n  if (view.composing) {\n    return false;\n  }\n\n  const $from = view.state.doc.resolve(from);\n\n  if ( // check for code node\n  $from.parent.type.spec.code // check for code mark\n  || !!((_a = $from.nodeBefore || $from.nodeAfter) === null || _a === void 0 ? void 0 : _a.marks.find(mark => mark.type.spec.code))) {\n    return false;\n  }\n\n  let matched = false;\n  const maxMatch = 500;\n  const textBefore = $from.parent.textBetween(Math.max(0, $from.parentOffset - maxMatch), $from.parentOffset, undefined, ' ') + text;\n  rules.forEach(rule => {\n    if (matched) {\n      return;\n    }\n\n    const match = inputRuleMatcherHandler(textBefore, rule.find);\n\n    if (!match) {\n      return;\n    }\n\n    const tr = view.state.tr;\n    const state = createChainableState({\n      state: view.state,\n      transaction: tr\n    });\n    const range = {\n      from: from - (match[0].length - text.length),\n      to\n    };\n    const {\n      commands,\n      chain,\n      can\n    } = new CommandManager({\n      editor,\n      state\n    });\n    rule.handler({\n      state,\n      range,\n      match,\n      commands,\n      chain,\n      can\n    }); // stop if there are no changes\n\n    if (!tr.steps.length) {\n      return;\n    } // store transform as meta data\n    // so we can undo input rules within the `undoInputRules` command\n\n\n    tr.setMeta(plugin, {\n      transform: tr,\n      from,\n      to,\n      text\n    });\n    view.dispatch(tr);\n    matched = true;\n  });\n  return matched;\n}\n/**\r\n * Create an input rules plugin. When enabled, it will cause text\r\n * input that matches any of the given rules to trigger the rule’s\r\n * action.\r\n */\n\n\nfunction inputRulesPlugin(props) {\n  const {\n    editor,\n    rules\n  } = props;\n  const plugin = new Plugin({\n    state: {\n      init() {\n        return null;\n      },\n\n      apply(tr, prev) {\n        const stored = tr.getMeta(this);\n\n        if (stored) {\n          return stored;\n        }\n\n        return tr.selectionSet || tr.docChanged ? null : prev;\n      }\n\n    },\n    props: {\n      handleTextInput(view, from, to, text) {\n        return run$1({\n          editor,\n          from,\n          to,\n          text,\n          rules,\n          plugin\n        });\n      },\n\n      handleDOMEvents: {\n        compositionend: view => {\n          setTimeout(() => {\n            const {\n              $cursor\n            } = view.state.selection;\n\n            if ($cursor) {\n              run$1({\n                editor,\n                from: $cursor.pos,\n                to: $cursor.pos,\n                text: '',\n                rules,\n                plugin\n              });\n            }\n          });\n          return false;\n        }\n      },\n\n      // add support for input rules to trigger on enter\n      // this is useful for example for code blocks\n      handleKeyDown(view, event) {\n        if (event.key !== 'Enter') {\n          return false;\n        }\n\n        const {\n          $cursor\n        } = view.state.selection;\n\n        if ($cursor) {\n          return run$1({\n            editor,\n            from: $cursor.pos,\n            to: $cursor.pos,\n            text: '\\n',\n            rules,\n            plugin\n          });\n        }\n\n        return false;\n      }\n\n    },\n    // @ts-ignore\n    isInputRules: true\n  });\n  return plugin;\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\nclass PasteRule {\n  constructor(config) {\n    this.find = config.find;\n    this.handler = config.handler;\n  }\n\n}\n\nconst pasteRuleMatcherHandler = (text, find) => {\n  if (isRegExp(find)) {\n    return [...text.matchAll(find)];\n  }\n\n  const matches = find(text);\n\n  if (!matches) {\n    return [];\n  }\n\n  return matches.map(pasteRuleMatch => {\n    const result = [];\n    result.push(pasteRuleMatch.text);\n    result.index = pasteRuleMatch.index;\n    result.input = text;\n    result.data = pasteRuleMatch.data;\n\n    if (pasteRuleMatch.replaceWith) {\n      if (!pasteRuleMatch.text.includes(pasteRuleMatch.replaceWith)) {\n        console.warn('[tiptap warn]: \"pasteRuleMatch.replaceWith\" must be part of \"pasteRuleMatch.text\".');\n      }\n\n      result.push(pasteRuleMatch.replaceWith);\n    }\n\n    return result;\n  });\n};\n\nfunction run(config) {\n  const {\n    editor,\n    state,\n    from,\n    to,\n    rules\n  } = config;\n  const {\n    commands,\n    chain,\n    can\n  } = new CommandManager({\n    editor,\n    state\n  });\n  state.doc.nodesBetween(from, to, (node, pos) => {\n    if (!node.isTextblock || node.type.spec.code) {\n      return;\n    }\n\n    const resolvedFrom = Math.max(from, pos);\n    const resolvedTo = Math.min(to, pos + node.content.size);\n    const textToMatch = node.textBetween(resolvedFrom - pos, resolvedTo - pos, undefined, '\\ufffc');\n    rules.forEach(rule => {\n      const matches = pasteRuleMatcherHandler(textToMatch, rule.find);\n      matches.forEach(match => {\n        if (match.index === undefined) {\n          return;\n        }\n\n        const start = resolvedFrom + match.index + 1;\n        const end = start + match[0].length;\n        const range = {\n          from: state.tr.mapping.map(start),\n          to: state.tr.mapping.map(end)\n        };\n        rule.handler({\n          state,\n          range,\n          match,\n          commands,\n          chain,\n          can\n        });\n      });\n    });\n  });\n}\n/**\r\n * Create an paste rules plugin. When enabled, it will cause pasted\r\n * text that matches any of the given rules to trigger the rule’s\r\n * action.\r\n */\n\n\nfunction pasteRulesPlugin(props) {\n  const {\n    editor,\n    rules\n  } = props;\n  let isProseMirrorHTML = false;\n  const plugin = new Plugin({\n    props: {\n      handlePaste: (view, event) => {\n        var _a;\n\n        const html = (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.getData('text/html');\n        isProseMirrorHTML = !!(html === null || html === void 0 ? void 0 : html.includes('data-pm-slice'));\n        return false;\n      }\n    },\n    appendTransaction: (transactions, oldState, state) => {\n      const transaction = transactions[0]; // stop if there is not a paste event\n\n      if (!transaction.getMeta('paste') || isProseMirrorHTML) {\n        return;\n      } // stop if there is no changed range\n\n\n      const {\n        doc,\n        before\n      } = transaction;\n      const from = before.content.findDiffStart(doc.content);\n      const to = before.content.findDiffEnd(doc.content);\n\n      if (!isNumber(from) || !to || from === to.b) {\n        return;\n      } // build a chainable state\n      // so we can use a single transaction for all paste rules\n\n\n      const tr = state.tr;\n      const chainableState = createChainableState({\n        state,\n        transaction: tr\n      });\n      run({\n        editor,\n        state: chainableState,\n        from: Math.max(from - 1, 0),\n        to: to.b,\n        rules,\n        plugin\n      }); // stop if there are no changes\n\n      if (!tr.steps.length) {\n        return;\n      }\n\n      return tr;\n    },\n    // @ts-ignore\n    isPasteRules: true\n  });\n  return plugin;\n}\n/**\r\n * Get a list of all extension attributes defined in `addAttribute` and `addGlobalAttribute`.\r\n * @param extensions List of extensions\r\n */\n\n\nfunction getAttributesFromExtensions(extensions) {\n  const extensionAttributes = [];\n  const {\n    nodeExtensions,\n    markExtensions\n  } = splitExtensions(extensions);\n  const nodeAndMarkExtensions = [...nodeExtensions, ...markExtensions];\n  const defaultAttribute = {\n    default: null,\n    rendered: true,\n    renderHTML: null,\n    parseHTML: null,\n    keepOnSplit: true\n  };\n  extensions.forEach(extension => {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage\n    };\n    const addGlobalAttributes = getExtensionField(extension, 'addGlobalAttributes', context);\n\n    if (!addGlobalAttributes) {\n      return;\n    } // TODO: remove `as GlobalAttributes`\n\n\n    const globalAttributes = addGlobalAttributes();\n    globalAttributes.forEach(globalAttribute => {\n      globalAttribute.types.forEach(type => {\n        Object.entries(globalAttribute.attributes).forEach(_ref61 => {\n          let [name, attribute] = _ref61;\n          extensionAttributes.push({\n            type,\n            name,\n            attribute: { ...defaultAttribute,\n              ...attribute\n            }\n          });\n        });\n      });\n    });\n  });\n  nodeAndMarkExtensions.forEach(extension => {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage\n    };\n    const addAttributes = getExtensionField(extension, 'addAttributes', context);\n\n    if (!addAttributes) {\n      return;\n    } // TODO: remove `as Attributes`\n\n\n    const attributes = addAttributes();\n    Object.entries(attributes).forEach(_ref62 => {\n      let [name, attribute] = _ref62;\n      extensionAttributes.push({\n        type: extension.name,\n        name,\n        attribute: { ...defaultAttribute,\n          ...attribute\n        }\n      });\n    });\n  });\n  return extensionAttributes;\n}\n\nfunction mergeAttributes() {\n  for (var _len2 = arguments.length, objects = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    objects[_key2] = arguments[_key2];\n  }\n\n  return objects.filter(item => !!item).reduce((items, item) => {\n    const mergedAttributes = { ...items\n    };\n    Object.entries(item).forEach(_ref63 => {\n      let [key, value] = _ref63;\n      const exists = mergedAttributes[key];\n\n      if (!exists) {\n        mergedAttributes[key] = value;\n        return;\n      }\n\n      if (key === 'class') {\n        mergedAttributes[key] = [mergedAttributes[key], value].join(' ');\n      } else if (key === 'style') {\n        mergedAttributes[key] = [mergedAttributes[key], value].join('; ');\n      } else {\n        mergedAttributes[key] = value;\n      }\n    });\n    return mergedAttributes;\n  }, {});\n}\n\nfunction getRenderedAttributes(nodeOrMark, extensionAttributes) {\n  return extensionAttributes.filter(item => item.attribute.rendered).map(item => {\n    if (!item.attribute.renderHTML) {\n      return {\n        [item.name]: nodeOrMark.attrs[item.name]\n      };\n    }\n\n    return item.attribute.renderHTML(nodeOrMark.attrs) || {};\n  }).reduce((attributes, attribute) => mergeAttributes(attributes, attribute), {});\n}\n\nfunction isEmptyObject() {\n  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return Object.keys(value).length === 0 && value.constructor === Object;\n}\n\nfunction fromString(value) {\n  if (typeof value !== 'string') {\n    return value;\n  }\n\n  if (value.match(/^[+-]?(?:\\d*\\.)?\\d+$/)) {\n    return Number(value);\n  }\n\n  if (value === 'true') {\n    return true;\n  }\n\n  if (value === 'false') {\n    return false;\n  }\n\n  return value;\n}\n/**\r\n * This function merges extension attributes into parserule attributes (`attrs` or `getAttrs`).\r\n * Cancels when `getAttrs` returned `false`.\r\n * @param parseRule ProseMirror ParseRule\r\n * @param extensionAttributes List of attributes to inject\r\n */\n\n\nfunction injectExtensionAttributesToParseRule(parseRule, extensionAttributes) {\n  if (parseRule.style) {\n    return parseRule;\n  }\n\n  return { ...parseRule,\n    getAttrs: node => {\n      const oldAttributes = parseRule.getAttrs ? parseRule.getAttrs(node) : parseRule.attrs;\n\n      if (oldAttributes === false) {\n        return false;\n      }\n\n      const newAttributes = extensionAttributes.filter(item => item.attribute.rendered).reduce((items, item) => {\n        const value = item.attribute.parseHTML ? item.attribute.parseHTML(node) : fromString(node.getAttribute(item.name));\n\n        if (isObject(value)) {\n          console.warn(`[tiptap warn]: BREAKING CHANGE: \"parseHTML\" for your attribute \"${item.name}\" returns an object but should return the value itself. If this is expected you can ignore this message. This warning will be removed in one of the next releases. Further information: https://github.com/ueberdosis/tiptap/issues/1863`);\n        }\n\n        if (value === null || value === undefined) {\n          return items;\n        }\n\n        return { ...items,\n          [item.name]: value\n        };\n      }, {});\n      return { ...oldAttributes,\n        ...newAttributes\n      };\n    }\n  };\n}\n\nfunction cleanUpSchemaItem(data) {\n  return Object.fromEntries(Object.entries(data).filter(_ref64 => {\n    let [key, value] = _ref64;\n\n    if (key === 'attrs' && isEmptyObject(value)) {\n      return false;\n    }\n\n    return value !== null && value !== undefined;\n  }));\n}\n\nfunction getSchemaByResolvedExtensions(extensions) {\n  var _a;\n\n  const allAttributes = getAttributesFromExtensions(extensions);\n  const {\n    nodeExtensions,\n    markExtensions\n  } = splitExtensions(extensions);\n  const topNode = (_a = nodeExtensions.find(extension => getExtensionField(extension, 'topNode'))) === null || _a === void 0 ? void 0 : _a.name;\n  const nodes = Object.fromEntries(nodeExtensions.map(extension => {\n    const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name);\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage\n    };\n    const extraNodeFields = extensions.reduce((fields, e) => {\n      const extendNodeSchema = getExtensionField(e, 'extendNodeSchema', context);\n      return { ...fields,\n        ...(extendNodeSchema ? extendNodeSchema(extension) : {})\n      };\n    }, {});\n    const schema = cleanUpSchemaItem({ ...extraNodeFields,\n      content: callOrReturn(getExtensionField(extension, 'content', context)),\n      marks: callOrReturn(getExtensionField(extension, 'marks', context)),\n      group: callOrReturn(getExtensionField(extension, 'group', context)),\n      inline: callOrReturn(getExtensionField(extension, 'inline', context)),\n      atom: callOrReturn(getExtensionField(extension, 'atom', context)),\n      selectable: callOrReturn(getExtensionField(extension, 'selectable', context)),\n      draggable: callOrReturn(getExtensionField(extension, 'draggable', context)),\n      code: callOrReturn(getExtensionField(extension, 'code', context)),\n      defining: callOrReturn(getExtensionField(extension, 'defining', context)),\n      isolating: callOrReturn(getExtensionField(extension, 'isolating', context)),\n      attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {\n        var _a;\n\n        return [extensionAttribute.name, {\n          default: (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a.default\n        }];\n      }))\n    });\n    const parseHTML = callOrReturn(getExtensionField(extension, 'parseHTML', context));\n\n    if (parseHTML) {\n      schema.parseDOM = parseHTML.map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes));\n    }\n\n    const renderHTML = getExtensionField(extension, 'renderHTML', context);\n\n    if (renderHTML) {\n      schema.toDOM = node => renderHTML({\n        node,\n        HTMLAttributes: getRenderedAttributes(node, extensionAttributes)\n      });\n    }\n\n    const renderText = getExtensionField(extension, 'renderText', context);\n\n    if (renderText) {\n      schema.toText = renderText;\n    }\n\n    return [extension.name, schema];\n  }));\n  const marks = Object.fromEntries(markExtensions.map(extension => {\n    const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name);\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage\n    };\n    const extraMarkFields = extensions.reduce((fields, e) => {\n      const extendMarkSchema = getExtensionField(e, 'extendMarkSchema', context);\n      return { ...fields,\n        ...(extendMarkSchema ? extendMarkSchema(extension) : {})\n      };\n    }, {});\n    const schema = cleanUpSchemaItem({ ...extraMarkFields,\n      inclusive: callOrReturn(getExtensionField(extension, 'inclusive', context)),\n      excludes: callOrReturn(getExtensionField(extension, 'excludes', context)),\n      group: callOrReturn(getExtensionField(extension, 'group', context)),\n      spanning: callOrReturn(getExtensionField(extension, 'spanning', context)),\n      code: callOrReturn(getExtensionField(extension, 'code', context)),\n      attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {\n        var _a;\n\n        return [extensionAttribute.name, {\n          default: (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a.default\n        }];\n      }))\n    });\n    const parseHTML = callOrReturn(getExtensionField(extension, 'parseHTML', context));\n\n    if (parseHTML) {\n      schema.parseDOM = parseHTML.map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes));\n    }\n\n    const renderHTML = getExtensionField(extension, 'renderHTML', context);\n\n    if (renderHTML) {\n      schema.toDOM = mark => renderHTML({\n        mark,\n        HTMLAttributes: getRenderedAttributes(mark, extensionAttributes)\n      });\n    }\n\n    return [extension.name, schema];\n  }));\n  return new Schema({\n    topNode,\n    nodes,\n    marks\n  });\n}\n\nfunction getSchemaTypeByName(name, schema) {\n  return schema.nodes[name] || schema.marks[name] || null;\n}\n\nfunction isExtensionRulesEnabled(extension, enabled) {\n  if (Array.isArray(enabled)) {\n    return enabled.some(enabledExtension => {\n      const name = typeof enabledExtension === 'string' ? enabledExtension : enabledExtension.name;\n      return name === extension.name;\n    });\n  }\n\n  return enabled;\n}\n\nfunction findDuplicates(items) {\n  const filtered = items.filter((el, index) => items.indexOf(el) !== index);\n  return [...new Set(filtered)];\n}\n\nclass ExtensionManager {\n  constructor(extensions, editor) {\n    this.splittableMarks = [];\n    this.editor = editor;\n    this.extensions = ExtensionManager.resolve(extensions);\n    this.schema = getSchemaByResolvedExtensions(this.extensions);\n    this.extensions.forEach(extension => {\n      var _a; // store extension storage in editor\n\n\n      this.editor.extensionStorage[extension.name] = extension.storage;\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor: this.editor,\n        type: getSchemaTypeByName(extension.name, this.schema)\n      };\n\n      if (extension.type === 'mark') {\n        const keepOnSplit = (_a = callOrReturn(getExtensionField(extension, 'keepOnSplit', context))) !== null && _a !== void 0 ? _a : true;\n\n        if (keepOnSplit) {\n          this.splittableMarks.push(extension.name);\n        }\n      }\n\n      const onBeforeCreate = getExtensionField(extension, 'onBeforeCreate', context);\n\n      if (onBeforeCreate) {\n        this.editor.on('beforeCreate', onBeforeCreate);\n      }\n\n      const onCreate = getExtensionField(extension, 'onCreate', context);\n\n      if (onCreate) {\n        this.editor.on('create', onCreate);\n      }\n\n      const onUpdate = getExtensionField(extension, 'onUpdate', context);\n\n      if (onUpdate) {\n        this.editor.on('update', onUpdate);\n      }\n\n      const onSelectionUpdate = getExtensionField(extension, 'onSelectionUpdate', context);\n\n      if (onSelectionUpdate) {\n        this.editor.on('selectionUpdate', onSelectionUpdate);\n      }\n\n      const onTransaction = getExtensionField(extension, 'onTransaction', context);\n\n      if (onTransaction) {\n        this.editor.on('transaction', onTransaction);\n      }\n\n      const onFocus = getExtensionField(extension, 'onFocus', context);\n\n      if (onFocus) {\n        this.editor.on('focus', onFocus);\n      }\n\n      const onBlur = getExtensionField(extension, 'onBlur', context);\n\n      if (onBlur) {\n        this.editor.on('blur', onBlur);\n      }\n\n      const onDestroy = getExtensionField(extension, 'onDestroy', context);\n\n      if (onDestroy) {\n        this.editor.on('destroy', onDestroy);\n      }\n    });\n  }\n\n  static resolve(extensions) {\n    const resolvedExtensions = ExtensionManager.sort(ExtensionManager.flatten(extensions));\n    const duplicatedNames = findDuplicates(resolvedExtensions.map(extension => extension.name));\n\n    if (duplicatedNames.length) {\n      console.warn(`[tiptap warn]: Duplicate extension names found: [${duplicatedNames.map(item => `'${item}'`).join(', ')}]. This can lead to issues.`);\n    }\n\n    return resolvedExtensions;\n  }\n\n  static flatten(extensions) {\n    return extensions.map(extension => {\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage\n      };\n      const addExtensions = getExtensionField(extension, 'addExtensions', context);\n\n      if (addExtensions) {\n        return [extension, ...this.flatten(addExtensions())];\n      }\n\n      return extension;\n    }) // `Infinity` will break TypeScript so we set a number that is probably high enough\n    .flat(10);\n  }\n\n  static sort(extensions) {\n    const defaultPriority = 100;\n    return extensions.sort((a, b) => {\n      const priorityA = getExtensionField(a, 'priority') || defaultPriority;\n      const priorityB = getExtensionField(b, 'priority') || defaultPriority;\n\n      if (priorityA > priorityB) {\n        return -1;\n      }\n\n      if (priorityA < priorityB) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }\n\n  get commands() {\n    return this.extensions.reduce((commands, extension) => {\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor: this.editor,\n        type: getSchemaTypeByName(extension.name, this.schema)\n      };\n      const addCommands = getExtensionField(extension, 'addCommands', context);\n\n      if (!addCommands) {\n        return commands;\n      }\n\n      return { ...commands,\n        ...addCommands()\n      };\n    }, {});\n  }\n\n  get plugins() {\n    const {\n      editor\n    } = this; // With ProseMirror, first plugins within an array are executed first.\n    // In tiptap, we provide the ability to override plugins,\n    // so it feels more natural to run plugins at the end of an array first.\n    // That’s why we have to reverse the `extensions` array and sort again\n    // based on the `priority` option.\n\n    const extensions = ExtensionManager.sort([...this.extensions].reverse());\n    const inputRules = [];\n    const pasteRules = [];\n    const allPlugins = extensions.map(extension => {\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor,\n        type: getSchemaTypeByName(extension.name, this.schema)\n      };\n      const plugins = [];\n      const addKeyboardShortcuts = getExtensionField(extension, 'addKeyboardShortcuts', context);\n\n      if (addKeyboardShortcuts) {\n        const bindings = Object.fromEntries(Object.entries(addKeyboardShortcuts()).map(_ref65 => {\n          let [shortcut, method] = _ref65;\n          return [shortcut, () => method({\n            editor\n          })];\n        }));\n        const keyMapPlugin = keymap(bindings);\n        plugins.push(keyMapPlugin);\n      }\n\n      const addInputRules = getExtensionField(extension, 'addInputRules', context);\n\n      if (isExtensionRulesEnabled(extension, editor.options.enableInputRules) && addInputRules) {\n        inputRules.push(...addInputRules());\n      }\n\n      const addPasteRules = getExtensionField(extension, 'addPasteRules', context);\n\n      if (isExtensionRulesEnabled(extension, editor.options.enablePasteRules) && addPasteRules) {\n        pasteRules.push(...addPasteRules());\n      }\n\n      const addProseMirrorPlugins = getExtensionField(extension, 'addProseMirrorPlugins', context);\n\n      if (addProseMirrorPlugins) {\n        const proseMirrorPlugins = addProseMirrorPlugins();\n        plugins.push(...proseMirrorPlugins);\n      }\n\n      return plugins;\n    }).flat();\n    return [inputRulesPlugin({\n      editor,\n      rules: inputRules\n    }), pasteRulesPlugin({\n      editor,\n      rules: pasteRules\n    }), ...allPlugins];\n  }\n\n  get attributes() {\n    return getAttributesFromExtensions(this.extensions);\n  }\n\n  get nodeViews() {\n    const {\n      editor\n    } = this;\n    const {\n      nodeExtensions\n    } = splitExtensions(this.extensions);\n    return Object.fromEntries(nodeExtensions.filter(extension => !!getExtensionField(extension, 'addNodeView')).map(extension => {\n      const extensionAttributes = this.attributes.filter(attribute => attribute.type === extension.name);\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor,\n        type: getNodeType(extension.name, this.schema)\n      };\n      const addNodeView = getExtensionField(extension, 'addNodeView', context);\n\n      if (!addNodeView) {\n        return [];\n      }\n\n      const nodeview = (node, view, getPos, decorations) => {\n        const HTMLAttributes = getRenderedAttributes(node, extensionAttributes);\n        return addNodeView()({\n          editor,\n          node,\n          getPos,\n          decorations,\n          HTMLAttributes,\n          extension\n        });\n      };\n\n      return [extension.name, nodeview];\n    }));\n  }\n\n}\n\nclass EventEmitter {\n  constructor() {\n    this.callbacks = {};\n  }\n\n  on(event, fn) {\n    if (!this.callbacks[event]) {\n      this.callbacks[event] = [];\n    }\n\n    this.callbacks[event].push(fn);\n    return this;\n  }\n\n  emit(event) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n\n    const callbacks = this.callbacks[event];\n\n    if (callbacks) {\n      callbacks.forEach(callback => callback.apply(this, args));\n    }\n\n    return this;\n  }\n\n  off(event, fn) {\n    const callbacks = this.callbacks[event];\n\n    if (callbacks) {\n      if (fn) {\n        this.callbacks[event] = callbacks.filter(callback => callback !== fn);\n      } else {\n        delete this.callbacks[event];\n      }\n    }\n\n    return this;\n  }\n\n  removeAllListeners() {\n    this.callbacks = {};\n  }\n\n}\n\nconst style = `.ProseMirror {\n  position: relative;\n}\n\n.ProseMirror {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  white-space: break-spaces;\n  -webkit-font-variant-ligatures: none;\n  font-variant-ligatures: none;\n  font-feature-settings: \"liga\" 0; /* the above doesn't seem to work in Edge */\n}\n\n.ProseMirror [contenteditable=\"false\"] {\n  white-space: normal;\n}\n\n.ProseMirror [contenteditable=\"false\"] [contenteditable=\"true\"] {\n  white-space: pre-wrap;\n}\n\n.ProseMirror pre {\n  white-space: pre-wrap;\n}\n\nimg.ProseMirror-separator {\n  display: inline !important;\n  border: none !important;\n  margin: 0 !important;\n  width: 1px !important;\n  height: 1px !important;\n}\n\n.ProseMirror-gapcursor {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n  margin: 0;\n}\n\n.ProseMirror-gapcursor:after {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: -2px;\n  width: 20px;\n  border-top: 1px solid black;\n  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;\n}\n\n@keyframes ProseMirror-cursor-blink {\n  to {\n    visibility: hidden;\n  }\n}\n\n.ProseMirror-hideselection *::selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection *::-moz-selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection * {\n  caret-color: transparent;\n}\n\n.ProseMirror-focused .ProseMirror-gapcursor {\n  display: block;\n}\n\n.tippy-box[data-animation=fade][data-state=hidden] {\n  opacity: 0\n}`;\n\nclass Editor extends EventEmitter {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this.isFocused = false;\n    this.extensionStorage = {};\n    this.options = {\n      element: document.createElement('div'),\n      content: '',\n      injectCSS: true,\n      extensions: [],\n      autofocus: false,\n      editable: true,\n      editorProps: {},\n      parseOptions: {},\n      enableInputRules: true,\n      enablePasteRules: true,\n      enableCoreExtensions: true,\n      onBeforeCreate: () => null,\n      onCreate: () => null,\n      onUpdate: () => null,\n      onSelectionUpdate: () => null,\n      onTransaction: () => null,\n      onFocus: () => null,\n      onBlur: () => null,\n      onDestroy: () => null\n    };\n    this.isCapturingTransaction = false;\n    this.capturedTransaction = null;\n    this.setOptions(options);\n    this.createExtensionManager();\n    this.createCommandManager();\n    this.createSchema();\n    this.on('beforeCreate', this.options.onBeforeCreate);\n    this.emit('beforeCreate', {\n      editor: this\n    });\n    this.createView();\n    this.injectCSS();\n    this.on('create', this.options.onCreate);\n    this.on('update', this.options.onUpdate);\n    this.on('selectionUpdate', this.options.onSelectionUpdate);\n    this.on('transaction', this.options.onTransaction);\n    this.on('focus', this.options.onFocus);\n    this.on('blur', this.options.onBlur);\n    this.on('destroy', this.options.onDestroy);\n    window.setTimeout(() => {\n      if (this.isDestroyed) {\n        return;\n      }\n\n      this.commands.focus(this.options.autofocus);\n      this.emit('create', {\n        editor: this\n      });\n    }, 0);\n  }\n  /**\r\n   * Returns the editor storage.\r\n   */\n\n\n  get storage() {\n    return this.extensionStorage;\n  }\n  /**\r\n   * An object of all registered commands.\r\n   */\n\n\n  get commands() {\n    return this.commandManager.commands;\n  }\n  /**\r\n   * Create a command chain to call multiple commands at once.\r\n   */\n\n\n  chain() {\n    return this.commandManager.chain();\n  }\n  /**\r\n   * Check if a command or a command chain can be executed. Without executing it.\r\n   */\n\n\n  can() {\n    return this.commandManager.can();\n  }\n  /**\r\n   * Inject CSS styles.\r\n   */\n\n\n  injectCSS() {\n    if (this.options.injectCSS && document) {\n      this.css = createStyleTag(style);\n    }\n  }\n  /**\r\n   * Update editor options.\r\n   *\r\n   * @param options A list of options\r\n   */\n\n\n  setOptions() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.options = { ...this.options,\n      ...options\n    };\n\n    if (!this.view || !this.state || this.isDestroyed) {\n      return;\n    }\n\n    if (this.options.editorProps) {\n      this.view.setProps(this.options.editorProps);\n    }\n\n    this.view.updateState(this.state);\n  }\n  /**\r\n   * Update editable state of the editor.\r\n   */\n\n\n  setEditable(editable) {\n    this.setOptions({\n      editable\n    });\n  }\n  /**\r\n   * Returns whether the editor is editable.\r\n   */\n\n\n  get isEditable() {\n    // since plugins are applied after creating the view\n    // `editable` is always `true` for one tick.\n    // that’s why we also have to check for `options.editable`\n    return this.options.editable && this.view && this.view.editable;\n  }\n  /**\r\n   * Returns the editor state.\r\n   */\n\n\n  get state() {\n    return this.view.state;\n  }\n  /**\r\n   * Register a ProseMirror plugin.\r\n   *\r\n   * @param plugin A ProseMirror plugin\r\n   * @param handlePlugins Control how to merge the plugin into the existing plugins.\r\n   */\n\n\n  registerPlugin(plugin, handlePlugins) {\n    const plugins = isFunction(handlePlugins) ? handlePlugins(plugin, this.state.plugins) : [...this.state.plugins, plugin];\n    const state = this.state.reconfigure({\n      plugins\n    });\n    this.view.updateState(state);\n  }\n  /**\r\n   * Unregister a ProseMirror plugin.\r\n   *\r\n   * @param nameOrPluginKey The plugins name\r\n   */\n\n\n  unregisterPlugin(nameOrPluginKey) {\n    if (this.isDestroyed) {\n      return;\n    }\n\n    const name = typeof nameOrPluginKey === 'string' ? `${nameOrPluginKey}$` // @ts-ignore\n    : nameOrPluginKey.key;\n    const state = this.state.reconfigure({\n      // @ts-ignore\n      plugins: this.state.plugins.filter(plugin => !plugin.key.startsWith(name))\n    });\n    this.view.updateState(state);\n  }\n  /**\r\n   * Creates an extension manager.\r\n   */\n\n\n  createExtensionManager() {\n    const coreExtensions = this.options.enableCoreExtensions ? Object.values(extensions) : [];\n    const allExtensions = [...coreExtensions, ...this.options.extensions].filter(extension => {\n      return ['extension', 'node', 'mark'].includes(extension === null || extension === void 0 ? void 0 : extension.type);\n    });\n    this.extensionManager = new ExtensionManager(allExtensions, this);\n  }\n  /**\r\n   * Creates an command manager.\r\n   */\n\n\n  createCommandManager() {\n    this.commandManager = new CommandManager({\n      editor: this\n    });\n  }\n  /**\r\n   * Creates a ProseMirror schema.\r\n   */\n\n\n  createSchema() {\n    this.schema = this.extensionManager.schema;\n  }\n  /**\r\n   * Creates a ProseMirror view.\r\n   */\n\n\n  createView() {\n    const doc = createDocument(this.options.content, this.schema, this.options.parseOptions);\n    const selection = resolveFocusPosition(doc, this.options.autofocus);\n    this.view = new EditorView(this.options.element, { ...this.options.editorProps,\n      dispatchTransaction: this.dispatchTransaction.bind(this),\n      state: EditorState.create({\n        doc,\n        selection\n      })\n    }); // `editor.view` is not yet available at this time.\n    // Therefore we will add all plugins and node views directly afterwards.\n\n    const newState = this.state.reconfigure({\n      plugins: this.extensionManager.plugins\n    });\n    this.view.updateState(newState);\n    this.createNodeViews(); // Let’s store the editor instance in the DOM element.\n    // So we’ll have access to it for tests.\n\n    const dom = this.view.dom;\n    dom.editor = this;\n  }\n  /**\r\n   * Creates all node views.\r\n   */\n\n\n  createNodeViews() {\n    this.view.setProps({\n      nodeViews: this.extensionManager.nodeViews\n    });\n  }\n\n  captureTransaction(fn) {\n    this.isCapturingTransaction = true;\n    fn();\n    this.isCapturingTransaction = false;\n    const tr = this.capturedTransaction;\n    this.capturedTransaction = null;\n    return tr;\n  }\n  /**\r\n   * The callback over which to send transactions (state updates) produced by the view.\r\n   *\r\n   * @param transaction An editor state transaction\r\n   */\n\n\n  dispatchTransaction(transaction) {\n    if (this.isCapturingTransaction) {\n      if (!this.capturedTransaction) {\n        this.capturedTransaction = transaction;\n        return;\n      }\n\n      transaction.steps.forEach(step => {\n        var _a;\n\n        return (_a = this.capturedTransaction) === null || _a === void 0 ? void 0 : _a.step(step);\n      });\n      return;\n    }\n\n    const state = this.state.apply(transaction);\n    const selectionHasChanged = !this.state.selection.eq(state.selection);\n    this.view.updateState(state);\n    this.emit('transaction', {\n      editor: this,\n      transaction\n    });\n\n    if (selectionHasChanged) {\n      this.emit('selectionUpdate', {\n        editor: this,\n        transaction\n      });\n    }\n\n    const focus = transaction.getMeta('focus');\n    const blur = transaction.getMeta('blur');\n\n    if (focus) {\n      this.emit('focus', {\n        editor: this,\n        event: focus.event,\n        transaction\n      });\n    }\n\n    if (blur) {\n      this.emit('blur', {\n        editor: this,\n        event: blur.event,\n        transaction\n      });\n    }\n\n    if (!transaction.docChanged || transaction.getMeta('preventUpdate')) {\n      return;\n    }\n\n    this.emit('update', {\n      editor: this,\n      transaction\n    });\n  }\n  /**\r\n   * Get attributes of the currently selected node or mark.\r\n   */\n\n\n  getAttributes(nameOrType) {\n    return getAttributes(this.state, nameOrType);\n  }\n\n  isActive(nameOrAttributes, attributesOrUndefined) {\n    const name = typeof nameOrAttributes === 'string' ? nameOrAttributes : null;\n    const attributes = typeof nameOrAttributes === 'string' ? attributesOrUndefined : nameOrAttributes;\n    return isActive(this.state, name, attributes);\n  }\n  /**\r\n   * Get the document as JSON.\r\n   */\n\n\n  getJSON() {\n    return this.state.doc.toJSON();\n  }\n  /**\r\n   * Get the document as HTML.\r\n   */\n\n\n  getHTML() {\n    return getHTMLFromFragment(this.state.doc.content, this.schema);\n  }\n  /**\r\n   * Get the document as text.\r\n   */\n\n\n  getText(options) {\n    const {\n      blockSeparator = '\\n\\n',\n      textSerializers = {}\n    } = options || {};\n    return getText(this.state.doc, {\n      blockSeparator,\n      textSerializers: { ...textSerializers,\n        ...getTextSeralizersFromSchema(this.schema)\n      }\n    });\n  }\n  /**\r\n   * Check if there is no content.\r\n   */\n\n\n  get isEmpty() {\n    return isNodeEmpty(this.state.doc);\n  }\n  /**\r\n   * Get the number of characters for the current document.\r\n   *\r\n   * @deprecated\r\n   */\n\n\n  getCharacterCount() {\n    console.warn('[tiptap warn]: \"editor.getCharacterCount()\" is deprecated. Please use \"editor.storage.characterCount.characters()\" instead.');\n    return this.state.doc.content.size - 2;\n  }\n  /**\r\n   * Destroy the editor.\r\n   */\n\n\n  destroy() {\n    this.emit('destroy');\n\n    if (this.view) {\n      this.view.destroy();\n    }\n\n    this.removeAllListeners();\n  }\n  /**\r\n   * Check if the editor is already destroyed.\r\n   */\n\n\n  get isDestroyed() {\n    var _a; // @ts-ignore\n\n\n    return !((_a = this.view) === null || _a === void 0 ? void 0 : _a.docView);\n  }\n\n}\n\nclass Node {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.type = 'node';\n    this.name = 'node';\n    this.parent = null;\n    this.child = null;\n    this.config = {\n      name: this.name,\n      defaultOptions: {}\n    };\n    this.config = { ...this.config,\n      ...config\n    };\n    this.name = this.config.name;\n\n    if (config.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`);\n    } // TODO: remove `addOptions` fallback\n\n\n    this.options = this.config.defaultOptions;\n\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField(this, 'addOptions', {\n        name: this.name\n      }));\n    }\n\n    this.storage = callOrReturn(getExtensionField(this, 'addStorage', {\n      name: this.name,\n      options: this.options\n    })) || {};\n  }\n\n  static create() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return new Node(config);\n  }\n\n  configure() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend();\n    extension.options = mergeDeep(this.options, options);\n    extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n      name: extension.name,\n      options: extension.options\n    }));\n    return extension;\n  }\n\n  extend() {\n    let extendedConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const extension = new Node(extendedConfig);\n    extension.parent = this;\n    this.child = extension;\n    extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n\n    if (extendedConfig.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`);\n    }\n\n    extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {\n      name: extension.name\n    }));\n    extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n      name: extension.name,\n      options: extension.options\n    }));\n    return extension;\n  }\n\n}\n\nclass Mark {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.type = 'mark';\n    this.name = 'mark';\n    this.parent = null;\n    this.child = null;\n    this.config = {\n      name: this.name,\n      defaultOptions: {}\n    };\n    this.config = { ...this.config,\n      ...config\n    };\n    this.name = this.config.name;\n\n    if (config.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`);\n    } // TODO: remove `addOptions` fallback\n\n\n    this.options = this.config.defaultOptions;\n\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField(this, 'addOptions', {\n        name: this.name\n      }));\n    }\n\n    this.storage = callOrReturn(getExtensionField(this, 'addStorage', {\n      name: this.name,\n      options: this.options\n    })) || {};\n  }\n\n  static create() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return new Mark(config);\n  }\n\n  configure() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend();\n    extension.options = mergeDeep(this.options, options);\n    extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n      name: extension.name,\n      options: extension.options\n    }));\n    return extension;\n  }\n\n  extend() {\n    let extendedConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const extension = new Mark(extendedConfig);\n    extension.parent = this;\n    this.child = extension;\n    extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n\n    if (extendedConfig.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`);\n    }\n\n    extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {\n      name: extension.name\n    }));\n    extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n      name: extension.name,\n      options: extension.options\n    }));\n    return extension;\n  }\n\n}\n\nclass NodeView {\n  constructor(component, props, options) {\n    this.isDragging = false;\n    this.component = component;\n    this.editor = props.editor;\n    this.options = {\n      stopEvent: null,\n      ignoreMutation: null,\n      ...options\n    };\n    this.extension = props.extension;\n    this.node = props.node;\n    this.decorations = props.decorations;\n    this.getPos = props.getPos;\n    this.mount();\n  }\n\n  mount() {\n    // eslint-disable-next-line\n    return;\n  }\n\n  get dom() {\n    return null;\n  }\n\n  get contentDOM() {\n    return null;\n  }\n\n  onDragStart(event) {\n    var _a, _b, _c;\n\n    const {\n      view\n    } = this.editor;\n    const target = event.target; // get the drag handle element\n    // `closest` is not available for text nodes so we may have to use its parent\n\n    const dragHandle = target.nodeType === 3 ? (_a = target.parentElement) === null || _a === void 0 ? void 0 : _a.closest('[data-drag-handle]') : target.closest('[data-drag-handle]');\n\n    if (!this.dom || ((_b = this.contentDOM) === null || _b === void 0 ? void 0 : _b.contains(target)) || !dragHandle) {\n      return;\n    }\n\n    let x = 0;\n    let y = 0; // calculate offset for drag element if we use a different drag handle element\n\n    if (this.dom !== dragHandle) {\n      const domBox = this.dom.getBoundingClientRect();\n      const handleBox = dragHandle.getBoundingClientRect();\n      x = handleBox.x - domBox.x + event.offsetX;\n      y = handleBox.y - domBox.y + event.offsetY;\n    }\n\n    (_c = event.dataTransfer) === null || _c === void 0 ? void 0 : _c.setDragImage(this.dom, x, y); // we need to tell ProseMirror that we want to move the whole node\n    // so we create a NodeSelection\n\n    const selection = NodeSelection.create(view.state.doc, this.getPos());\n    const transaction = view.state.tr.setSelection(selection);\n    view.dispatch(transaction);\n  }\n\n  stopEvent(event) {\n    var _a;\n\n    if (!this.dom) {\n      return false;\n    }\n\n    if (typeof this.options.stopEvent === 'function') {\n      return this.options.stopEvent({\n        event\n      });\n    }\n\n    const target = event.target;\n    const isInElement = this.dom.contains(target) && !((_a = this.contentDOM) === null || _a === void 0 ? void 0 : _a.contains(target)); // any event from child nodes should be handled by ProseMirror\n\n    if (!isInElement) {\n      return false;\n    }\n\n    const isDropEvent = event.type === 'drop';\n    const isInput = ['INPUT', 'BUTTON', 'SELECT', 'TEXTAREA'].includes(target.tagName) || target.isContentEditable; // any input event within node views should be ignored by ProseMirror\n\n    if (isInput && !isDropEvent) {\n      return true;\n    }\n\n    const {\n      isEditable\n    } = this.editor;\n    const {\n      isDragging\n    } = this;\n    const isDraggable = !!this.node.type.spec.draggable;\n    const isSelectable = NodeSelection.isSelectable(this.node);\n    const isCopyEvent = event.type === 'copy';\n    const isPasteEvent = event.type === 'paste';\n    const isCutEvent = event.type === 'cut';\n    const isClickEvent = event.type === 'mousedown';\n    const isDragEvent = event.type.startsWith('drag'); // ProseMirror tries to drag selectable nodes\n    // even if `draggable` is set to `false`\n    // this fix prevents that\n\n    if (!isDraggable && isSelectable && isDragEvent) {\n      event.preventDefault();\n    }\n\n    if (isDraggable && isDragEvent && !isDragging) {\n      event.preventDefault();\n      return false;\n    } // we have to store that dragging started\n\n\n    if (isDraggable && isEditable && !isDragging && isClickEvent) {\n      const dragHandle = target.closest('[data-drag-handle]');\n      const isValidDragHandle = dragHandle && (this.dom === dragHandle || this.dom.contains(dragHandle));\n\n      if (isValidDragHandle) {\n        this.isDragging = true;\n        document.addEventListener('dragend', () => {\n          this.isDragging = false;\n        }, {\n          once: true\n        });\n        document.addEventListener('mouseup', () => {\n          this.isDragging = false;\n        }, {\n          once: true\n        });\n      }\n    } // these events are handled by prosemirror\n\n\n    if (isDragging || isDropEvent || isCopyEvent || isPasteEvent || isCutEvent || isClickEvent && isSelectable) {\n      return false;\n    }\n\n    return true;\n  }\n\n  ignoreMutation(mutation) {\n    if (!this.dom || !this.contentDOM) {\n      return true;\n    }\n\n    if (typeof this.options.ignoreMutation === 'function') {\n      return this.options.ignoreMutation({\n        mutation\n      });\n    } // a leaf/atom node is like a black box for ProseMirror\n    // and should be fully handled by the node view\n\n\n    if (this.node.isLeaf || this.node.isAtom) {\n      return true;\n    } // ProseMirror should handle any selections\n\n\n    if (mutation.type === 'selection') {\n      return false;\n    } // try to prevent a bug on iOS that will break node views on enter\n    // this is because ProseMirror can’t preventDispatch on enter\n    // this will lead to a re-render of the node view on enter\n    // see: https://github.com/ueberdosis/tiptap/issues/1214\n\n\n    if (this.dom.contains(mutation.target) && mutation.type === 'childList' && isiOS() && this.editor.isFocused) {\n      const changedNodes = [...Array.from(mutation.addedNodes), ...Array.from(mutation.removedNodes)]; // we’ll check if every changed node is contentEditable\n      // to make sure it’s probably mutated by ProseMirror\n\n      if (changedNodes.every(node => node.isContentEditable)) {\n        return false;\n      }\n    } // we will allow mutation contentDOM with attributes\n    // so we can for example adding classes within our node view\n\n\n    if (this.contentDOM === mutation.target && mutation.type === 'attributes') {\n      return true;\n    } // ProseMirror should handle any changes within contentDOM\n\n\n    if (this.contentDOM.contains(mutation.target)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  updateAttributes(attributes) {\n    this.editor.commands.command(_ref66 => {\n      let {\n        tr\n      } = _ref66;\n      const pos = this.getPos();\n      tr.setNodeMarkup(pos, undefined, { ...this.node.attrs,\n        ...attributes\n      });\n      return true;\n    });\n  }\n\n  deleteNode() {\n    const from = this.getPos();\n    const to = from + this.node.nodeSize;\n    this.editor.commands.deleteRange({\n      from,\n      to\n    });\n  }\n\n}\n\nclass Tracker {\n  constructor(transaction) {\n    this.transaction = transaction;\n    this.currentStep = this.transaction.steps.length;\n  }\n\n  map(position) {\n    let deleted = false;\n    const mappedPosition = this.transaction.steps.slice(this.currentStep).reduce((newPosition, step) => {\n      const mapResult = step.getMap().mapResult(newPosition);\n\n      if (mapResult.deleted) {\n        deleted = true;\n      }\n\n      return mapResult.pos;\n    }, position);\n    return {\n      position: mappedPosition,\n      deleted\n    };\n  }\n\n}\n/**\r\n * Build an input rule that adds a node when the\r\n * matched text is typed into it.\r\n */\n\n\nfunction nodeInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: _ref67 => {\n      let {\n        state,\n        range,\n        match\n      } = _ref67;\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n      const {\n        tr\n      } = state;\n      const start = range.from;\n      let end = range.to;\n\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1]);\n        let matchStart = start + offset;\n\n        if (matchStart > end) {\n          matchStart = end;\n        } else {\n          end = matchStart + match[1].length;\n        } // insert last typed character\n\n\n        const lastChar = match[0][match[0].length - 1];\n        tr.insertText(lastChar, start + match[0].length - 1); // insert node from input rule\n\n        tr.replaceWith(matchStart, end, config.type.create(attributes));\n      } else if (match[0]) {\n        tr.replaceWith(start, end, config.type.create(attributes));\n      }\n    }\n  });\n}\n\nfunction getMarksBetween(from, to, doc) {\n  const marks = []; // get all inclusive marks on empty selection\n\n  if (from === to) {\n    doc.resolve(from).marks().forEach(mark => {\n      const $pos = doc.resolve(from - 1);\n      const range = getMarkRange($pos, mark.type);\n\n      if (!range) {\n        return;\n      }\n\n      marks.push({\n        mark,\n        ...range\n      });\n    });\n  } else {\n    doc.nodesBetween(from, to, (node, pos) => {\n      marks.push(...node.marks.map(mark => ({\n        from: pos,\n        to: pos + node.nodeSize,\n        mark\n      })));\n    });\n  }\n\n  return marks;\n}\n/**\r\n * Build an input rule that adds a mark when the\r\n * matched text is typed into it.\r\n */\n\n\nfunction markInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: _ref68 => {\n      let {\n        state,\n        range,\n        match\n      } = _ref68;\n      const attributes = callOrReturn(config.getAttributes, undefined, match);\n\n      if (attributes === false || attributes === null) {\n        return;\n      }\n\n      const {\n        tr\n      } = state;\n      const captureGroup = match[match.length - 1];\n      const fullMatch = match[0];\n      let markEnd = range.to;\n\n      if (captureGroup) {\n        const startSpaces = fullMatch.search(/\\S/);\n        const textStart = range.from + fullMatch.indexOf(captureGroup);\n        const textEnd = textStart + captureGroup.length;\n        const excludedMarks = getMarksBetween(range.from, range.to, state.doc).filter(item => {\n          // @ts-ignore\n          const excluded = item.mark.type.excluded;\n          return excluded.find(type => type === config.type && type !== item.mark.type);\n        }).filter(item => item.to > textStart);\n\n        if (excludedMarks.length) {\n          return null;\n        }\n\n        if (textEnd < range.to) {\n          tr.delete(textEnd, range.to);\n        }\n\n        if (textStart > range.from) {\n          tr.delete(range.from + startSpaces, textStart);\n        }\n\n        markEnd = range.from + startSpaces + captureGroup.length;\n        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));\n        tr.removeStoredMark(config.type);\n      }\n    }\n  });\n}\n/**\r\n * Build an input rule that changes the type of a textblock when the\r\n * matched text is typed into it. When using a regular expresion you’ll\r\n * probably want the regexp to start with `^`, so that the pattern can\r\n * only occur at the start of a textblock.\r\n */\n\n\nfunction textblockTypeInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: _ref69 => {\n      let {\n        state,\n        range,\n        match\n      } = _ref69;\n      const $start = state.doc.resolve(range.from);\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n\n      if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), config.type)) {\n        return null;\n      }\n\n      state.tr.delete(range.from, range.to).setBlockType(range.from, range.from, config.type, attributes);\n    }\n  });\n}\n/**\r\n * Build an input rule that replaces text when the\r\n * matched text is typed into it.\r\n */\n\n\nfunction textInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: _ref70 => {\n      let {\n        state,\n        range,\n        match\n      } = _ref70;\n      let insert = config.replace;\n      let start = range.from;\n      const end = range.to;\n\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1]);\n        insert += match[0].slice(offset + match[1].length);\n        start += offset;\n        const cutOff = start - end;\n\n        if (cutOff > 0) {\n          insert = match[0].slice(offset - cutOff, offset) + insert;\n          start = end;\n        }\n      }\n\n      state.tr.insertText(insert, start, end);\n    }\n  });\n}\n/**\r\n * Build an input rule for automatically wrapping a textblock when a\r\n * given string is typed. When using a regular expresion you’ll\r\n * probably want the regexp to start with `^`, so that the pattern can\r\n * only occur at the start of a textblock.\r\n *\r\n * `type` is the type of node to wrap in.\r\n *\r\n * By default, if there’s a node with the same type above the newly\r\n * wrapped node, the rule will try to join those\r\n * two nodes. You can pass a join predicate, which takes a regular\r\n * expression match and the node before the wrapped node, and can\r\n * return a boolean to indicate whether a join should happen.\r\n */\n\n\nfunction wrappingInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: _ref71 => {\n      let {\n        state,\n        range,\n        match\n      } = _ref71;\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n      const tr = state.tr.delete(range.from, range.to);\n      const $start = tr.doc.resolve(range.from);\n      const blockRange = $start.blockRange();\n      const wrapping = blockRange && findWrapping(blockRange, config.type, attributes);\n\n      if (!wrapping) {\n        return null;\n      }\n\n      tr.wrap(blockRange, wrapping);\n      const before = tr.doc.resolve(range.from - 1).nodeBefore;\n\n      if (before && before.type === config.type && canJoin(tr.doc, range.from - 1) && (!config.joinPredicate || config.joinPredicate(match, before))) {\n        tr.join(range.from - 1);\n      }\n    }\n  });\n}\n/**\r\n * Build an paste rule that adds a mark when the\r\n * matched text is pasted into it.\r\n */\n\n\nfunction markPasteRule(config) {\n  return new PasteRule({\n    find: config.find,\n    handler: _ref72 => {\n      let {\n        state,\n        range,\n        match\n      } = _ref72;\n      const attributes = callOrReturn(config.getAttributes, undefined, match);\n\n      if (attributes === false || attributes === null) {\n        return;\n      }\n\n      const {\n        tr\n      } = state;\n      const captureGroup = match[match.length - 1];\n      const fullMatch = match[0];\n      let markEnd = range.to;\n\n      if (captureGroup) {\n        const startSpaces = fullMatch.search(/\\S/);\n        const textStart = range.from + fullMatch.indexOf(captureGroup);\n        const textEnd = textStart + captureGroup.length;\n        const excludedMarks = getMarksBetween(range.from, range.to, state.doc).filter(item => {\n          // @ts-ignore\n          const excluded = item.mark.type.excluded;\n          return excluded.find(type => type === config.type && type !== item.mark.type);\n        }).filter(item => item.to > textStart);\n\n        if (excludedMarks.length) {\n          return null;\n        }\n\n        if (textEnd < range.to) {\n          tr.delete(textEnd, range.to);\n        }\n\n        if (textStart > range.from) {\n          tr.delete(range.from + startSpaces, textStart);\n        }\n\n        markEnd = range.from + startSpaces + captureGroup.length;\n        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));\n        tr.removeStoredMark(config.type);\n      }\n    }\n  });\n}\n/**\r\n * Build an paste rule that replaces text when the\r\n * matched text is pasted into it.\r\n */\n\n\nfunction textPasteRule(config) {\n  return new PasteRule({\n    find: config.find,\n    handler: _ref73 => {\n      let {\n        state,\n        range,\n        match\n      } = _ref73;\n      let insert = config.replace;\n      let start = range.from;\n      const end = range.to;\n\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1]);\n        insert += match[0].slice(offset + match[1].length);\n        start += offset;\n        const cutOff = start - end;\n\n        if (cutOff > 0) {\n          insert = match[0].slice(offset - cutOff, offset) + insert;\n          start = end;\n        }\n      }\n\n      state.tr.insertText(insert, start, end);\n    }\n  });\n}\n/**\r\n * Returns a new `Transform` based on all steps of the passed transactions.\r\n */\n\n\nfunction combineTransactionSteps(oldDoc, transactions) {\n  const transform = new Transform(oldDoc);\n  transactions.forEach(transaction => {\n    transaction.steps.forEach(step => {\n      transform.step(step);\n    });\n  });\n  return transform;\n}\n\nfunction defaultBlockAt(match) {\n  for (let i = 0; i < match.edgeCount; i += 1) {\n    const {\n      type\n    } = match.edge(i);\n\n    if (type.isTextblock && !type.hasRequiredAttrs()) {\n      return type;\n    }\n  }\n\n  return null;\n}\n\nfunction findChildren(node, predicate) {\n  const nodesWithPos = [];\n  node.descendants((child, pos) => {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos\n      });\n    }\n  });\n  return nodesWithPos;\n}\n/**\r\n * Same as `findChildren` but searches only within a `range`.\r\n */\n\n\nfunction findChildrenInRange(node, range, predicate) {\n  const nodesWithPos = []; // if (range.from === range.to) {\n  //   const nodeAt = node.nodeAt(range.from)\n  //   if (nodeAt) {\n  //     nodesWithPos.push({\n  //       node: nodeAt,\n  //       pos: range.from,\n  //     })\n  //   }\n  // }\n\n  node.nodesBetween(range.from, range.to, (child, pos) => {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos\n      });\n    }\n  });\n  return nodesWithPos;\n}\n\nfunction getSchema(extensions) {\n  const resolvedExtensions = ExtensionManager.resolve(extensions);\n  return getSchemaByResolvedExtensions(resolvedExtensions);\n}\n\nfunction generateHTML(doc, extensions) {\n  const schema = getSchema(extensions);\n  const contentNode = Node$1.fromJSON(schema, doc);\n  return getHTMLFromFragment(contentNode.content, schema);\n}\n\nfunction generateJSON(html, extensions) {\n  const schema = getSchema(extensions);\n  const dom = elementFromString(html);\n  return DOMParser.fromSchema(schema).parse(dom).toJSON();\n}\n\nfunction generateText(doc, extensions, options) {\n  const {\n    blockSeparator = '\\n\\n',\n    textSerializers = {}\n  } = options || {};\n  const schema = getSchema(extensions);\n  const contentNode = Node$1.fromJSON(schema, doc);\n  return getText(contentNode, {\n    blockSeparator,\n    textSerializers: { ...textSerializers,\n      ...getTextSeralizersFromSchema(schema)\n    }\n  });\n}\n/**\r\n * Removes duplicated values within an array.\r\n * Supports numbers, strings and objects.\r\n */\n\n\nfunction removeDuplicates(array) {\n  let by = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : JSON.stringify;\n  const seen = {};\n  return array.filter(item => {\n    const key = by(item);\n    return Object.prototype.hasOwnProperty.call(seen, key) ? false : seen[key] = true;\n  });\n}\n/**\r\n * Removes duplicated ranges and ranges that are\r\n * fully captured by other ranges.\r\n */\n\n\nfunction simplifyChangedRanges(changes) {\n  const uniqueChanges = removeDuplicates(changes);\n  return uniqueChanges.length === 1 ? uniqueChanges : uniqueChanges.filter((change, index) => {\n    const rest = uniqueChanges.filter((_, i) => i !== index);\n    return !rest.some(otherChange => {\n      return change.oldRange.from >= otherChange.oldRange.from && change.oldRange.to <= otherChange.oldRange.to && change.newRange.from >= otherChange.newRange.from && change.newRange.to <= otherChange.newRange.to;\n    });\n  });\n}\n/**\r\n * Returns a list of changed ranges\r\n * based on the first and last state of all steps.\r\n */\n\n\nfunction getChangedRanges(transform) {\n  const {\n    mapping,\n    steps\n  } = transform;\n  const changes = [];\n  mapping.maps.forEach((stepMap, index) => {\n    const ranges = []; // This accounts for step changes where no range was actually altered\n    // e.g. when setting a mark, node attribute, etc.\n    // @ts-ignore\n\n    if (!stepMap.ranges.length) {\n      const {\n        from,\n        to\n      } = steps[index];\n\n      if (from === undefined || to === undefined) {\n        return;\n      }\n\n      ranges.push({\n        from,\n        to\n      });\n    } else {\n      stepMap.forEach((from, to) => {\n        ranges.push({\n          from,\n          to\n        });\n      });\n    }\n\n    ranges.forEach(_ref74 => {\n      let {\n        from,\n        to\n      } = _ref74;\n      const newStart = mapping.slice(index).map(from, -1);\n      const newEnd = mapping.slice(index).map(to);\n      const oldStart = mapping.invert().map(newStart, -1);\n      const oldEnd = mapping.invert().map(newEnd);\n      changes.push({\n        oldRange: {\n          from: oldStart,\n          to: oldEnd\n        },\n        newRange: {\n          from: newStart,\n          to: newEnd\n        }\n      });\n    });\n  });\n  return simplifyChangedRanges(changes);\n}\n\nfunction getDebugJSON(node) {\n  let startOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  const isTopNode = node.type === node.type.schema.topNodeType;\n  const increment = isTopNode ? 0 : 1;\n  const from = startOffset;\n  const to = from + node.nodeSize;\n  const marks = node.marks.map(mark => {\n    const output = {\n      type: mark.type.name\n    };\n\n    if (Object.keys(mark.attrs).length) {\n      output.attrs = { ...mark.attrs\n      };\n    }\n\n    return output;\n  });\n  const attrs = { ...node.attrs\n  };\n  const output = {\n    type: node.type.name,\n    from,\n    to\n  };\n\n  if (Object.keys(attrs).length) {\n    output.attrs = attrs;\n  }\n\n  if (marks.length) {\n    output.marks = marks;\n  }\n\n  if (node.content.childCount) {\n    output.content = [];\n    node.forEach((child, offset) => {\n      var _a;\n\n      (_a = output.content) === null || _a === void 0 ? void 0 : _a.push(getDebugJSON(child, startOffset + offset + increment));\n    });\n  }\n\n  if (node.text) {\n    output.text = node.text;\n  }\n\n  return output;\n}\n\nfunction isNodeSelection(value) {\n  return isObject(value) && value instanceof NodeSelection;\n}\n\nfunction posToDOMRect(view, from, to) {\n  const minPos = 0;\n  const maxPos = view.state.doc.content.size;\n  const resolvedFrom = minMax(from, minPos, maxPos);\n  const resolvedEnd = minMax(to, minPos, maxPos);\n  const start = view.coordsAtPos(resolvedFrom);\n  const end = view.coordsAtPos(resolvedEnd, -1);\n  const top = Math.min(start.top, end.top);\n  const bottom = Math.max(start.bottom, end.bottom);\n  const left = Math.min(start.left, end.left);\n  const right = Math.max(start.right, end.right);\n  const width = right - left;\n  const height = bottom - top;\n  const x = left;\n  const y = top;\n  const data = {\n    top,\n    bottom,\n    left,\n    right,\n    width,\n    height,\n    x,\n    y\n  };\n  return { ...data,\n    toJSON: () => data\n  };\n}\n\nexport { CommandManager, Editor, Extension, InputRule, Mark, Node, NodeView, PasteRule, Tracker, callOrReturn, combineTransactionSteps, defaultBlockAt, extensions, findChildren, findChildrenInRange, findParentNode, findParentNodeClosestToPos, generateHTML, generateJSON, generateText, getAttributes, getChangedRanges, getDebugJSON, getExtensionField, getHTMLFromFragment, getMarkAttributes, getMarkRange, getMarkType, getMarksBetween, getNodeAttributes, getNodeType, getSchema, getText, getTextBetween, inputRulesPlugin, isActive, isList, isMarkActive, isNodeActive, isNodeEmpty, isNodeSelection, isTextSelection, markInputRule, markPasteRule, mergeAttributes, nodeInputRule, pasteRulesPlugin, posToDOMRect, textInputRule, textPasteRule, textblockTypeInputRule, wrappingInputRule };","map":{"version":3,"sources":["../src/utilities/isPlainObject.ts","../src/utilities/mergeDeep.ts","../src/utilities/isFunction.ts","../src/utilities/callOrReturn.ts","../src/helpers/getExtensionField.ts","../src/Extension.ts","../src/helpers/getTextBetween.ts","../src/helpers/getTextSeralizersFromSchema.ts","../src/extensions/clipboardTextSerializer.ts","../src/commands/blur.ts","../src/commands/clearContent.ts","../src/commands/clearNodes.ts","../src/commands/command.ts","../src/commands/createParagraphNear.ts","../src/helpers/getNodeType.ts","../src/commands/deleteNode.ts","../src/commands/deleteRange.ts","../src/commands/deleteSelection.ts","../src/commands/enter.ts","../src/commands/exitCode.ts","../src/helpers/getMarkType.ts","../src/utilities/isRegExp.ts","../src/utilities/objectIncludes.ts","../src/helpers/getMarkRange.ts","../src/commands/extendMarkRange.ts","../src/commands/first.ts","../src/utilities/isClass.ts","../src/utilities/isObject.ts","../src/helpers/isTextSelection.ts","../src/utilities/isiOS.ts","../src/utilities/minMax.ts","../src/helpers/resolveFocusPosition.ts","../src/commands/focus.ts","../src/commands/forEach.ts","../src/commands/insertContent.ts","../src/utilities/elementFromString.ts","../src/helpers/createNodeFromContent.ts","../src/helpers/selectionToInsertionEnd.ts","../src/commands/insertContentAt.ts","../src/commands/joinBackward.ts","../src/commands/joinForward.ts","../src/commands/keyboardShortcut.ts","../src/helpers/isNodeActive.ts","../src/commands/lift.ts","../src/commands/liftEmptyBlock.ts","../src/commands/liftListItem.ts","../src/commands/newlineInCode.ts","../src/helpers/getSchemaTypeNameByName.ts","../src/utilities/deleteProps.ts","../src/commands/resetAttributes.ts","../src/commands/scrollIntoView.ts","../src/commands/selectAll.ts","../src/commands/selectNodeBackward.ts","../src/commands/selectNodeForward.ts","../src/commands/selectParentNode.ts","../src/helpers/createDocument.ts","../src/commands/setContent.ts","../src/helpers/getMarkAttributes.ts","../src/commands/setMark.ts","../src/commands/setMeta.ts","../src/commands/setNode.ts","../src/commands/setNodeSelection.ts","../src/commands/setTextSelection.ts","../src/commands/sinkListItem.ts","../src/helpers/getSplittedAttributes.ts","../src/commands/splitBlock.ts","../src/commands/splitListItem.ts","../src/helpers/findParentNodeClosestToPos.ts","../src/helpers/findParentNode.ts","../src/helpers/splitExtensions.ts","../src/helpers/isList.ts","../src/commands/toggleList.ts","../src/helpers/isMarkActive.ts","../src/commands/toggleMark.ts","../src/commands/toggleNode.ts","../src/commands/toggleWrap.ts","../src/commands/undoInputRule.ts","../src/commands/unsetAllMarks.ts","../src/commands/unsetMark.ts","../src/commands/updateAttributes.ts","../src/commands/wrapIn.ts","../src/commands/wrapInList.ts","../src/extensions/commands.ts","../src/extensions/editable.ts","../src/extensions/focusEvents.ts","../src/helpers/createChainableState.ts","../src/CommandManager.ts","../src/extensions/keymap.ts","../src/extensions/tabindex.ts","../src/helpers/getNodeAttributes.ts","../src/helpers/getAttributes.ts","../src/helpers/isActive.ts","../src/helpers/getHTMLFromFragment.ts","../src/helpers/getText.ts","../src/helpers/isNodeEmpty.ts","../src/utilities/createStyleTag.ts","../src/InputRule.ts","../src/utilities/isNumber.ts","../src/PasteRule.ts","../src/helpers/getAttributesFromExtensions.ts","../src/utilities/mergeAttributes.ts","../src/helpers/getRenderedAttributes.ts","../src/utilities/isEmptyObject.ts","../src/utilities/fromString.ts","../src/helpers/injectExtensionAttributesToParseRule.ts","../src/helpers/getSchemaByResolvedExtensions.ts","../src/helpers/getSchemaTypeByName.ts","../src/helpers/isExtensionRulesEnabled.ts","../src/utilities/findDuplicates.ts","../src/ExtensionManager.ts","../src/EventEmitter.ts","../src/style.ts","../src/Editor.ts","../src/Node.ts","../src/Mark.ts","../src/NodeView.ts","../src/Tracker.ts","../src/inputRules/nodeInputRule.ts","../src/helpers/getMarksBetween.ts","../src/inputRules/markInputRule.ts","../src/inputRules/textblockTypeInputRule.ts","../src/inputRules/textInputRule.ts","../src/inputRules/wrappingInputRule.ts","../src/pasteRules/markPasteRule.ts","../src/pasteRules/textPasteRule.ts","../src/helpers/combineTransactionSteps.ts","../src/helpers/defaultBlockAt.ts","../src/helpers/findChildren.ts","../src/helpers/findChildrenInRange.ts","../src/helpers/getSchema.ts","../src/helpers/generateHTML.ts","../src/helpers/generateJSON.ts","../src/helpers/generateText.ts","../src/utilities/removeDuplicates.ts","../src/helpers/getChangedRanges.ts","../src/helpers/getDebugJSON.ts","../src/helpers/isNodeSelection.ts","../src/helpers/posToDOMRect.ts"],"names":["originalCreateParagraphNear","originalDeleteSelection","originalExitCode","originalJoinBackward","originalJoinForward","originalLift","originalLiftEmptyBlock","originalLiftListItem","originalNewlineInCode","originalSelectNodeBackward","originalSelectNodeForward","originalSelectParentNode","originalSinkListItem","defaultBlockAt","originalWrapIn","originalWrapInList","blur","clearContent","clearNodes","command","createParagraphNear","deleteNode","deleteRange","deleteSelection","enter","exitCode","extendMarkRange","first","focus","forEach","insertContent","insertContentAt","joinBackward","joinForward","keyboardShortcut","lift","liftEmptyBlock","liftListItem","newlineInCode","resetAttributes","scrollIntoView","selectAll","selectNodeBackward","selectNodeForward","selectParentNode","setContent","setMark","setMeta","setNode","setNodeSelection","setTextSelection","sinkListItem","splitBlock","splitListItem","toggleList","toggleMark","toggleNode","toggleWrap","undoInputRule","unsetAllMarks","unsetMark","updateAttributes","wrapIn","wrapInList","run","Node"],"mappings":";;;;;;6CAAA;;AAEA,SAAS,OAAT,CAAiB,KAAjB,EAA2B;AACzB,SAAO,MAAM,CAAC,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,KAA/B,EAAsC,KAAtC,CAA4C,CAA5C,EAA+C,CAAC,CAAhD,CAAP;AACD;;SAEe,a,CAAc,K,EAAU;AACtC,MAAI,OAAO,CAAC,KAAD,CAAP,KAAmB,QAAvB,EAAiC;AAC/B,WAAO,KAAP;AACD;;AAED,SAAO,KAAK,CAAC,WAAN,KAAsB,MAAtB,IAAgC,MAAM,CAAC,cAAP,CAAsB,KAAtB,MAAiC,MAAM,CAAC,SAA/E;AACF;;SCVgB,S,CAAU,M,EAA6B,M,EAA2B;AAChF,QAAM,MAAM,GAAG,EAAE,GAAG;AAAL,GAAf;;AAEA,MAAI,aAAa,CAAC,MAAD,CAAb,IAAyB,aAAa,CAAC,MAAD,CAA1C,EAAoD;AAClD,IAAA,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,OAApB,CAA4B,GAAG,IAAA;AAC7B,UAAI,aAAa,CAAC,MAAM,CAAC,GAAD,CAAP,CAAjB,EAAgC;AAC9B,YAAI,EAAE,GAAG,IAAI,MAAT,CAAJ,EAAsB;AACpB,UAAA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB;AAAE,aAAC,GAAD,GAAO,MAAM,CAAC,GAAD;AAAf,WAAtB;AACD,SAFD,MAEO;AACL,UAAA,MAAM,CAAC,GAAD,CAAN,GAAc,SAAS,CAAC,MAAM,CAAC,GAAD,CAAP,EAAc,MAAM,CAAC,GAAD,CAApB,CAAvB;AACD;AACF,OAND,MAMO;AACL,QAAA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB;AAAE,WAAC,GAAD,GAAO,MAAM,CAAC,GAAD;AAAf,SAAtB;AACD;AACF,KAVD;AAWD;;AAED,SAAO,MAAP;AACF;;SCpBgB,U,CAAW,K,EAAU;AACnC,SAAO,OAAO,KAAP,KAAiB,UAAxB;AACF;ACCA;;;;;;;;;SAOgB,Y,CAAgB,K,EAAmD;AAAA,MAAzC,OAAyC,uEAA1B,SAA0B;;AACjF,MAAI,UAAU,CAAC,KAAD,CAAd,EAAuB;AAAA,sCAD8C,KAC9C;AAD8C,MAAA,KAC9C;AAAA;;AACrB,QAAI,OAAJ,EAAa;AACX,aAAO,KAAK,CAAC,IAAN,CAAW,OAAX,EAAoB,GAAG,KAAvB,CAAP;AACD;;AAED,WAAO,KAAK,CAAC,GAAG,KAAJ,CAAZ;AACD;;AAED,SAAO,KAAP;AACF;;SClBgB,iB,CACd,S,EACA,K,EACA,O,EAAmD;AAGnD,MAAI,SAAS,CAAC,MAAV,CAAiB,KAAjB,MAA4B,SAA5B,IAAyC,SAAS,CAAC,MAAvD,EAA+D;AAC7D,WAAO,iBAAiB,CAAC,SAAS,CAAC,MAAX,EAAmB,KAAnB,EAA0B,OAA1B,CAAxB;AACD;;AAED,MAAI,OAAO,SAAS,CAAC,MAAV,CAAiB,KAAjB,CAAP,KAAmC,UAAvC,EAAmD;AACjD,UAAM,KAAK,GAAG,SAAS,CAAC,MAAV,CAAiB,KAAjB,EAAwB,IAAxB,CAA6B,EACzC,GAAG,OADsC;AAEzC,MAAA,MAAM,EAAE,SAAS,CAAC,MAAV,GACJ,iBAAiB,CAAC,SAAS,CAAC,MAAX,EAAmB,KAAnB,EAA0B,OAA1B,CADb,GAEJ;AAJqC,KAA7B,CAAd;AAOA,WAAO,KAAP;AACD;;AAED,SAAO,SAAS,CAAC,MAAV,CAAiB,KAAjB,CAAP;AACF;;MC+Oa,S,CAAS;AAkBpB,EAAA,WAAA,GAAmE;AAAA,QAAvD,MAAuD,uEAAF,EAAE;AAjBnE,SAAA,IAAA,GAAO,WAAP;AAEA,SAAA,IAAA,GAAO,WAAP;AAEA,SAAA,MAAA,GAA2B,IAA3B;AAEA,SAAA,KAAA,GAA0B,IAA1B;AAMA,SAAA,MAAA,GAA0B;AACxB,MAAA,IAAI,EAAE,KAAK,IADa;AAExB,MAAA,cAAc,EAAE;AAFQ,KAA1B;AAME,SAAK,MAAL,GAAc,EACZ,GAAG,KAAK,MADI;AAEZ,SAAG;AAFS,KAAd;AAKA,SAAK,IAAL,GAAY,KAAK,MAAL,CAAY,IAAxB;;AAEA,QAAI,MAAM,CAAC,cAAX,EAA2B;AACzB,MAAA,OAAO,CAAC,IAAR,CAAa,yHAAyH,KAAK,IAAI,IAA/I;AACD,KAVgE,C;;;AAajE,SAAK,OAAL,GAAe,KAAK,MAAL,CAAY,cAA3B;;AAEA,QAAI,KAAK,MAAL,CAAY,UAAhB,EAA4B;AAC1B,WAAK,OAAL,GAAe,YAAY,CAAC,iBAAiB,CAC3C,IAD2C,EAE3C,YAF2C,EAG3C;AACE,QAAA,IAAI,EAAE,KAAK;AADb,OAH2C,CAAlB,CAA3B;AAOD;;AAED,SAAK,OAAL,GAAe,YAAY,CAAC,iBAAiB,CAC3C,IAD2C,EAE3C,YAF2C,EAG3C;AACE,MAAA,IAAI,EAAE,KAAK,IADb;AAEE,MAAA,OAAO,EAAE,KAAK;AAFhB,KAH2C,CAAlB,CAAZ,IAOT,EAPN;AAQD;;AAEY,SAAN,MAAM,GAA8D;AAAA,QAA3C,MAA2C,uEAAF,EAAE;AACzE,WAAO,IAAI,SAAJ,CAAoB,MAApB,CAAP;AACD;;AAED,EAAA,SAAS,GAA+B;AAAA,QAA9B,OAA8B,uEAAF,EAAE;;;AAGtC,UAAM,SAAS,GAAG,KAAK,MAAL,EAAlB;AAEA,IAAA,SAAS,CAAC,OAAV,GAAoB,SAAS,CAAC,KAAK,OAAN,EAAe,OAAf,CAA7B;AAEA,IAAA,SAAS,CAAC,OAAV,GAAoB,YAAY,CAAC,iBAAiB,CAChD,SADgD,EAEhD,YAFgD,EAGhD;AACE,MAAA,IAAI,EAAE,SAAS,CAAC,IADlB;AAEE,MAAA,OAAO,EAAE,SAAS,CAAC;AAFrB,KAHgD,CAAlB,CAAhC;AASA,WAAO,SAAP;AACD;;AAED,EAAA,MAAM,GAAsI;AAAA,QAA/E,cAA+E,uEAAF,EAAE;AAC1I,UAAM,SAAS,GAAG,IAAI,SAAJ,CAAgD,cAAhD,CAAlB;AAEA,IAAA,SAAS,CAAC,MAAV,GAAmB,IAAnB;AAEA,SAAK,KAAL,GAAa,SAAb;AAEA,IAAA,SAAS,CAAC,IAAV,GAAiB,cAAc,CAAC,IAAf,GACb,cAAc,CAAC,IADF,GAEb,SAAS,CAAC,MAAV,CAAiB,IAFrB;;AAIA,QAAI,cAAc,CAAC,cAAnB,EAAmC;AACjC,MAAA,OAAO,CAAC,IAAR,CAAa,yHAAyH,SAAS,CAAC,IAAI,IAApJ;AACD;;AAED,IAAA,SAAS,CAAC,OAAV,GAAoB,YAAY,CAAC,iBAAiB,CAChD,SADgD,EAEhD,YAFgD,EAGhD;AACE,MAAA,IAAI,EAAE,SAAS,CAAC;AADlB,KAHgD,CAAlB,CAAhC;AAQA,IAAA,SAAS,CAAC,OAAV,GAAoB,YAAY,CAAC,iBAAiB,CAChD,SADgD,EAEhD,YAFgD,EAGhD;AACE,MAAA,IAAI,EAAE,SAAS,CAAC,IADlB;AAEE,MAAA,OAAO,EAAE,SAAS,CAAC;AAFrB,KAHgD,CAAlB,CAAhC;AASA,WAAO,SAAP;AACD;;AA7GmB;;SCpQN,c,CACd,S,EACA,K,EACA,O,EAGC;AAED,QAAM;AAAE,IAAA,IAAF;AAAQ,IAAA;AAAR,MAAe,KAArB;AACA,QAAM;AACJ,IAAA,cAAc,GAAG,MADb;AAEJ,IAAA,eAAe,GAAG;AAFd,MAGF,OAAO,IAAI,EAHf;AAIA,MAAI,IAAI,GAAG,EAAX;AACA,MAAI,SAAS,GAAG,IAAhB;AAEA,EAAA,SAAS,CAAC,YAAV,CAAuB,IAAvB,EAA6B,EAA7B,EAAiC,CAAC,IAAD,EAAO,GAAP,EAAY,MAAZ,EAAoB,KAApB,KAAyB;;;AACxD,UAAM,cAAc,GAAG,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAG,IAAI,CAAC,IAAL,CAAU,IAAb,CAAtC;;AAEA,QAAI,cAAJ,EAAoB;AAClB,UAAI,IAAI,CAAC,OAAL,IAAgB,CAAC,SAArB,EAAgC;AAC9B,QAAA,IAAI,IAAI,cAAR;AACA,QAAA,SAAS,GAAG,IAAZ;AACD;;AAED,MAAA,IAAI,IAAI,cAAc,CAAC;AACrB,QAAA,IADqB;AAErB,QAAA,GAFqB;AAGrB,QAAA,MAHqB;AAIrB,QAAA;AAJqB,OAAD,CAAtB;AAMD,KAZD,MAYO,IAAI,IAAI,CAAC,MAAT,EAAiB;AACtB,MAAA,IAAI,IAAI,CAAA,EAAA,GAAA,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,IAAN,MAAU,IAAV,IAAU,EAAA,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAU,EAAA,CAAE,KAAF,CAAQ,IAAI,CAAC,GAAL,CAAS,IAAT,EAAe,GAAf,IAAsB,GAA9B,EAAmC,EAAE,GAAG,GAAxC,CAAlB;AACA,MAAA,SAAS,GAAG,KAAZ;AACD,KAHM,MAGA,IAAI,IAAI,CAAC,OAAL,IAAgB,CAAC,SAArB,EAAgC;AACrC,MAAA,IAAI,IAAI,cAAR;AACA,MAAA,SAAS,GAAG,IAAZ;AACD;AACF,GAtBD;AAwBA,SAAO,IAAP;AACF;;SCzCgB,2B,CAA4B,M,EAAc;AACxD,SAAO,MAAM,CAAC,WAAP,CAAmB,MAAM,CAC7B,OADuB,CACf,MAAM,CAAC,KADQ,EAEvB,MAFuB,CAEhB;AAAA,QAAC,GAAG,IAAH,CAAD;AAAA,WAAc,IAAI,CAAC,IAAL,CAAU,MAAxB;AAAA,GAFgB,EAGvB,GAHuB,CAGnB;AAAA,QAAC,CAAC,IAAD,EAAO,IAAP,CAAD;AAAA,WAAkB,CAAC,IAAD,EAAO,IAAI,CAAC,IAAL,CAAU,MAAjB,CAAlB;AAAA,GAHmB,CAAnB,CAAP;AAIF;;ACHO,MAAM,uBAAuB,GAAG,SAAS,CAAC,MAAV,CAAiB;AACtD,EAAA,IAAI,EAAE,yBADgD;;AAGtD,EAAA,qBAAqB,GAAA;AACnB,WAAO,CACL,IAAI,MAAJ,CAAW;AACT,MAAA,GAAG,EAAE,IAAI,SAAJ,CAAc,yBAAd,CADI;AAET,MAAA,KAAK,EAAE;AACL,QAAA,uBAAuB,EAAE,MAAA;AACvB,gBAAM;AAAE,YAAA;AAAF,cAAa,IAAnB;AACA,gBAAM;AAAE,YAAA,KAAF;AAAS,YAAA;AAAT,cAAoB,MAA1B;AACA,gBAAM;AAAE,YAAA,GAAF;AAAO,YAAA;AAAP,cAAqB,KAA3B;AACA,gBAAM;AAAE,YAAA;AAAF,cAAa,SAAnB;AACA,gBAAM,IAAI,GAAG,IAAI,CAAC,GAAL,CAAS,GAAG,MAAM,CAAC,GAAP,CAAW,KAAK,IAAI,KAAK,CAAC,KAAN,CAAY,GAAhC,CAAZ,CAAb;AACA,gBAAM,EAAE,GAAG,IAAI,CAAC,GAAL,CAAS,GAAG,MAAM,CAAC,GAAP,CAAW,KAAK,IAAI,KAAK,CAAC,GAAN,CAAU,GAA9B,CAAZ,CAAX;AACA,gBAAM,eAAe,GAAG,2BAA2B,CAAC,MAAD,CAAnD;AACA,gBAAM,KAAK,GAAG;AAAE,YAAA,IAAF;AAAQ,YAAA;AAAR,WAAd;AAEA,iBAAO,cAAc,CAAC,GAAD,EAAM,KAAN,EAAa;AAChC,YAAA;AADgC,WAAb,CAArB;AAGD;AAdI;AAFE,KAAX,CADK,CAAP;AAqBD;;AAzBqD,CAAjB,CAAhC;;ACQA,MAAM,IAAI,GAAwB,MAAM,SAAiB;AAAA,MAAhB;AAAE,IAAA,MAAF;AAAU,IAAA;AAAV,GAAgB;AAC9D,EAAA,qBAAqB,CAAC,MAAA;AACpB,QAAI,CAAC,MAAM,CAAC,WAAZ,EAAyB;AACtB,MAAA,IAAI,CAAC,GAAL,CAAyB,IAAzB;AACF;AACF,GAJoB,CAArB;AAMA,SAAO,IAAP;AACD,CARM;;;;;;;ACAA,MAAM,YAAY,GAAgC;AAAA,MAAC,UAAD,uEAAc,KAAd;AAAA,SAAwB,SAAa;AAAA,QAAZ;AAAE,MAAA;AAAF,KAAY;AAC5F,WAAO,QAAQ,CAAC,UAAT,CAAoB,EAApB,EAAwB,UAAxB,CAAP;AACD,GAFwD;AAAA,CAAlD;;;;;;;ACCA,MAAM,UAAU,GAA8B,MAAM,SAAwB;AAAA,MAAvB;AAAE,IAAA,KAAF;AAAS,IAAA,EAAT;AAAa,IAAA;AAAb,GAAuB;AACjF,QAAM;AAAE,IAAA;AAAF,MAAgB,EAAtB;AACA,QAAM;AAAE,IAAA;AAAF,MAAa,SAAnB;;AAEA,MAAI,CAAC,QAAL,EAAe;AACb,WAAO,IAAP;AACD;;AAED,EAAA,MAAM,CAAC,OAAP,CAAe,SAAe;AAAA,QAAd;AAAE,MAAA,KAAF;AAAS,MAAA;AAAT,KAAc;AAC5B,IAAA,KAAK,CAAC,GAAN,CAAU,YAAV,CAAuB,KAAK,CAAC,GAA7B,EAAkC,GAAG,CAAC,GAAtC,EAA2C,CAAC,IAAD,EAAO,GAAP,KAAU;AACnD,UAAI,IAAI,CAAC,IAAL,CAAU,MAAd,EAAsB;AACpB;AACD;;AAED,YAAM;AAAE,QAAA,GAAF;AAAO,QAAA;AAAP,UAAmB,EAAzB;AACA,YAAM,WAAW,GAAG,GAAG,CAAC,OAAJ,CAAY,OAAO,CAAC,GAAR,CAAY,GAAZ,CAAZ,CAApB;AACA,YAAM,SAAS,GAAG,GAAG,CAAC,OAAJ,CAAY,OAAO,CAAC,GAAR,CAAY,GAAG,GAAG,IAAI,CAAC,QAAvB,CAAZ,CAAlB;AACA,YAAM,SAAS,GAAG,WAAW,CAAC,UAAZ,CAAuB,SAAvB,CAAlB;;AAEA,UAAI,CAAC,SAAL,EAAgB;AACd;AACD;;AAED,YAAM,eAAe,GAAG,UAAU,CAAC,SAAD,CAAlC;;AAEA,UAAI,IAAI,CAAC,IAAL,CAAU,WAAd,EAA2B;AACzB,cAAM;AAAE,UAAA;AAAF,YAAkB,WAAW,CAAC,MAAZ,CAAmB,cAAnB,CAAkC,WAAW,CAAC,KAAZ,EAAlC,CAAxB;AAEA,QAAA,EAAE,CAAC,aAAH,CAAiB,SAAS,CAAC,KAA3B,EAAkC,WAAlC;AACD;;AAED,UAAI,eAAe,IAAI,eAAe,KAAK,CAA3C,EAA8C;AAC5C,QAAA,EAAE,CAAC,IAAH,CAAQ,SAAR,EAAmB,eAAnB;AACD;AACF,KAzBD;AA0BD,GA3BD;AA6BA,SAAO,IAAP;AACD,CAtCM;;;;;;;ACDA,MAAM,OAAO,GAA2B,EAAE,IAAI,KAAK,IAAA;AACxD,SAAO,EAAE,CAAC,KAAD,CAAT;AACD,CAFM;;;;;;;ACCA,MAAM,mBAAmB,GAAuC,MAAM,SAAoB;AAAA,MAAnB;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,GAAmB;AAC/F,SAAOA,qBAA2B,CAAC,KAAD,EAAQ,QAAR,CAAlC;AACD,CAFM;;;;;;;SCZS,W,CAAY,U,EAA+B,M,EAAc;AACvE,MAAI,OAAO,UAAP,KAAsB,QAA1B,EAAoC;AAClC,QAAI,CAAC,MAAM,CAAC,KAAP,CAAa,UAAb,CAAL,EAA+B;AAC7B,YAAM,KAAK,CAAC,gCAAgC,UAAU,2CAA3C,CAAX;AACD;;AAED,WAAO,MAAM,CAAC,KAAP,CAAa,UAAb,CAAP;AACD;;AAED,SAAO,UAAP;AACF;;ACGO,MAAM,UAAU,GAA8B,UAAU,IAAI,SAAwB;AAAA,MAAvB;AAAE,IAAA,EAAF;AAAM,IAAA,KAAN;AAAa,IAAA;AAAb,GAAuB;AACzF,QAAM,IAAI,GAAG,WAAW,CAAC,UAAD,EAAa,KAAK,CAAC,MAAnB,CAAxB;AACA,QAAM,IAAI,GAAG,EAAE,CAAC,SAAH,CAAa,OAA1B;;AAEA,OAAK,IAAI,KAAK,GAAG,IAAI,CAAC,KAAtB,EAA6B,KAAK,GAAG,CAArC,EAAwC,KAAK,IAAI,CAAjD,EAAoD;AAClD,UAAM,IAAI,GAAG,IAAI,CAAC,IAAL,CAAU,KAAV,CAAb;;AAEA,QAAI,IAAI,CAAC,IAAL,KAAc,IAAlB,EAAwB;AACtB,UAAI,QAAJ,EAAc;AACZ,cAAM,IAAI,GAAG,IAAI,CAAC,MAAL,CAAY,KAAZ,CAAb;AACA,cAAM,EAAE,GAAG,IAAI,CAAC,KAAL,CAAW,KAAX,CAAX;AAEA,QAAA,EAAE,CAAC,MAAH,CAAU,IAAV,EAAgB,EAAhB,EAAoB,cAApB;AACD;;AAED,aAAO,IAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD,CApBM;;;;;;;ACFA,MAAM,WAAW,GAA+B,KAAK,IAAI,SAAiB;AAAA,MAAhB;AAAE,IAAA,EAAF;AAAM,IAAA;AAAN,GAAgB;AAC/E,QAAM;AAAE,IAAA,IAAF;AAAQ,IAAA;AAAR,MAAe,KAArB;;AAEA,MAAI,QAAJ,EAAc;AACZ,IAAA,EAAE,CAAC,MAAH,CAAU,IAAV,EAAgB,EAAhB;AACD;;AAED,SAAO,IAAP;AACD,CARM;;;;;;;ACCA,MAAM,eAAe,GAAmC,MAAM,UAAoB;AAAA,MAAnB;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,GAAmB;AACvF,SAAOC,iBAAuB,CAAC,KAAD,EAAQ,QAAR,CAA9B;AACD,CAFM;;;;;;;ACDA,MAAM,KAAK,GAAyB,MAAM,UAAa;AAAA,MAAZ;AAAE,IAAA;AAAF,GAAY;AAC5D,SAAO,QAAQ,CAAC,gBAAT,CAA0B,OAA1B,CAAP;AACD,CAFM;;;;;;;ACCA,MAAM,QAAQ,GAA4B,MAAM,UAAoB;AAAA,MAAnB;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,GAAmB;AACzE,SAAOC,UAAgB,CAAC,KAAD,EAAQ,QAAR,CAAvB;AACD,CAFM;;;;;;;SCZS,W,CAAY,U,EAA+B,M,EAAc;AACvE,MAAI,OAAO,UAAP,KAAsB,QAA1B,EAAoC;AAClC,QAAI,CAAC,MAAM,CAAC,KAAP,CAAa,UAAb,CAAL,EAA+B;AAC7B,YAAM,KAAK,CAAC,gCAAgC,UAAU,2CAA3C,CAAX;AACD;;AAED,WAAO,MAAM,CAAC,KAAP,CAAa,UAAb,CAAP;AACD;;AAED,SAAO,UAAP;AACF;;SCZgB,Q,CAAS,K,EAAU;AACjC,SAAO,MAAM,CAAC,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,KAA/B,MAA0C,iBAAjD;AACF;AAAA;;;;;;;SCKgB,c,CACd,O,EACA,O,EAC+C;AAAA,MAA/C,OAA+C,uEAAhB;AAAE,IAAA,MAAM,EAAE;AAAV,GAAgB;AAE/C,QAAM,IAAI,GAAG,MAAM,CAAC,IAAP,CAAY,OAAZ,CAAb;;AAEA,MAAI,CAAC,IAAI,CAAC,MAAV,EAAkB;AAChB,WAAO,IAAP;AACD;;AAED,SAAO,IAAI,CAAC,KAAL,CAAW,GAAG,IAAA;AACnB,QAAI,OAAO,CAAC,MAAZ,EAAoB;AAClB,aAAO,OAAO,CAAC,GAAD,CAAP,KAAiB,OAAO,CAAC,GAAD,CAA/B;AACD;;AAED,QAAI,QAAQ,CAAC,OAAO,CAAC,GAAD,CAAR,CAAZ,EAA4B;AAC1B,aAAO,OAAO,CAAC,GAAD,CAAP,CAAa,IAAb,CAAkB,OAAO,CAAC,GAAD,CAAzB,CAAP;AACD;;AAED,WAAO,OAAO,CAAC,GAAD,CAAP,KAAiB,OAAO,CAAC,GAAD,CAA/B;AACD,GAVM,CAAP;AAWF;;ACzBA,SAAS,aAAT,CACE,KADF,EAEE,IAFF,EAGsC;AAAA,MAApC,UAAoC,uEAAF,EAAE;AAEpC,SAAO,KAAK,CAAC,IAAN,CAAW,IAAI,IAAA;AACpB,WAAO,IAAI,CAAC,IAAL,KAAc,IAAd,IAAsB,cAAc,CAAC,IAAI,CAAC,KAAN,EAAa,UAAb,CAA3C;AACD,GAFM,CAAP;AAGD;;AAED,SAAS,WAAT,CACE,KADF,EAEE,IAFF,EAGsC;AAAA,MAApC,UAAoC,uEAAF,EAAE;AAEpC,SAAO,CAAC,CAAC,aAAa,CAAC,KAAD,EAAQ,IAAR,EAAc,UAAd,CAAtB;AACD;;SAEe,Y,CACd,I,EACA,I,EACoC;AAAA,MAApC,UAAoC,uEAAF,EAAE;;AAEpC,MAAI,CAAC,IAAD,IAAS,CAAC,IAAd,EAAoB;AAClB;AACD;;AAED,QAAM,KAAK,GAAG,IAAI,CAAC,MAAL,CAAY,UAAZ,CAAuB,IAAI,CAAC,YAA5B,CAAd;;AAEA,MAAI,CAAC,KAAK,CAAC,IAAX,EAAiB;AACf;AACD;;AAED,QAAM,IAAI,GAAG,aAAa,CAAC,KAAK,CAAC,IAAN,CAAW,KAAZ,EAAmB,IAAnB,EAAyB,UAAzB,CAA1B;;AAEA,MAAI,CAAC,IAAL,EAAW;AACT;AACD;;AAED,MAAI,UAAU,GAAG,IAAI,CAAC,KAAL,EAAjB;AACA,MAAI,QAAQ,GAAG,IAAI,CAAC,KAAL,KAAe,KAAK,CAAC,MAApC;AACA,MAAI,QAAQ,GAAG,UAAU,GAAG,CAA5B;AACA,MAAI,MAAM,GAAG,QAAQ,GAAG,KAAK,CAAC,IAAN,CAAW,QAAnC;AAEA,EAAA,aAAa,CAAC,KAAK,CAAC,IAAN,CAAW,KAAZ,EAAmB,IAAnB,EAAyB,UAAzB,CAAb;;AAEA,SAAO,UAAU,GAAG,CAAb,IAAkB,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,MAAL,CAAY,KAAZ,CAAkB,UAAU,GAAG,CAA/B,EAAkC,KAA/C,CAAzB,EAAgF;AAC9E,IAAA,UAAU,IAAI,CAAd;AACA,IAAA,QAAQ,IAAI,IAAI,CAAC,MAAL,CAAY,KAAZ,CAAkB,UAAlB,EAA8B,QAA1C;AACD;;AAED,SACE,QAAQ,GAAG,IAAI,CAAC,MAAL,CAAY,UAAvB,IACG,WAAW,CAAC,IAAI,CAAC,MAAL,CAAY,KAAZ,CAAkB,QAAlB,EAA4B,KAA7B,EAAoC,IAApC,EAA0C,UAA1C,CAFhB,EAGE;AACA,IAAA,MAAM,IAAI,IAAI,CAAC,MAAL,CAAY,KAAZ,CAAkB,QAAlB,EAA4B,QAAtC;AACA,IAAA,QAAQ,IAAI,CAAZ;AACD;;AAED,SAAO;AACL,IAAA,IAAI,EAAE,QADD;AAEL,IAAA,EAAE,EAAE;AAFC,GAAP;AAIF;;AClDO,MAAM,eAAe,GAAmC,UAAC,UAAD;AAAA,MAAa,UAAb,uEAA0B,EAA1B;AAAA,SAAiC,UAAwB;AAAA,QAAvB;AAAE,MAAA,EAAF;AAAM,MAAA,KAAN;AAAa,MAAA;AAAb,KAAuB;AACtH,UAAM,IAAI,GAAG,WAAW,CAAC,UAAD,EAAa,KAAK,CAAC,MAAnB,CAAxB;AACA,UAAM;AAAE,MAAA,GAAF;AAAO,MAAA;AAAP,QAAqB,EAA3B;AACA,UAAM;AAAE,MAAA,KAAF;AAAS,MAAA,IAAT;AAAe,MAAA;AAAf,QAAsB,SAA5B;;AAEA,QAAI,QAAJ,EAAc;AACZ,YAAM,KAAK,GAAG,YAAY,CAAC,KAAD,EAAQ,IAAR,EAAc,UAAd,CAA1B;;AAEA,UAAI,KAAK,IAAI,KAAK,CAAC,IAAN,IAAc,IAAvB,IAA+B,KAAK,CAAC,EAAN,IAAY,EAA/C,EAAmD;AACjD,cAAM,YAAY,GAAG,aAAa,CAAC,MAAd,CAAqB,GAArB,EAA0B,KAAK,CAAC,IAAhC,EAAsC,KAAK,CAAC,EAA5C,CAArB;AAEA,QAAA,EAAE,CAAC,YAAH,CAAgB,YAAhB;AACD;AACF;;AAED,WAAO,IAAP;AACD,GAhB8D;AAAA,CAAxD;;;;;;;ACJA,MAAM,KAAK,GAAyB,QAAQ,IAAI,KAAK,IAAA;AAC1D,QAAM,KAAK,GAAG,OAAO,QAAP,KAAoB,UAApB,GACV,QAAQ,CAAC,KAAD,CADE,GAEV,QAFJ;;AAIA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,IAAI,CAAvC,EAA0C;AACxC,QAAI,KAAK,CAAC,CAAD,CAAL,CAAS,KAAT,CAAJ,EAAqB;AACnB,aAAO,IAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD,CAZM;;;;;;;SCbS,O,CAAQ,K,EAAU;;;AAChC,MAAI,CAAA,CAAA,EAAA,GAAA,KAAK,CAAC,WAAN,MAAiB,IAAjB,IAAiB,EAAA,KAAA,KAAA,CAAjB,GAAiB,KAAA,CAAjB,GAAiB,EAAA,CAAE,QAAF,GAAa,SAAb,CAAuB,CAAvB,EAA0B,CAA1B,CAAjB,MAAkD,OAAtD,EAA+D;AAC7D,WAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACF;;SCJgB,Q,CAAS,K,EAAU;AACjC,SACE,KAAK,IACF,OAAO,KAAP,KAAiB,QADpB,IAEG,CAAC,KAAK,CAAC,OAAN,CAAc,KAAd,CAFJ,IAGG,CAAC,OAAO,CAAC,KAAD,CAJb;AAMF;;SCNgB,e,CAAgB,K,EAAc;AAC5C,SAAO,QAAQ,CAAC,KAAD,CAAR,IAAmB,KAAK,YAAY,aAA3C;AACF;;SCLgB,K,GAAK;AACnB,SAAO,CACL,gBADK,EAEL,kBAFK,EAGL,gBAHK,EAIL,MAJK,EAKL,QALK,EAML,MANK,EAOL,QAPK,CAOI,SAAS,CAAC,QAPd,E;AAAA,KASH,SAAS,CAAC,SAAV,CAAoB,QAApB,CAA6B,KAA7B,KAAuC,gBAAgB,QAT3D;AAUF;;SCXgB,M,GAAkC;AAAA,MAA3B,KAA2B,uEAAnB,CAAmB;AAAA,MAAhB,GAAgB,uEAAV,CAAU;AAAA,MAAP,GAAO,uEAAD,CAAC;AAChD,SAAO,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,GAAL,CAAS,KAAT,EAAgB,GAAhB,CAAT,EAA+B,GAA/B,CAAP;AACF;;SCGgB,oB,CACd,G,EAC8B;AAAA,MAA9B,QAA8B,uEAAJ,IAAI;;AAG9B,MAAI,CAAC,QAAL,EAAe;AACb,WAAO,IAAP;AACD;;AAED,MAAI,QAAQ,KAAK,OAAb,IAAwB,QAAQ,KAAK,IAAzC,EAA+C;AAC7C,WAAO,SAAS,CAAC,OAAV,CAAkB,GAAlB,CAAP;AACD;;AAED,MAAI,QAAQ,KAAK,KAAjB,EAAwB;AACtB,WAAO,SAAS,CAAC,KAAV,CAAgB,GAAhB,CAAP;AACD;;AAED,MAAI,QAAQ,KAAK,KAAjB,EAAwB;AACtB,WAAO,aAAa,CAAC,MAAd,CAAqB,GAArB,EAA0B,CAA1B,EAA6B,GAAG,CAAC,OAAJ,CAAY,IAAzC,CAAP;AACD,GAjB6B,C;;;AAoB9B,QAAM,MAAM,GAAG,SAAS,CAAC,OAAV,CAAkB,GAAlB,EAAuB,IAAtC;AACA,QAAM,MAAM,GAAG,SAAS,CAAC,KAAV,CAAgB,GAAhB,EAAqB,EAApC;AACA,QAAM,YAAY,GAAG,MAAM,CAAC,QAAD,EAAW,MAAX,EAAmB,MAAnB,CAA3B;AACA,QAAM,WAAW,GAAG,MAAM,CAAC,QAAD,EAAW,MAAX,EAAmB,MAAnB,CAA1B;AAEA,SAAO,aAAa,CAAC,MAAd,CAAqB,GAArB,EAA0B,YAA1B,EAAwC,WAAxC,CAAP;AACF;;ACZO,MAAM,KAAK,GAAyB;AAAA,MAAC,QAAD,uEAAY,IAAZ;AAAA,MAAkB,OAAlB;AAAA,SAA8B,UAKxE;AAAA,QALyE;AACxE,MAAA,MADwE;AAExE,MAAA,IAFwE;AAGxE,MAAA,EAHwE;AAIxE,MAAA;AAJwE,KAKzE;AACC,IAAA,OAAO,GAAG;AACR,MAAA,cAAc,EAAE,IADR;AAER,SAAG;AAFK,KAAV;;AAKA,UAAM,YAAY,GAAG,MAAA;;;AAGnB,UAAI,KAAK,EAAT,EAAa;AACV,QAAA,IAAI,CAAC,GAAL,CAAyB,KAAzB;AACF,OALkB,C;;;;AASnB,MAAA,qBAAqB,CAAC,MAAA;AACpB,YAAI,CAAC,MAAM,CAAC,WAAZ,EAAyB;AACvB,UAAA,IAAI,CAAC,KAAL;;AAEA,cAAI,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,cAAb,EAA6B;AAC3B,YAAA,MAAM,CAAC,QAAP,CAAgB,cAAhB;AACD;AACF;AACF,OARoB,CAArB;AASD,KAlBD;;AAoBA,QAAK,IAAI,CAAC,QAAL,MAAmB,QAAQ,KAAK,IAAjC,IAA0C,QAAQ,KAAK,KAA3D,EAAkE;AAChE,aAAO,IAAP;AACD,KA5BF,C;;;AA+BC,QAAI,QAAQ,IAAI,QAAQ,KAAK,IAAzB,IAAiC,CAAC,eAAe,CAAC,MAAM,CAAC,KAAP,CAAa,SAAd,CAArD,EAA+E;AAC7E,MAAA,YAAY;AACZ,aAAO,IAAP;AACD;;AAED,UAAM,SAAS,GAAG,oBAAoB,CAAC,MAAM,CAAC,KAAP,CAAa,GAAd,EAAmB,QAAnB,CAApB,IAAoD,MAAM,CAAC,KAAP,CAAa,SAAnF;AACA,UAAM,eAAe,GAAG,MAAM,CAAC,KAAP,CAAa,SAAb,CAAuB,EAAvB,CAA0B,SAA1B,CAAxB;;AAEA,QAAI,QAAJ,EAAc;AACZ,UAAI,CAAC,eAAL,EAAsB;AACpB,QAAA,EAAE,CAAC,YAAH,CAAgB,SAAhB;AACD,OAHW,C;;;;AAOZ,UAAI,eAAe,IAAI,EAAE,CAAC,WAA1B,EAAuC;AACrC,QAAA,EAAE,CAAC,cAAH,CAAkB,EAAE,CAAC,WAArB;AACD;;AAED,MAAA,YAAY;AACb;;AAED,WAAO,IAAP;AACD,GA3D0C;AAAA,CAApC;;;;;;;ACAA,MAAM,OAAO,GAA2B,CAAC,KAAD,EAAQ,EAAR,KAAe,KAAK,IAAA;AACjE,SAAO,KAAK,CAAC,KAAN,CAAY,CAAC,IAAD,EAAO,KAAP,KAAiB,EAAE,CAAC,IAAD,EAAO,EAAE,GAAG,KAAL;AAAY,IAAA;AAAZ,GAAP,CAA/B,CAAP;AACD,CAFM;;;;;;;ACDA,MAAM,aAAa,GAAiC,CAAC,KAAD,EAAQ,OAAR,KAAoB,UAAiB;AAAA,MAAhB;AAAE,IAAA,EAAF;AAAM,IAAA;AAAN,GAAgB;AAC9F,SAAO,QAAQ,CAAC,eAAT,CAAyB;AAAE,IAAA,IAAI,EAAE,EAAE,CAAC,SAAH,CAAa,IAArB;AAA2B,IAAA,EAAE,EAAE,EAAE,CAAC,SAAH,CAAa;AAA5C,GAAzB,EAA2E,KAA3E,EAAkF,OAAlF,CAAP;AACD,CAFM;;;;;;;SCpBS,iB,CAAkB,K,EAAa;;AAE7C,QAAM,YAAY,GAAG,SAAS,KAAK,SAAnC;AAEA,SAAO,IAAI,MAAM,CAAC,SAAX,GAAuB,eAAvB,CAAuC,YAAvC,EAAqD,WAArD,EAAkE,IAAzE;AACF;;SCUgB,qB,CACd,O,EACA,M,EACA,O,EAAsC;AAEtC,EAAA,OAAO,GAAG;AACR,IAAA,KAAK,EAAE,IADC;AAER,IAAA,YAAY,EAAE,EAFN;AAGR,OAAG;AAHK,GAAV;;AAMA,MAAI,OAAO,OAAP,KAAmB,QAAnB,IAA+B,OAAO,KAAK,IAA/C,EAAqD;AACnD,QAAI;AACF,UAAI,KAAK,CAAC,OAAN,CAAc,OAAd,CAAJ,EAA4B;AAC1B,eAAO,QAAQ,CAAC,SAAT,CAAmB,OAAO,CAAC,GAAR,CAAY,IAAI,IAAI,MAAM,CAAC,YAAP,CAAoB,IAApB,CAApB,CAAnB,CAAP;AACD;;AAED,aAAO,MAAM,CAAC,YAAP,CAAoB,OAApB,CAAP;AACD,KAND,CAME,OAAO,KAAP,EAAc;AACd,MAAA,OAAO,CAAC,IAAR,CACE,iCADF,EAEE,eAFF,EAGE,OAHF,EAIE,QAJF,EAKE,KALF;AAQA,aAAO,qBAAqB,CAAC,EAAD,EAAK,MAAL,EAAa,OAAb,CAA5B;AACD;AACF;;AAED,MAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,UAAM,MAAM,GAAG,SAAS,CAAC,UAAV,CAAqB,MAArB,CAAf;AAEA,WAAO,OAAO,CAAC,KAAR,GACH,MAAM,CAAC,UAAP,CAAkB,iBAAiB,CAAC,OAAD,CAAnC,EAA8C,OAAO,CAAC,YAAtD,EAAoE,OADjE,GAEH,MAAM,CAAC,KAAP,CAAa,iBAAiB,CAAC,OAAD,CAA9B,EAAyC,OAAO,CAAC,YAAjD,CAFJ;AAGD;;AAED,SAAO,qBAAqB,CAAC,EAAD,EAAK,MAAL,EAAa,OAAb,CAA5B;AACF,C,CCpDA;;;SACgB,uB,CAAwB,E,EAAiB,Q,EAAkB,I,EAAY;AACrF,QAAM,IAAI,GAAG,EAAE,CAAC,KAAH,CAAS,MAAT,GAAkB,CAA/B;;AAEA,MAAI,IAAI,GAAG,QAAX,EAAqB;AACnB;AACD;;AAED,QAAM,IAAI,GAAG,EAAE,CAAC,KAAH,CAAS,IAAT,CAAb;;AAEA,MAAI,EAAE,IAAI,YAAY,WAAhB,IAA+B,IAAI,YAAY,iBAAjD,CAAJ,EAAyE;AACvE;AACD;;AAED,QAAM,GAAG,GAAG,EAAE,CAAC,OAAH,CAAW,IAAX,CAAgB,IAAhB,CAAZ;AACA,MAAI,GAAG,GAAG,CAAV;AAEA,EAAA,GAAG,CAAC,OAAJ,CAAY,CAAC,KAAD,EAAQ,GAAR,EAAa,QAAb,EAAuB,KAAvB,KAA4B;AACtC,QAAI,GAAG,KAAK,CAAZ,EAAe;AACb,MAAA,GAAG,GAAG,KAAN;AACD;AACF,GAJD;AAMA,EAAA,EAAE,CAAC,YAAH,CAAgB,SAAS,CAAC,IAAV,CAAe,EAAE,CAAC,GAAH,CAAO,OAAP,CAAe,GAAf,CAAf,EAAoC,IAApC,CAAhB;AACF;;AAAA,MCAM,UAAU,GAAI,cAAD,IAA2C;AAC5D,SAAO,cAAc,CAAC,QAAf,GAA0B,UAA1B,CAAqC,GAArC,CAAP;AACD,CDFD;;ACIO,MAAM,eAAe,GAAmC,CAAC,QAAD,EAAW,KAAX,EAAkB,OAAlB,KAA8B,UAAyB;AAAA,MAAxB;AAAE,IAAA,EAAF;AAAM,IAAA,QAAN;AAAgB,IAAA;AAAhB,GAAwB;;AACpH,MAAI,QAAJ,EAAc;AACZ,IAAA,OAAO,GAAG;AACR,MAAA,YAAY,EAAE,EADN;AAER,MAAA,eAAe,EAAE,IAFT;AAGR,SAAG;AAHK,KAAV;AAMA,UAAM,OAAO,GAAG,qBAAqB,CAAC,KAAD,EAAQ,MAAM,CAAC,MAAf,EAAuB;AAC1D,MAAA,YAAY,EAAE;AACZ,QAAA,kBAAkB,EAAE,MADR;AAEZ,WAAG,OAAO,CAAC;AAFC;AAD4C,KAAvB,CAArC,CAPY,C;;AAeZ,QAAI,OAAO,CAAC,QAAR,OAAuB,IAA3B,EAAiC;AAC/B,aAAO,IAAP;AACD;;AAED,QAAI;AAAE,MAAA,IAAF;AAAQ,MAAA;AAAR,QAAe,OAAO,QAAP,KAAoB,QAApB,GACf;AAAE,MAAA,IAAI,EAAE,QAAR;AAAkB,MAAA,EAAE,EAAE;AAAtB,KADe,GAEf,QAFJ;AAIA,QAAI,kBAAkB,GAAG,IAAzB;AACA,UAAM,KAAK,GAAG,UAAU,CAAC,OAAD,CAAV,GACV,OADU,GAEV,CAAC,OAAD,CAFJ;AAIA,IAAA,KAAK,CAAC,OAAN,CAAc,IAAI,IAAA;;AAEhB,MAAA,IAAI,CAAC,KAAL;AAEA,MAAA,kBAAkB,GAAG,kBAAkB,GACnC,IAAI,CAAC,OAD8B,GAEnC,KAFJ;AAGD,KAPD,EA5BY,C;;;;;;AA0CZ,QAAI,IAAI,KAAK,EAAT,IAAe,kBAAnB,EAAuC;AACrC,YAAM;AAAE,QAAA;AAAF,UAAa,EAAE,CAAC,GAAH,CAAO,OAAP,CAAe,IAAf,CAAnB;AACA,YAAM,gBAAgB,GAAG,MAAM,CAAC,WAAP,IACpB,CAAC,MAAM,CAAC,IAAP,CAAY,IAAZ,CAAiB,IADE,IAEpB,CAAC,MAAM,CAAC,UAFb;;AAIA,UAAI,gBAAJ,EAAsB;AACpB,QAAA,IAAI,IAAI,CAAR;AACA,QAAA,EAAE,IAAI,CAAN;AACD;AACF;;AAED,IAAA,EAAE,CAAC,WAAH,CAAe,IAAf,EAAqB,EAArB,EAAyB,OAAzB,EAtDY,C;;AAyDZ,QAAI,OAAO,CAAC,eAAZ,EAA6B;AAC3B,MAAA,uBAAuB,CAAC,EAAD,EAAK,EAAE,CAAC,KAAH,CAAS,MAAT,GAAkB,CAAvB,EAA0B,CAAC,CAA3B,CAAvB;AACD;AACF;;AAED,SAAO,IAAP;AACD,CAhEM;;;;;;;ACjBA,MAAM,YAAY,GAAgC,MAAM,UAAoB;AAAA,MAAnB;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,GAAmB;AACjF,SAAOC,cAAoB,CAAC,KAAD,EAAQ,QAAR,CAA3B;AACD,CAFM;;;;;;;ACAA,MAAM,WAAW,GAA+B,MAAM,UAAoB;AAAA,MAAnB;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,GAAmB;AAC/E,SAAOC,aAAmB,CAAC,KAAD,EAAQ,QAAR,CAA1B;AACD,CAFM;;;;;;ACZP,MAAM,GAAG,GAAG,OAAO,SAAP,KAAqB,WAArB,GAAmC,MAAM,IAAN,CAAW,SAAS,CAAC,QAArB,CAAnC,GAAoE,KAAhF;;AAEA,SAAS,gBAAT,CAA0B,IAA1B,EAAsC;AACpC,QAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,QAAX,CAAd;AACA,MAAI,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,MAAN,GAAe,CAAhB,CAAlB;;AAEA,MAAI,MAAM,KAAK,OAAf,EAAwB;AACtB,IAAA,MAAM,GAAG,GAAT;AACD;;AAED,MAAI,GAAJ;AACA,MAAI,IAAJ;AACA,MAAI,KAAJ;AACA,MAAI,IAAJ;;AAEA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAAN,GAAe,CAAnC,EAAsC,CAAC,IAAI,CAA3C,EAA8C;AAC5C,UAAM,GAAG,GAAG,KAAK,CAAC,CAAD,CAAjB;;AAEA,QAAI,kBAAkB,IAAlB,CAAuB,GAAvB,CAAJ,EAAiC;AAC/B,MAAA,IAAI,GAAG,IAAP;AACD,KAFD,MAEO,IAAI,YAAY,IAAZ,CAAiB,GAAjB,CAAJ,EAA2B;AAChC,MAAA,GAAG,GAAG,IAAN;AACD,KAFM,MAEA,IAAI,sBAAsB,IAAtB,CAA2B,GAA3B,CAAJ,EAAqC;AAC1C,MAAA,IAAI,GAAG,IAAP;AACD,KAFM,MAEA,IAAI,cAAc,IAAd,CAAmB,GAAnB,CAAJ,EAA6B;AAClC,MAAA,KAAK,GAAG,IAAR;AACD,KAFM,MAEA,IAAI,SAAS,IAAT,CAAc,GAAd,CAAJ,EAAwB;AAC7B,UAAI,GAAJ,EAAS;AACP,QAAA,IAAI,GAAG,IAAP;AACD,OAFD,MAEO;AACL,QAAA,IAAI,GAAG,IAAP;AACD;AACF,KANM,MAMA;AACL,YAAM,IAAI,KAAJ,CAAU,+BAA+B,GAAG,EAA5C,CAAN;AACD;AACF;;AAED,MAAI,GAAJ,EAAS;AACP,IAAA,MAAM,GAAG,OAAO,MAAM,EAAtB;AACD;;AAED,MAAI,IAAJ,EAAU;AACR,IAAA,MAAM,GAAG,QAAQ,MAAM,EAAvB;AACD;;AAED,MAAI,IAAJ,EAAU;AACR,IAAA,MAAM,GAAG,QAAQ,MAAM,EAAvB;AACD;;AAED,MAAI,KAAJ,EAAW;AACT,IAAA,MAAM,GAAG,SAAS,MAAM,EAAxB;AACD;;AAED,SAAO,MAAP;AACD;;AAaM,MAAM,gBAAgB,GAAoC,IAAI,IAAI,UAKxE;AAAA,MALyE;AACxE,IAAA,MADwE;AAExE,IAAA,IAFwE;AAGxE,IAAA,EAHwE;AAIxE,IAAA;AAJwE,GAKzE;AACC,QAAM,IAAI,GAAG,gBAAgB,CAAC,IAAD,CAAhB,CAAuB,KAAvB,CAA6B,QAA7B,CAAb;AACA,QAAM,GAAG,GAAG,IAAI,CAAC,IAAL,CAAU,IAAI,IAAI,CAAC,CAAC,KAAD,EAAQ,MAAR,EAAgB,MAAhB,EAAwB,OAAxB,EAAiC,QAAjC,CAA0C,IAA1C,CAAnB,CAAZ;AACA,QAAM,KAAK,GAAG,IAAI,aAAJ,CAAkB,SAAlB,EAA6B;AACzC,IAAA,GAAG,EAAE,GAAG,KAAK,OAAR,GACD,GADC,GAED,GAHqC;AAIzC,IAAA,MAAM,EAAE,IAAI,CAAC,QAAL,CAAc,KAAd,CAJiC;AAKzC,IAAA,OAAO,EAAE,IAAI,CAAC,QAAL,CAAc,MAAd,CALgC;AAMzC,IAAA,OAAO,EAAE,IAAI,CAAC,QAAL,CAAc,MAAd,CANgC;AAOzC,IAAA,QAAQ,EAAE,IAAI,CAAC,QAAL,CAAc,OAAd,CAP+B;AAQzC,IAAA,OAAO,EAAE,IARgC;AASzC,IAAA,UAAU,EAAE;AAT6B,GAA7B,CAAd;AAYA,QAAM,mBAAmB,GAAG,MAAM,CAAC,kBAAP,CAA0B,MAAA;AACpD,IAAA,IAAI,CAAC,QAAL,CAAc,eAAd,EAA+B,CAAC,IAAI,CAAC,CAAC,IAAD,EAAO,KAAP,CAArC;AACD,GAF2B,CAA5B;AAIA,EAAA,mBAAmB,KAAA,IAAnB,IAAA,mBAAmB,KAAA,KAAA,CAAnB,GAAmB,KAAA,CAAnB,GAAA,mBAAmB,CAAE,KAArB,CAA2B,OAA3B,CAAmC,IAAI,IAAA;AACrC,UAAM,OAAO,GAAG,IAAI,CAAC,GAAL,CAAS,EAAE,CAAC,OAAZ,CAAhB;;AAEA,QAAI,OAAO,IAAI,QAAf,EAAyB;AACvB,MAAA,EAAE,CAAC,SAAH,CAAa,OAAb;AACD;AACF,GAND,CAAA;AAQA,SAAO,IAAP;AACD,CAjCM;;;;;;;SC/DS,Y,CACd,K,EACA,U,EACoC;AAAA,MAApC,UAAoC,uEAAF,EAAE;AAEpC,QAAM;AAAE,IAAA,IAAF;AAAQ,IAAA,EAAR;AAAY,IAAA;AAAZ,MAAsB,KAAK,CAAC,SAAlC;AACA,QAAM,IAAI,GAAG,UAAU,GACnB,WAAW,CAAC,UAAD,EAAa,KAAK,CAAC,MAAnB,CADQ,GAEnB,IAFJ;AAIA,QAAM,UAAU,GAAgB,EAAhC;AAEA,EAAA,KAAK,CAAC,GAAN,CAAU,YAAV,CAAuB,IAAvB,EAA6B,EAA7B,EAAiC,CAAC,IAAD,EAAO,GAAP,KAAU;AACzC,QAAI,IAAI,CAAC,MAAT,EAAiB;AACf;AACD;;AAED,UAAM,YAAY,GAAG,IAAI,CAAC,GAAL,CAAS,IAAT,EAAe,GAAf,CAArB;AACA,UAAM,UAAU,GAAG,IAAI,CAAC,GAAL,CAAS,EAAT,EAAa,GAAG,GAAG,IAAI,CAAC,QAAxB,CAAnB;AAEA,IAAA,UAAU,CAAC,IAAX,CAAgB;AACd,MAAA,IADc;AAEd,MAAA,IAAI,EAAE,YAFQ;AAGd,MAAA,EAAE,EAAE;AAHU,KAAhB;AAKD,GAbD;AAeA,QAAM,cAAc,GAAG,EAAE,GAAG,IAA5B;AACA,QAAM,iBAAiB,GAAG,UAAU,CACjC,MADuB,CAChB,SAAS,IAAA;AACf,QAAI,CAAC,IAAL,EAAW;AACT,aAAO,IAAP;AACD;;AAED,WAAO,IAAI,CAAC,IAAL,KAAc,SAAS,CAAC,IAAV,CAAe,IAAf,CAAoB,IAAzC;AACD,GAPuB,EAQvB,MARuB,CAQhB,SAAS,IAAI,cAAc,CAAC,SAAS,CAAC,IAAV,CAAe,KAAhB,EAAuB,UAAvB,EAAmC;AAAE,IAAA,MAAM,EAAE;AAAV,GAAnC,CARX,CAA1B;;AAUA,MAAI,KAAJ,EAAW;AACT,WAAO,CAAC,CAAC,iBAAiB,CAAC,MAA3B;AACD;;AAED,QAAM,KAAK,GAAG,iBAAiB,CAC5B,MADW,CACJ,CAAC,GAAD,EAAM,SAAN,KAAoB,GAAG,GAAG,SAAS,CAAC,EAAhB,GAAqB,SAAS,CAAC,IAD/C,EACqD,CADrD,CAAd;AAGA,SAAO,KAAK,IAAI,cAAhB;AACF;;ACnCO,MAAM,IAAI,GAAwB,UAAC,UAAD;AAAA,MAAa,UAAb,uEAA0B,EAA1B;AAAA,SAAiC,UAAoB;AAAA,QAAnB;AAAE,MAAA,KAAF;AAAS,MAAA;AAAT,KAAmB;AAC5F,UAAM,IAAI,GAAG,WAAW,CAAC,UAAD,EAAa,KAAK,CAAC,MAAnB,CAAxB;AACA,UAAM,QAAQ,GAAG,YAAY,CAAC,KAAD,EAAQ,IAAR,EAAc,UAAd,CAA7B;;AAEA,QAAI,CAAC,QAAL,EAAe;AACb,aAAO,KAAP;AACD;;AAED,WAAOC,MAAY,CAAC,KAAD,EAAQ,QAAR,CAAnB;AACD,GATwC;AAAA,CAAlC;;;;;;;ACHA,MAAM,cAAc,GAAkC,MAAM,UAAoB;AAAA,MAAnB;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,GAAmB;AACrF,SAAOC,gBAAsB,CAAC,KAAD,EAAQ,QAAR,CAA7B;AACD,CAFM;;;;;;;ACEA,MAAM,YAAY,GAAgC,UAAU,IAAI,UAAoB;AAAA,MAAnB;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,GAAmB;AACzF,QAAM,IAAI,GAAG,WAAW,CAAC,UAAD,EAAa,KAAK,CAAC,MAAnB,CAAxB;AAEA,SAAOC,cAAoB,CAAC,IAAD,CAApBA,CAA2B,KAA3BA,EAAkC,QAAlCA,CAAP;AACD,CAJM;;;;;;;ACFA,MAAM,aAAa,GAAiC,MAAM,UAAoB;AAAA,MAAnB;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,GAAmB;AACnF,SAAOC,eAAqB,CAAC,KAAD,EAAQ,QAAR,CAA5B;AACD,CAFM;;;;;;;SCZS,uB,CAAwB,I,EAAc,M,EAAc;AAClE,MAAI,MAAM,CAAC,KAAP,CAAa,IAAb,CAAJ,EAAwB;AACtB,WAAO,MAAP;AACD;;AAED,MAAI,MAAM,CAAC,KAAP,CAAa,IAAb,CAAJ,EAAwB;AACtB,WAAO,MAAP;AACD;;AAED,SAAO,IAAP;AACF;ACZA;;;;;;;SAKgB,W,CAAY,G,EAA0B,W,EAA8B;AAClF,QAAM,KAAK,GAAG,OAAO,WAAP,KAAuB,QAAvB,GACV,CAAC,WAAD,CADU,GAEV,WAFJ;AAIA,SAAO,MAAM,CACV,IADI,CACC,GADD,EAEJ,MAFI,CAEG,CAAC,MAAD,EAA8B,IAA9B,KAAkC;AACxC,QAAI,CAAC,KAAK,CAAC,QAAN,CAAe,IAAf,CAAL,EAA2B;AACzB,MAAA,MAAM,CAAC,IAAD,CAAN,GAAe,GAAG,CAAC,IAAD,CAAlB;AACD;;AAED,WAAO,MAAP;AACD,GARI,EAQF,EARE,CAAP;AASF;;ACDO,MAAM,eAAe,GAAmC,CAAC,UAAD,EAAa,UAAb,KAA4B,UAAwB;AAAA,MAAvB;AAAE,IAAA,EAAF;AAAM,IAAA,KAAN;AAAa,IAAA;AAAb,GAAuB;AACjH,MAAI,QAAQ,GAAoB,IAAhC;AACA,MAAI,QAAQ,GAAoB,IAAhC;AAEA,QAAM,UAAU,GAAG,uBAAuB,CACxC,OAAO,UAAP,KAAsB,QAAtB,GACI,UADJ,GAEI,UAAU,CAAC,IAHyB,EAIxC,KAAK,CAAC,MAJkC,CAA1C;;AAOA,MAAI,CAAC,UAAL,EAAiB;AACf,WAAO,KAAP;AACD;;AAED,MAAI,UAAU,KAAK,MAAnB,EAA2B;AACzB,IAAA,QAAQ,GAAG,WAAW,CAAC,UAAD,EAAyB,KAAK,CAAC,MAA/B,CAAtB;AACD;;AAED,MAAI,UAAU,KAAK,MAAnB,EAA2B;AACzB,IAAA,QAAQ,GAAG,WAAW,CAAC,UAAD,EAAyB,KAAK,CAAC,MAA/B,CAAtB;AACD;;AAED,MAAI,QAAJ,EAAc;AACZ,IAAA,EAAE,CAAC,SAAH,CAAa,MAAb,CAAoB,OAApB,CAA4B,KAAK,IAAA;AAC/B,MAAA,KAAK,CAAC,GAAN,CAAU,YAAV,CAAuB,KAAK,CAAC,KAAN,CAAY,GAAnC,EAAwC,KAAK,CAAC,GAAN,CAAU,GAAlD,EAAuD,CAAC,IAAD,EAAO,GAAP,KAAU;AAC/D,YAAI,QAAQ,IAAI,QAAQ,KAAK,IAAI,CAAC,IAAlC,EAAwC;AACtC,UAAA,EAAE,CAAC,aAAH,CAAiB,GAAjB,EAAsB,SAAtB,EAAiC,WAAW,CAAC,IAAI,CAAC,KAAN,EAAa,UAAb,CAA5C;AACD;;AAED,YAAI,QAAQ,IAAI,IAAI,CAAC,KAAL,CAAW,MAA3B,EAAmC;AACjC,UAAA,IAAI,CAAC,KAAL,CAAW,OAAX,CAAmB,IAAI,IAAA;AACrB,gBAAI,QAAQ,KAAK,IAAI,CAAC,IAAtB,EAA4B;AAC1B,cAAA,EAAE,CAAC,OAAH,CAAW,GAAX,EAAgB,GAAG,GAAG,IAAI,CAAC,QAA3B,EAAqC,QAAQ,CAAC,MAAT,CAAgB,WAAW,CAAC,IAAI,CAAC,KAAN,EAAa,UAAb,CAA3B,CAArC;AACD;AACF,WAJD;AAKD;AACF,OAZD;AAaD,KAdD;AAeD;;AAED,SAAO,IAAP;AACD,CA1CM;;;;;;;ACLA,MAAM,cAAc,GAAkC,MAAM,UAAiB;AAAA,MAAhB;AAAE,IAAA,EAAF;AAAM,IAAA;AAAN,GAAgB;;AAClF,MAAI,QAAJ,EAAc;AACZ,IAAA,EAAE,CAAC,cAAH;AACD;;AAED,SAAO,IAAP;AACD,CANM;;;;;;;ACAA,MAAM,SAAS,GAA6B,MAAM,UAAiB;AAAA,MAAhB;AAAE,IAAA,EAAF;AAAM,IAAA;AAAN,GAAgB;AACxE,SAAO,QAAQ,CAAC,gBAAT,CAA0B;AAC/B,IAAA,IAAI,EAAE,CADyB;AAE/B,IAAA,EAAE,EAAE,EAAE,CAAC,GAAH,CAAO,OAAP,CAAe;AAFY,GAA1B,CAAP;AAID,CALM;;;;;;;ACCA,MAAM,kBAAkB,GAAsC,MAAM,UAAoB;AAAA,MAAnB;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,GAAmB;AAC7F,SAAOC,oBAA0B,CAAC,KAAD,EAAQ,QAAR,CAAjC;AACD,CAFM;;;;;;;ACAA,MAAM,iBAAiB,GAAqC,MAAM,UAAoB;AAAA,MAAnB;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,GAAmB;AAC3F,SAAOC,mBAAyB,CAAC,KAAD,EAAQ,QAAR,CAAhC;AACD,CAFM;;;;;;;ACAA,MAAM,gBAAgB,GAAoC,MAAM,UAAoB;AAAA,MAAnB;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,GAAmB;AACzF,SAAOC,kBAAwB,CAAC,KAAD,EAAQ,QAAR,CAA/B;AACD,CAFM;;;;;;;SCVS,c,CACd,O,EACA,M,EAC+B;AAAA,MAA/B,YAA+B,uEAAF,EAAE;AAE/B,SAAO,qBAAqB,CAAC,OAAD,EAAU,MAAV,EAAkB;AAAE,IAAA,KAAK,EAAE,KAAT;AAAgB,IAAA;AAAhB,GAAlB,CAA5B;AACF;;ACUO,MAAM,UAAU,GAA8B,UAAC,OAAD;AAAA,MAAU,UAAV,uEAAuB,KAAvB;AAAA,MAA8B,YAA9B,uEAA6C,EAA7C;AAAA,SAAoD,UAAyB;AAAA,QAAxB;AAAE,MAAA,EAAF;AAAM,MAAA,MAAN;AAAc,MAAA;AAAd,KAAwB;AAChI,UAAM;AAAE,MAAA;AAAF,QAAU,EAAhB;AACA,UAAM,QAAQ,GAAG,cAAc,CAAC,OAAD,EAAU,MAAM,CAAC,MAAjB,EAAyB,YAAzB,CAA/B;AACA,UAAM,SAAS,GAAG,aAAa,CAAC,MAAd,CAAqB,GAArB,EAA0B,CAA1B,EAA6B,GAAG,CAAC,OAAJ,CAAY,IAAzC,CAAlB;;AAEA,QAAI,QAAJ,EAAc;AACZ,MAAA,EAAE,CAAC,YAAH,CAAgB,SAAhB,EACG,oBADH,CACwB,QADxB,EACkC,KADlC,EAEG,OAFH,CAEW,eAFX,EAE4B,CAAC,UAF7B;AAGD;;AAED,WAAO,IAAP;AACD,GAZoD;AAAA,CAA9C;;;;;;;SChBS,iB,CAAkB,K,EAAoB,U,EAA6B;AACjF,QAAM,IAAI,GAAG,WAAW,CAAC,UAAD,EAAa,KAAK,CAAC,MAAnB,CAAxB;AACA,QAAM;AAAE,IAAA,IAAF;AAAQ,IAAA,EAAR;AAAY,IAAA;AAAZ,MAAsB,KAAK,CAAC,SAAlC;AACA,QAAM,KAAK,GAAW,EAAtB;;AAEA,MAAI,KAAJ,EAAW;AACT,QAAI,KAAK,CAAC,WAAV,EAAuB;AACrB,MAAA,KAAK,CAAC,IAAN,CAAW,GAAG,KAAK,CAAC,WAApB;AACD;;AAED,IAAA,KAAK,CAAC,IAAN,CAAW,GAAG,KAAK,CAAC,SAAN,CAAgB,KAAhB,CAAsB,KAAtB,EAAd;AACD,GAND,MAMO;AACL,IAAA,KAAK,CAAC,GAAN,CAAU,YAAV,CAAuB,IAAvB,EAA6B,EAA7B,EAAiC,IAAI,IAAA;AACnC,MAAA,KAAK,CAAC,IAAN,CAAW,GAAG,IAAI,CAAC,KAAnB;AACD,KAFD;AAGD;;AAED,QAAM,IAAI,GAAG,KAAK,CAAC,IAAN,CAAW,QAAQ,IAAI,QAAQ,CAAC,IAAT,CAAc,IAAd,KAAuB,IAAI,CAAC,IAAnD,CAAb;;AAEA,MAAI,CAAC,IAAL,EAAW;AACT,WAAO,EAAP;AACD;;AAED,SAAO,EAAE,GAAG,IAAI,CAAC;AAAV,GAAP;AACF;;ACZO,MAAM,OAAO,GAA2B,UAAC,UAAD;AAAA,MAAa,UAAb,uEAA0B,EAA1B;AAAA,SAAiC,UAAwB;AAAA,QAAvB;AAAE,MAAA,EAAF;AAAM,MAAA,KAAN;AAAa,MAAA;AAAb,KAAuB;AACtG,UAAM;AAAE,MAAA;AAAF,QAAgB,EAAtB;AACA,UAAM;AAAE,MAAA,KAAF;AAAS,MAAA;AAAT,QAAoB,SAA1B;AACA,UAAM,IAAI,GAAG,WAAW,CAAC,UAAD,EAAa,KAAK,CAAC,MAAnB,CAAxB;;AAEA,QAAI,QAAJ,EAAc;AACZ,UAAI,KAAJ,EAAW;AACT,cAAM,aAAa,GAAG,iBAAiB,CAAC,KAAD,EAAQ,IAAR,CAAvC;AAEA,QAAA,EAAE,CAAC,aAAH,CAAiB,IAAI,CAAC,MAAL,CAAY,EAC3B,GAAG,aADwB;AAE3B,aAAG;AAFwB,SAAZ,CAAjB;AAID,OAPD,MAOO;AACL,QAAA,MAAM,CAAC,OAAP,CAAe,KAAK,IAAA;AAClB,gBAAM,IAAI,GAAG,KAAK,CAAC,KAAN,CAAY,GAAzB;AACA,gBAAM,EAAE,GAAG,KAAK,CAAC,GAAN,CAAU,GAArB;AAEA,UAAA,KAAK,CAAC,GAAN,CAAU,YAAV,CAAuB,IAAvB,EAA6B,EAA7B,EAAiC,CAAC,IAAD,EAAO,GAAP,KAAU;AACzC,kBAAM,WAAW,GAAG,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,IAAd,CAApB;AACA,kBAAM,SAAS,GAAG,IAAI,CAAC,GAAL,CAAS,GAAG,GAAG,IAAI,CAAC,QAApB,EAA8B,EAA9B,CAAlB;AACA,kBAAM,WAAW,GAAG,IAAI,CAAC,KAAL,CAAW,IAAX,CAAgB,IAAI,IAAI,IAAI,CAAC,IAAL,KAAc,IAAtC,CAApB,CAHyC,C;;;;AAQzC,gBAAI,WAAJ,EAAiB;AACf,cAAA,IAAI,CAAC,KAAL,CAAW,OAAX,CAAmB,IAAI,IAAA;AACrB,oBAAI,IAAI,KAAK,IAAI,CAAC,IAAlB,EAAwB;AACtB,kBAAA,EAAE,CAAC,OAAH,CAAW,WAAX,EAAwB,SAAxB,EAAmC,IAAI,CAAC,MAAL,CAAY,EAC7C,GAAG,IAAI,CAAC,KADqC;AAE7C,uBAAG;AAF0C,mBAAZ,CAAnC;AAID;AACF,eAPD;AAQD,aATD,MASO;AACL,cAAA,EAAE,CAAC,OAAH,CAAW,WAAX,EAAwB,SAAxB,EAAmC,IAAI,CAAC,MAAL,CAAY,UAAZ,CAAnC;AACD;AACF,WApBD;AAqBD,SAzBD;AA0BD;AACF;;AAED,WAAO,IAAP;AACD,GA5C8C;AAAA,CAAxC;;;;;;;ACHA,MAAM,OAAO,GAA2B,CAAC,GAAD,EAAM,KAAN,KAAgB,UAAO;AAAA,MAAN;AAAE,IAAA;AAAF,GAAM;AACpE,EAAA,EAAE,CAAC,OAAH,CAAW,GAAX,EAAgB,KAAhB;AAEA,SAAO,IAAP;AACD,CAJM;;;;;;;ACGA,MAAM,OAAO,GAA2B,UAAC,UAAD;AAAA,MAAa,UAAb,uEAA0B,EAA1B;AAAA,SAAiC,UAA2B;AAAA,QAA1B;AAAE,MAAA,KAAF;AAAS,MAAA,QAAT;AAAmB,MAAA;AAAnB,KAA0B;AACzG,UAAM,IAAI,GAAG,WAAW,CAAC,UAAD,EAAa,KAAK,CAAC,MAAnB,CAAxB,CADyG,C;;AAIzG,QAAI,CAAC,IAAI,CAAC,WAAV,EAAuB;AACrB,MAAA,OAAO,CAAC,IAAR,CAAa,sEAAb;AAEA,aAAO,KAAP;AACD;;AAED,WAAO,KAAK,G;AAAA,KAET,OAFI,CAEI,UAAa;AAAA,UAAZ;AAAE,QAAA;AAAF,OAAY;AACpB,YAAM,WAAW,GAAG,YAAY,CAAC,IAAD,EAAO,UAAP,CAAZ,CAA+B,KAA/B,CAApB;;AAEA,UAAI,WAAJ,EAAiB;AACf,eAAO,IAAP;AACD;;AAED,aAAO,QAAQ,CAAC,UAAT,EAAP;AACD,KAVI,EAWJ,OAXI,CAWI,UAAwB;AAAA,UAAvB;AAAE,QAAA,KAAK,EAAE;AAAT,OAAuB;AAC/B,aAAO,YAAY,CAAC,IAAD,EAAO,UAAP,CAAZ,CAA+B,YAA/B,EAA6C,QAA7C,CAAP;AACD,KAbI,EAcJ,GAdI,EAAP;AAeD,GAzB8C;AAAA,CAAxC;;;;;;;ACDA,MAAM,gBAAgB,GAAoC,QAAQ,IAAI,UAAiB;AAAA,MAAhB;AAAE,IAAA,EAAF;AAAM,IAAA;AAAN,GAAgB;;AAC5F,MAAI,QAAJ,EAAc;AACZ,UAAM;AAAE,MAAA;AAAF,QAAU,EAAhB;AACA,UAAM,MAAM,GAAG,SAAS,CAAC,OAAV,CAAkB,GAAlB,EAAuB,IAAtC;AACA,UAAM,MAAM,GAAG,SAAS,CAAC,KAAV,CAAgB,GAAhB,EAAqB,EAApC;AACA,UAAM,WAAW,GAAG,MAAM,CAAC,QAAD,EAAW,MAAX,EAAmB,MAAnB,CAA1B;AACA,UAAM,SAAS,GAAG,aAAa,CAAC,MAAd,CAAqB,GAArB,EAA0B,WAA1B,CAAlB;AAEA,IAAA,EAAE,CAAC,YAAH,CAAgB,SAAhB;AACD;;AAED,SAAO,IAAP;AACD,CAZM;;;;;;;ACAA,MAAM,gBAAgB,GAAoC,QAAQ,IAAI,UAAiB;AAAA,MAAhB;AAAE,IAAA,EAAF;AAAM,IAAA;AAAN,GAAgB;;AAC5F,MAAI,QAAJ,EAAc;AACZ,UAAM;AAAE,MAAA;AAAF,QAAU,EAAhB;AACA,UAAM;AAAE,MAAA,IAAF;AAAQ,MAAA;AAAR,QAAe,OAAO,QAAP,KAAoB,QAApB,GACjB;AAAE,MAAA,IAAI,EAAE,QAAR;AAAkB,MAAA,EAAE,EAAE;AAAtB,KADiB,GAEjB,QAFJ;AAGA,UAAM,MAAM,GAAG,SAAS,CAAC,OAAV,CAAkB,GAAlB,EAAuB,IAAtC;AACA,UAAM,MAAM,GAAG,SAAS,CAAC,KAAV,CAAgB,GAAhB,EAAqB,EAApC;AACA,UAAM,YAAY,GAAG,MAAM,CAAC,IAAD,EAAO,MAAP,EAAe,MAAf,CAA3B;AACA,UAAM,WAAW,GAAG,MAAM,CAAC,EAAD,EAAK,MAAL,EAAa,MAAb,CAA1B;AACA,UAAM,SAAS,GAAG,aAAa,CAAC,MAAd,CAAqB,GAArB,EAA0B,YAA1B,EAAwC,WAAxC,CAAlB;AAEA,IAAA,EAAE,CAAC,YAAH,CAAgB,SAAhB;AACD;;AAED,SAAO,IAAP;AACD,CAhBM;;;;;;;ACCA,MAAM,YAAY,GAAgC,UAAU,IAAI,UAAoB;AAAA,MAAnB;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,GAAmB;AACzF,QAAM,IAAI,GAAG,WAAW,CAAC,UAAD,EAAa,KAAK,CAAC,MAAnB,CAAxB;AAEA,SAAOC,cAAoB,CAAC,IAAD,CAApBA,CAA2B,KAA3BA,EAAkC,QAAlCA,CAAP;AACD,CAJM;;;;;;;SCdS,qB,CACd,mB,EACA,Q,EACA,U,EAA+B;AAE/B,SAAO,MAAM,CAAC,WAAP,CAAmB,MAAM,CAC7B,OADuB,CACf,UADe,EAEvB,MAFuB,CAEhB,UAAO;AAAA,QAAN,CAAC,IAAD,CAAM;AACb,UAAM,kBAAkB,GAAG,mBAAmB,CAAC,IAApB,CAAyB,IAAI,IAAA;AACtD,aAAO,IAAI,CAAC,IAAL,KAAc,QAAd,IAA0B,IAAI,CAAC,IAAL,KAAc,IAA/C;AACD,KAF0B,CAA3B;;AAIA,QAAI,CAAC,kBAAL,EAAyB;AACvB,aAAO,KAAP;AACD;;AAED,WAAO,kBAAkB,CAAC,SAAnB,CAA6B,WAApC;AACD,GAZuB,CAAnB,CAAP;AAaF;;ACdA,SAASC,gBAAT,CAAwB,KAAxB,EAA2C;AACzC,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,SAA1B,EAAqC,CAAC,IAAI,CAA1C,EAA6C;AAC3C,UAAM;AAAE,MAAA;AAAF,QAAW,KAAK,CAAC,IAAN,CAAW,CAAX,CAAjB;;AAEA,QAAI,IAAI,CAAC,WAAL,IAAoB,CAAC,IAAI,CAAC,gBAAL,EAAzB,EAAkD;AAChD,aAAO,IAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD;;AAED,SAAS,WAAT,CAAqB,KAArB,EAAyC,eAAzC,EAAmE;AACjE,QAAM,KAAK,GAAG,KAAK,CAAC,WAAN,IACR,KAAK,CAAC,SAAN,CAAgB,GAAhB,CAAoB,YAApB,IAAoC,KAAK,CAAC,SAAN,CAAgB,KAAhB,CAAsB,KAAtB,EAD1C;;AAGA,MAAI,KAAJ,EAAW;AACT,UAAM,aAAa,GAAG,KAAK,CAAC,MAAN,CAAa,IAAI,IAAI,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,QAAjB,CAA0B,IAAI,CAAC,IAAL,CAAU,IAApC,CAArB,CAAtB;AAEA,IAAA,KAAK,CAAC,EAAN,CAAS,WAAT,CAAqB,aAArB;AACD;AACF;;AAaM,MAAM,UAAU,GAA8B;AAAA,MAAC;AAAE,IAAA,SAAS,GAAG;AAAd,GAAD,uEAAwB,EAAxB;AAAA,SAA+B,UAKnF;AAAA,QALoF;AACnF,MAAA,EADmF;AAEnF,MAAA,KAFmF;AAGnF,MAAA,QAHmF;AAInF,MAAA;AAJmF,KAKpF;AACC,UAAM;AAAE,MAAA,SAAF;AAAa,MAAA;AAAb,QAAqB,EAA3B;AACA,UAAM;AAAE,MAAA,KAAF;AAAS,MAAA;AAAT,QAAiB,SAAvB;AACA,UAAM,mBAAmB,GAAG,MAAM,CAAC,gBAAP,CAAwB,UAApD;AACA,UAAM,aAAa,GAAG,qBAAqB,CACzC,mBADyC,EAEzC,KAAK,CAAC,IAAN,GAAa,IAAb,CAAkB,IAFuB,EAGzC,KAAK,CAAC,IAAN,GAAa,KAH4B,CAA3C;;AAMA,QAAI,SAAS,YAAY,aAArB,IAAsC,SAAS,CAAC,IAAV,CAAe,OAAzD,EAAkE;AAChE,UAAI,CAAC,KAAK,CAAC,YAAP,IAAuB,CAAC,QAAQ,CAAC,GAAD,EAAM,KAAK,CAAC,GAAZ,CAApC,EAAsD;AACpD,eAAO,KAAP;AACD;;AAED,UAAI,QAAJ,EAAc;AACZ,YAAI,SAAJ,EAAe;AACb,UAAA,WAAW,CAAC,KAAD,EAAQ,MAAM,CAAC,gBAAP,CAAwB,eAAhC,CAAX;AACD;;AAED,QAAA,EAAE,CAAC,KAAH,CAAS,KAAK,CAAC,GAAf,EAAoB,cAApB;AACD;;AAED,aAAO,IAAP;AACD;;AAED,QAAI,CAAC,KAAK,CAAC,MAAN,CAAa,OAAlB,EAA2B;AACzB,aAAO,KAAP;AACD;;AAED,QAAI,QAAJ,EAAc;AACZ,YAAM,KAAK,GAAG,GAAG,CAAC,YAAJ,KAAqB,GAAG,CAAC,MAAJ,CAAW,OAAX,CAAmB,IAAtD;;AAEA,UAAI,SAAS,YAAY,aAAzB,EAAwC;AACtC,QAAA,EAAE,CAAC,eAAH;AACD;;AAED,YAAM,KAAK,GAAG,KAAK,CAAC,KAAN,KAAgB,CAAhB,GACV,SADU,GAEVA,gBAAc,CAAC,KAAK,CAAC,IAAN,CAAW,CAAC,CAAZ,EAAe,cAAf,CAA8B,KAAK,CAAC,UAAN,CAAiB,CAAC,CAAlB,CAA9B,CAAD,CAFlB;AAIA,UAAI,KAAK,GAAG,KAAK,IAAI,KAAT,GACR,CAAC;AACD,QAAA,IAAI,EAAE,KADL;AAED,QAAA,KAAK,EAAE;AAFN,OAAD,CADQ,GAKR,SALJ;AAOA,UAAI,GAAG,GAAG,QAAQ,CAAC,EAAE,CAAC,GAAJ,EAAS,EAAE,CAAC,OAAH,CAAW,GAAX,CAAe,KAAK,CAAC,GAArB,CAAT,EAAoC,CAApC,EAAuC,KAAvC,CAAlB;;AAEA,UACE,CAAC,KAAD,IACG,CAAC,GADJ,IAEG,QAAQ,CAAC,EAAE,CAAC,GAAJ,EAAS,EAAE,CAAC,OAAH,CAAW,GAAX,CAAe,KAAK,CAAC,GAArB,CAAT,EAAoC,CAApC,EAAuC,KAAK,GAAG,CAAC;AAAE,QAAA,IAAI,EAAE;AAAR,OAAD,CAAH,GAAuB,SAAnE,CAHb,EAIE;AACA,QAAA,GAAG,GAAG,IAAN;AACA,QAAA,KAAK,GAAG,KAAK,GACT,CAAC;AACD,UAAA,IAAI,EAAE,KADL;AAED,UAAA,KAAK,EAAE;AAFN,SAAD,CADS,GAKT,SALJ;AAMD;;AAED,UAAI,GAAJ,EAAS;AACP,QAAA,EAAE,CAAC,KAAH,CAAS,EAAE,CAAC,OAAH,CAAW,GAAX,CAAe,KAAK,CAAC,GAArB,CAAT,EAAoC,CAApC,EAAuC,KAAvC;;AAEA,YACE,KAAK,IACF,CAAC,KADJ,IAEG,CAAC,KAAK,CAAC,YAFV,IAGG,KAAK,CAAC,MAAN,CAAa,IAAb,KAAsB,KAJ3B,EAKE;AACA,gBAAM,KAAK,GAAG,EAAE,CAAC,OAAH,CAAW,GAAX,CAAe,KAAK,CAAC,MAAN,EAAf,CAAd;AACA,gBAAM,MAAM,GAAG,EAAE,CAAC,GAAH,CAAO,OAAP,CAAe,KAAf,CAAf;;AAEA,cAAI,KAAK,CAAC,IAAN,CAAW,CAAC,CAAZ,EAAe,cAAf,CAA8B,MAAM,CAAC,KAAP,EAA9B,EAA8C,MAAM,CAAC,KAAP,KAAiB,CAA/D,EAAkE,KAAlE,CAAJ,EAA8E;AAC5E,YAAA,EAAE,CAAC,aAAH,CAAiB,EAAE,CAAC,OAAH,CAAW,GAAX,CAAe,KAAK,CAAC,MAAN,EAAf,CAAjB,EAAiD,KAAjD;AACD;AACF;AACF;;AAED,UAAI,SAAJ,EAAe;AACb,QAAA,WAAW,CAAC,KAAD,EAAQ,MAAM,CAAC,gBAAP,CAAwB,eAAhC,CAAX;AACD;;AAED,MAAA,EAAE,CAAC,cAAH;AACD;;AAED,WAAO,IAAP;AACD,GA/FoD;AAAA,CAA9C;;;;;;;AChBA,MAAM,aAAa,GAAiC,UAAU,IAAI,UAExE;AAAA,MAFyE;AACxE,IAAA,EADwE;AACpE,IAAA,KADoE;AAC7D,IAAA,QAD6D;AACnD,IAAA;AADmD,GAEzE;;;;AACC,QAAM,IAAI,GAAG,WAAW,CAAC,UAAD,EAAa,KAAK,CAAC,MAAnB,CAAxB;AACA,QAAM;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,MAAiB,KAAK,CAAC,SAA7B,CAFD,C;;;AAMC,QAAM,IAAI,GAAoB,KAAK,CAAC,SAAN,CAAgB,IAA9C;;AAEA,MAAK,IAAI,IAAI,IAAI,CAAC,OAAd,IAA0B,KAAK,CAAC,KAAN,GAAc,CAAxC,IAA6C,CAAC,KAAK,CAAC,UAAN,CAAiB,GAAjB,CAAlD,EAAyE;AACvE,WAAO,KAAP;AACD;;AAED,QAAM,WAAW,GAAG,KAAK,CAAC,IAAN,CAAW,CAAC,CAAZ,CAApB;;AAEA,MAAI,WAAW,CAAC,IAAZ,KAAqB,IAAzB,EAA+B;AAC7B,WAAO,KAAP;AACD;;AAED,QAAM,mBAAmB,GAAG,MAAM,CAAC,gBAAP,CAAwB,UAApD;;AAEA,MAAI,KAAK,CAAC,MAAN,CAAa,OAAb,CAAqB,IAArB,KAA8B,CAA9B,IAAmC,KAAK,CAAC,IAAN,CAAW,CAAC,CAAZ,EAAe,UAAf,KAA8B,KAAK,CAAC,UAAN,CAAiB,CAAC,CAAlB,CAArE,EAA2F;;;;AAIzF,QACE,KAAK,CAAC,KAAN,KAAgB,CAAhB,IACG,KAAK,CAAC,IAAN,CAAW,CAAC,CAAZ,EAAe,IAAf,KAAwB,IAD3B,IAEG,KAAK,CAAC,KAAN,CAAY,CAAC,CAAb,MAAoB,KAAK,CAAC,IAAN,CAAW,CAAC,CAAZ,EAAe,UAAf,GAA4B,CAHrD,EAIE;AACA,aAAO,KAAP;AACD;;AAED,QAAI,QAAJ,EAAc;AACZ,UAAI,IAAI,GAAG,QAAQ,CAAC,KAApB,CADY,C;;AAGZ,YAAM,WAAW,GAAG,KAAK,CAAC,KAAN,CAAY,CAAC,CAAb,IAChB,CADgB,GAEhB,KAAK,CAAC,KAAN,CAAY,CAAC,CAAb,IACE,CADF,GAEE,CAJN,CAHY,C;;;AAWZ,WAAK,IAAI,CAAC,GAAG,KAAK,CAAC,KAAN,GAAc,WAA3B,EAAwC,CAAC,IAAI,KAAK,CAAC,KAAN,GAAc,CAA3D,EAA8D,CAAC,IAAI,CAAnE,EAAsE;AACpE,QAAA,IAAI,GAAG,QAAQ,CAAC,IAAT,CAAc,KAAK,CAAC,IAAN,CAAW,CAAX,EAAc,IAAd,CAAmB,IAAnB,CAAd,CAAP;AACD,OAbW,C;;;AAgBZ,YAAM,UAAU,GAAG,KAAK,CAAC,UAAN,CAAiB,CAAC,CAAlB,IAAuB,KAAK,CAAC,IAAN,CAAW,CAAC,CAAZ,EAAe,UAAtC,GACf,CADe,GAEf,KAAK,CAAC,UAAN,CAAiB,CAAC,CAAlB,IAAuB,KAAK,CAAC,IAAN,CAAW,CAAC,CAAZ,EAAe,UAAtC,GACE,CADF,GAEE,CAJN,CAhBY,C;;AAuBZ,YAAM,qBAAqB,GAAG,qBAAqB,CACjD,mBADiD,EAEjD,KAAK,CAAC,IAAN,GAAa,IAAb,CAAkB,IAF+B,EAGjD,KAAK,CAAC,IAAN,GAAa,KAHoC,CAAnD;AAKA,YAAM,QAAQ,GAAG,CAAA,CAAA,EAAA,GAAA,IAAI,CAAC,YAAL,CAAkB,WAAlB,MAA6B,IAA7B,IAA6B,EAAA,KAAA,KAAA,CAA7B,GAA6B,KAAA,CAA7B,GAA6B,EAAA,CAAE,aAAF,CAAgB,qBAAhB,CAA7B,KAAuE,SAAxF;AAEA,MAAA,IAAI,GAAG,IAAI,CAAC,MAAL,CAAY,QAAQ,CAAC,IAAT,CAAc,IAAI,CAAC,aAAL,CAAmB,IAAnB,EAAyB,QAAzB,KAAsC,SAApD,CAAZ,CAAP;AAEA,YAAM,KAAK,GAAG,KAAK,CAAC,MAAN,CAAa,KAAK,CAAC,KAAN,IAAe,WAAW,GAAG,CAA7B,CAAb,CAAd;AAEA,MAAA,EAAE,CAAC,OAAH,CAAW,KAAX,EAAkB,KAAK,CAAC,KAAN,CAAY,CAAC,UAAb,CAAlB,EAA4C,IAAI,KAAJ,CAAU,IAAV,EAAgB,IAAI,WAApB,EAAiC,CAAjC,CAA5C;AAEA,UAAI,GAAG,GAAG,CAAC,CAAX;AAEA,MAAA,EAAE,CAAC,GAAH,CAAO,YAAP,CAAoB,KAApB,EAA2B,EAAE,CAAC,GAAH,CAAO,OAAP,CAAe,IAA1C,EAAgD,CAAC,CAAD,EAAI,GAAJ,KAAO;AACrD,YAAI,GAAG,GAAG,CAAC,CAAX,EAAc;AACZ,iBAAO,KAAP;AACD;;AAED,YAAI,CAAC,CAAC,WAAF,IAAiB,CAAC,CAAC,OAAF,CAAU,IAAV,KAAmB,CAAxC,EAA2C;AACzC,UAAA,GAAG,GAAG,GAAG,GAAG,CAAZ;AACD;AACF,OARD;;AAUA,UAAI,GAAG,GAAG,CAAC,CAAX,EAAc;AACZ,QAAA,EAAE,CAAC,YAAH,CAAgB,aAAa,CAAC,IAAd,CAAmB,EAAE,CAAC,GAAH,CAAO,OAAP,CAAe,GAAf,CAAnB,CAAhB;AACD;;AAED,MAAA,EAAE,CAAC,cAAH;AACD;;AAED,WAAO,IAAP;AACD;;AAED,QAAM,QAAQ,GAAG,GAAG,CAAC,GAAJ,KAAY,KAAK,CAAC,GAAN,EAAZ,GACb,WAAW,CAAC,cAAZ,CAA2B,CAA3B,EAA8B,WADjB,GAEb,IAFJ;AAIA,QAAM,iBAAiB,GAAG,qBAAqB,CAC7C,mBAD6C,EAE7C,WAAW,CAAC,IAAZ,CAAiB,IAF4B,EAG7C,WAAW,CAAC,KAHiC,CAA/C;AAKA,QAAM,qBAAqB,GAAG,qBAAqB,CACjD,mBADiD,EAEjD,KAAK,CAAC,IAAN,GAAa,IAAb,CAAkB,IAF+B,EAGjD,KAAK,CAAC,IAAN,GAAa,KAHoC,CAAnD;AAMA,EAAA,EAAE,CAAC,MAAH,CAAU,KAAK,CAAC,GAAhB,EAAqB,GAAG,CAAC,GAAzB;AAEA,QAAM,KAAK,GAAG,QAAQ,GAClB,CAAC;AAAE,IAAA,IAAF;AAAQ,IAAA,KAAK,EAAE;AAAf,GAAD,EAAqC;AAAE,IAAA,IAAI,EAAE,QAAR;AAAkB,IAAA,KAAK,EAAE;AAAzB,GAArC,CADkB,GAElB,CAAC;AAAE,IAAA,IAAF;AAAQ,IAAA,KAAK,EAAE;AAAf,GAAD,CAFJ;;AAIA,MAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAJ,EAAS,KAAK,CAAC,GAAf,EAAoB,CAApB,CAAb,EAAqC;AACnC,WAAO,KAAP;AACD;;AAED,MAAI,QAAJ,EAAc;AACZ,IAAA,EAAE,CAAC,KAAH,CAAS,KAAK,CAAC,GAAf,EAAoB,CAApB,EAAuB,KAAvB,EAA8B,cAA9B;AACD;;AAED,SAAO,IAAP;AACD,CA1HM;;;;;;;SCpBS,0B,CAA2B,I,EAAmB,S,EAAoB;AAMhF,OAAK,IAAI,CAAC,GAAG,IAAI,CAAC,KAAlB,EAAyB,CAAC,GAAG,CAA7B,EAAgC,CAAC,IAAI,CAArC,EAAwC;AACtC,UAAM,IAAI,GAAG,IAAI,CAAC,IAAL,CAAU,CAAV,CAAb;;AAEA,QAAI,SAAS,CAAC,IAAD,CAAb,EAAqB;AACnB,aAAO;AACL,QAAA,GAAG,EAAE,CAAC,GAAG,CAAJ,GAAQ,IAAI,CAAC,MAAL,CAAY,CAAZ,CAAR,GAAyB,CADzB;AAEL,QAAA,KAAK,EAAE,IAAI,CAAC,KAAL,CAAW,CAAX,CAFF;AAGL,QAAA,KAAK,EAAE,CAHF;AAIL,QAAA;AAJK,OAAP;AAMD;AACF;AACH;;SCjBgB,c,CAAe,S,EAAoB;AACjD,SAAQ,SAAD,IAA0B,0BAA0B,CAAC,SAAS,CAAC,KAAX,EAAkB,SAAlB,CAA3D;AACF;;SCDgB,e,CAAgB,U,EAAsB;AACpD,QAAM,cAAc,GAAG,UAAU,CAAC,MAAX,CAAkB,SAAS,IAAI,SAAS,CAAC,IAAV,KAAmB,WAAlD,CAAvB;AACA,QAAM,cAAc,GAAG,UAAU,CAAC,MAAX,CAAkB,SAAS,IAAI,SAAS,CAAC,IAAV,KAAmB,MAAlD,CAAvB;AACA,QAAM,cAAc,GAAG,UAAU,CAAC,MAAX,CAAkB,SAAS,IAAI,SAAS,CAAC,IAAV,KAAmB,MAAlD,CAAvB;AAEA,SAAO;AACL,IAAA,cADK;AAEL,IAAA,cAFK;AAGL,IAAA;AAHK,GAAP;AAKF;;SCTgB,M,CAAO,I,EAAc,U,EAAsB;AACzD,QAAM;AAAE,IAAA;AAAF,MAAqB,eAAe,CAAC,UAAD,CAA1C;AACA,QAAM,SAAS,GAAG,cAAc,CAAC,IAAf,CAAoB,IAAI,IAAI,IAAI,CAAC,IAAL,KAAc,IAA1C,CAAlB;;AAEA,MAAI,CAAC,SAAL,EAAgB;AACd,WAAO,KAAP;AACD;;AAED,QAAM,OAAO,GAAG;AACd,IAAA,IAAI,EAAE,SAAS,CAAC,IADF;AAEd,IAAA,OAAO,EAAE,SAAS,CAAC,OAFL;AAGd,IAAA,OAAO,EAAE,SAAS,CAAC;AAHL,GAAhB;AAKA,QAAM,KAAK,GAAG,YAAY,CAAC,iBAAiB,CAAsB,SAAtB,EAAiC,OAAjC,EAA0C,OAA1C,CAAlB,CAA1B;;AAEA,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAO,KAAP;AACD;;AAED,SAAO,KAAK,CAAC,KAAN,CAAY,GAAZ,EAAiB,QAAjB,CAA0B,MAA1B,CAAP;AACF;;AClBA,MAAM,iBAAiB,GAAG,CAAC,EAAD,EAAkB,QAAlB,KAAoC;AAC5D,QAAM,IAAI,GAAG,cAAc,CAAC,IAAI,IAAI,IAAI,CAAC,IAAL,KAAc,QAAvB,CAAd,CAA+C,EAAE,CAAC,SAAlD,CAAb;;AAEA,MAAI,CAAC,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AAED,QAAM,MAAM,GAAG,EAAE,CAAC,GAAH,CAAO,OAAP,CAAe,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,IAAI,CAAC,GAAL,GAAW,CAAvB,CAAf,EAA0C,MAA1C,CAAiD,IAAI,CAAC,KAAtD,CAAf;;AAEA,MAAI,MAAM,KAAK,SAAf,EAA0B;AACxB,WAAO,IAAP;AACD;;AAED,QAAM,UAAU,GAAG,EAAE,CAAC,GAAH,CAAO,MAAP,CAAc,MAAd,CAAnB;AACA,QAAM,gBAAgB,GAAG,IAAI,CAAC,IAAL,CAAU,IAAV,MAAmB,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAA,UAAU,CAAE,IAA/B,KACpB,OAAO,CAAC,EAAE,CAAC,GAAJ,EAAS,IAAI,CAAC,GAAd,CADZ;;AAGA,MAAI,CAAC,gBAAL,EAAuB;AACrB,WAAO,IAAP;AACD;;AAED,EAAA,EAAE,CAAC,IAAH,CAAQ,IAAI,CAAC,GAAb;AAEA,SAAO,IAAP;AACD,CAxBD;;AA0BA,MAAM,gBAAgB,GAAG,CAAC,EAAD,EAAkB,QAAlB,KAAoC;AAC3D,QAAM,IAAI,GAAG,cAAc,CAAC,IAAI,IAAI,IAAI,CAAC,IAAL,KAAc,QAAvB,CAAd,CAA+C,EAAE,CAAC,SAAlD,CAAb;;AAEA,MAAI,CAAC,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AAED,QAAM,KAAK,GAAG,EAAE,CAAC,GAAH,CAAO,OAAP,CAAe,IAAI,CAAC,KAApB,EAA2B,KAA3B,CAAiC,IAAI,CAAC,KAAtC,CAAd;;AAEA,MAAI,KAAK,KAAK,SAAd,EAAyB;AACvB,WAAO,IAAP;AACD;;AAED,QAAM,SAAS,GAAG,EAAE,CAAC,GAAH,CAAO,MAAP,CAAc,KAAd,CAAlB;AACA,QAAM,eAAe,GAAG,IAAI,CAAC,IAAL,CAAU,IAAV,MAAmB,SAAS,KAAA,IAAT,IAAA,SAAS,KAAA,KAAA,CAAT,GAAS,KAAA,CAAT,GAAA,SAAS,CAAE,IAA9B,KACnB,OAAO,CAAC,EAAE,CAAC,GAAJ,EAAS,KAAT,CADZ;;AAGA,MAAI,CAAC,eAAL,EAAsB;AACpB,WAAO,IAAP;AACD;;AAED,EAAA,EAAE,CAAC,IAAH,CAAQ,KAAR;AAEA,SAAO,IAAP;AACD,CAxBD;;AAqCO,MAAM,UAAU,GAA8B,CAAC,cAAD,EAAiB,cAAjB,KAAoC,UAExF;AAAA,MAFyF;AACxF,IAAA,MADwF;AAChF,IAAA,EADgF;AAC5E,IAAA,KAD4E;AACrE,IAAA,QADqE;AAC3D,IAAA,KAD2D;AACpD,IAAA,QADoD;AAC1C,IAAA;AAD0C,GAEzF;AACC,QAAM;AAAE,IAAA;AAAF,MAAiB,MAAM,CAAC,gBAA9B;AACA,QAAM,QAAQ,GAAG,WAAW,CAAC,cAAD,EAAiB,KAAK,CAAC,MAAvB,CAA5B;AACA,QAAM,QAAQ,GAAG,WAAW,CAAC,cAAD,EAAiB,KAAK,CAAC,MAAvB,CAA5B;AACA,QAAM;AAAE,IAAA;AAAF,MAAgB,KAAtB;AACA,QAAM;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,MAAiB,SAAvB;AACA,QAAM,KAAK,GAAG,KAAK,CAAC,UAAN,CAAiB,GAAjB,CAAd;;AAEA,MAAI,CAAC,KAAL,EAAY;AACV,WAAO,KAAP;AACD;;AAED,QAAM,UAAU,GAAG,cAAc,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,IAAL,CAAU,IAAX,EAAiB,UAAjB,CAAf,CAAd,CAA2D,SAA3D,CAAnB;;AAEA,MAAI,KAAK,CAAC,KAAN,IAAe,CAAf,IAAoB,UAApB,IAAkC,KAAK,CAAC,KAAN,GAAc,UAAU,CAAC,KAAzB,IAAkC,CAAxE,EAA2E;;AAEzE,QAAI,UAAU,CAAC,IAAX,CAAgB,IAAhB,KAAyB,QAA7B,EAAuC;AACrC,aAAO,QAAQ,CAAC,YAAT,CAAsB,QAAtB,CAAP;AACD,KAJwE,C;;;AAOzE,QACE,MAAM,CAAC,UAAU,CAAC,IAAX,CAAgB,IAAhB,CAAqB,IAAtB,EAA4B,UAA5B,CAAN,IACG,QAAQ,CAAC,YAAT,CAAsB,UAAU,CAAC,IAAX,CAAgB,OAAtC,CADH,IAEG,QAHL,EAIE;AACA,aAAO,KAAK,GACT,OADI,CACI,MAAA;AACP,QAAA,EAAE,CAAC,aAAH,CAAiB,UAAU,CAAC,GAA5B,EAAiC,QAAjC;AAEA,eAAO,IAAP;AACD,OALI,EAMJ,OANI,CAMI,MAAM,iBAAiB,CAAC,EAAD,EAAK,QAAL,CAN3B,EAOJ,OAPI,CAOI,MAAM,gBAAgB,CAAC,EAAD,EAAK,QAAL,CAP1B,EAQJ,GARI,EAAP;AASD;AACF;;AAED,SAAO,KAAK,G;AAAA,GAET,OAFI,CAEI,MAAA;AACP,UAAM,aAAa,GAAG,GAAG,GAAG,UAAN,CAAiB,QAAjB,CAAtB;;AAEA,QAAI,aAAJ,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,WAAO,QAAQ,CAAC,UAAT,EAAP;AACD,GAVI,EAWJ,UAXI,CAWO,QAXP,EAYJ,OAZI,CAYI,MAAM,iBAAiB,CAAC,EAAD,EAAK,QAAL,CAZ3B,EAaJ,OAbI,CAaI,MAAM,gBAAgB,CAAC,EAAD,EAAK,QAAL,CAb1B,EAcJ,GAdI,EAAP;AAeD,CAvDM;;;;;;;SCjES,Y,CACd,K,EACA,U,EACoC;AAAA,MAApC,UAAoC,uEAAF,EAAE;AAEpC,QAAM;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,MAAoB,KAAK,CAAC,SAAhC;AACA,QAAM,IAAI,GAAG,UAAU,GACnB,WAAW,CAAC,UAAD,EAAa,KAAK,CAAC,MAAnB,CADQ,GAEnB,IAFJ;;AAIA,MAAI,KAAJ,EAAW;AACT,WAAO,CAAC,CAAC,CAAC,KAAK,CAAC,WAAN,IAAqB,KAAK,CAAC,SAAN,CAAgB,KAAhB,CAAsB,KAAtB,EAAtB,EACN,MADM,CACC,IAAI,IAAA;AACV,UAAI,CAAC,IAAL,EAAW;AACT,eAAO,IAAP;AACD;;AAED,aAAO,IAAI,CAAC,IAAL,KAAc,IAAI,CAAC,IAAL,CAAU,IAA/B;AACD,KAPM,EAQN,IARM,CAQD,IAAI,IAAI,cAAc,CAAC,IAAI,CAAC,KAAN,EAAa,UAAb,EAAyB;AAAE,MAAA,MAAM,EAAE;AAAV,KAAzB,CARrB,CAAT;AASD;;AAED,MAAI,cAAc,GAAG,CAArB;AACA,QAAM,UAAU,GAAgB,EAAhC;AAEA,EAAA,MAAM,CAAC,OAAP,CAAe,UAAe;AAAA,QAAd;AAAE,MAAA,KAAF;AAAS,MAAA;AAAT,KAAc;AAC5B,UAAM,IAAI,GAAG,KAAK,CAAC,GAAnB;AACA,UAAM,EAAE,GAAG,GAAG,CAAC,GAAf;AAEA,IAAA,KAAK,CAAC,GAAN,CAAU,YAAV,CAAuB,IAAvB,EAA6B,EAA7B,EAAiC,CAAC,IAAD,EAAO,GAAP,KAAU;AACzC,UAAI,CAAC,IAAI,CAAC,MAAN,IAAgB,CAAC,IAAI,CAAC,KAAL,CAAW,MAAhC,EAAwC;AACtC;AACD;;AAED,YAAM,YAAY,GAAG,IAAI,CAAC,GAAL,CAAS,IAAT,EAAe,GAAf,CAArB;AACA,YAAM,UAAU,GAAG,IAAI,CAAC,GAAL,CAAS,EAAT,EAAa,GAAG,GAAG,IAAI,CAAC,QAAxB,CAAnB;AACA,YAAM,KAAK,GAAG,UAAU,GAAG,YAA3B;AAEA,MAAA,cAAc,IAAI,KAAlB;AAEA,MAAA,UAAU,CAAC,IAAX,CAAgB,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAe,IAAI,KAAK;AACzC,QAAA,IADyC;AAEzC,QAAA,IAAI,EAAE,YAFmC;AAGzC,QAAA,EAAE,EAAE;AAHqC,OAAL,CAAnB,CAAnB;AAKD,KAhBD;AAiBD,GArBD;;AAuBA,MAAI,cAAc,KAAK,CAAvB,EAA0B;AACxB,WAAO,KAAP;AACD,GA/CmC,C;;;AAkDpC,QAAM,YAAY,GAAG,UAAU,CAC5B,MADkB,CACX,SAAS,IAAA;AACf,QAAI,CAAC,IAAL,EAAW;AACT,aAAO,IAAP;AACD;;AAED,WAAO,IAAI,CAAC,IAAL,KAAc,SAAS,CAAC,IAAV,CAAe,IAAf,CAAoB,IAAzC;AACD,GAPkB,EAQlB,MARkB,CAQX,SAAS,IAAI,cAAc,CAAC,SAAS,CAAC,IAAV,CAAe,KAAhB,EAAuB,UAAvB,EAAmC;AAAE,IAAA,MAAM,EAAE;AAAV,GAAnC,CARhB,EASlB,MATkB,CASX,CAAC,GAAD,EAAM,SAAN,KAAoB,GAAG,GAAG,SAAS,CAAC,EAAhB,GAAqB,SAAS,CAAC,IATxC,EAS8C,CAT9C,CAArB,CAlDoC,C;;;AA+DpC,QAAM,aAAa,GAAG,UAAU,CAC7B,MADmB,CACZ,SAAS,IAAA;AACf,QAAI,CAAC,IAAL,EAAW;AACT,aAAO,IAAP;AACD;;AAED,WAAO,SAAS,CAAC,IAAV,CAAe,IAAf,KAAwB,IAAxB,IACF,SAAS,CAAC,IAAV,CAAe,IAAf,CAAoB,QAApB,CAA6B,IAA7B,CADL;AAED,GARmB,EASnB,MATmB,CASZ,CAAC,GAAD,EAAM,SAAN,KAAoB,GAAG,GAAG,SAAS,CAAC,EAAhB,GAAqB,SAAS,CAAC,IATvC,EAS6C,CAT7C,CAAtB,CA/DoC,C;;;AA4EpC,QAAM,KAAK,GAAG,YAAY,GAAG,CAAf,GACV,YAAY,GAAG,aADL,GAEV,YAFJ;AAIA,SAAO,KAAK,IAAI,cAAhB;AACF;;ACjEO,MAAM,UAAU,GAA8B,UAAC,UAAD;AAAA,MAAa,UAAb,uEAA0B,EAA1B;AAAA,MAA8B,OAA9B,uEAAwC,EAAxC;AAAA,SAA+C,UAAoB;AAAA,QAAnB;AAAE,MAAA,KAAF;AAAS,MAAA;AAAT,KAAmB;AACtH,UAAM;AAAE,MAAA,oBAAoB,GAAG;AAAzB,QAAmC,OAAzC;AACA,UAAM,IAAI,GAAG,WAAW,CAAC,UAAD,EAAa,KAAK,CAAC,MAAnB,CAAxB;AACA,UAAM,QAAQ,GAAG,YAAY,CAAC,KAAD,EAAQ,IAAR,EAAc,UAAd,CAA7B;;AAEA,QAAI,QAAJ,EAAc;AACZ,aAAO,QAAQ,CAAC,SAAT,CAAmB,IAAnB,EAAyB;AAAE,QAAA;AAAF,OAAzB,CAAP;AACD;;AAED,WAAO,QAAQ,CAAC,OAAT,CAAiB,IAAjB,EAAuB,UAAvB,CAAP;AACD,GAVoD;AAAA,CAA9C;;;;;;;ACTA,MAAM,UAAU,GAA8B,UAAC,UAAD,EAAa,gBAAb;AAAA,MAA+B,UAA/B,uEAA4C,EAA5C;AAAA,SAAmD,UAAoB;AAAA,QAAnB;AAAE,MAAA,KAAF;AAAS,MAAA;AAAT,KAAmB;AAC1H,UAAM,IAAI,GAAG,WAAW,CAAC,UAAD,EAAa,KAAK,CAAC,MAAnB,CAAxB;AACA,UAAM,UAAU,GAAG,WAAW,CAAC,gBAAD,EAAmB,KAAK,CAAC,MAAzB,CAA9B;AACA,UAAM,QAAQ,GAAG,YAAY,CAAC,KAAD,EAAQ,IAAR,EAAc,UAAd,CAA7B;;AAEA,QAAI,QAAJ,EAAc;AACZ,aAAO,QAAQ,CAAC,OAAT,CAAiB,UAAjB,CAAP;AACD;;AAED,WAAO,QAAQ,CAAC,OAAT,CAAiB,IAAjB,EAAuB,UAAvB,CAAP;AACD,GAVoD;AAAA,CAA9C;;;;;;;ACAA,MAAM,UAAU,GAA8B,UAAC,UAAD;AAAA,MAAa,UAAb,uEAA0B,EAA1B;AAAA,SAAiC,UAAoB;AAAA,QAAnB;AAAE,MAAA,KAAF;AAAS,MAAA;AAAT,KAAmB;AACxG,UAAM,IAAI,GAAG,WAAW,CAAC,UAAD,EAAa,KAAK,CAAC,MAAnB,CAAxB;AACA,UAAM,QAAQ,GAAG,YAAY,CAAC,KAAD,EAAQ,IAAR,EAAc,UAAd,CAA7B;;AAEA,QAAI,QAAJ,EAAc;AACZ,aAAO,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAP;AACD;;AAED,WAAO,QAAQ,CAAC,MAAT,CAAgB,IAAhB,EAAsB,UAAtB,CAAP;AACD,GAToD;AAAA,CAA9C;;;;;;;ACHA,MAAM,aAAa,GAAiC,MAAM,UAAoB;AAAA,MAAnB;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,GAAmB;AACnF,QAAM,OAAO,GAAG,KAAK,CAAC,OAAtB;;AAEA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAAO,CAAC,MAA5B,EAAoC,CAAC,IAAI,CAAzC,EAA4C;AAC1C,UAAM,MAAM,GAAG,OAAO,CAAC,CAAD,CAAtB;AACA,QAAI,QAAJ,CAF0C,C;;;AAM1C,QAAI,MAAM,CAAC,IAAP,CAAY,YAAZ,KAA6B,QAAQ,GAAG,MAAM,CAAC,QAAP,CAAgB,KAAhB,CAAxC,CAAJ,EAAqE;AACnE,UAAI,QAAJ,EAAc;AACZ,cAAM,EAAE,GAAG,KAAK,CAAC,EAAjB;AACA,cAAM,MAAM,GAAG,QAAQ,CAAC,SAAxB;;AAEA,aAAK,IAAI,CAAC,GAAG,MAAM,CAAC,KAAP,CAAa,MAAb,GAAsB,CAAnC,EAAsC,CAAC,IAAI,CAA3C,EAA8C,CAAC,IAAI,CAAnD,EAAsD;AACpD,UAAA,EAAE,CAAC,IAAH,CAAQ,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,MAAhB,CAAuB,MAAM,CAAC,IAAP,CAAY,CAAZ,CAAvB,CAAR;AACD;;AAED,YAAI,QAAQ,CAAC,IAAb,EAAmB;AACjB,gBAAM,KAAK,GAAG,EAAE,CAAC,GAAH,CAAO,OAAP,CAAe,QAAQ,CAAC,IAAxB,EAA8B,KAA9B,EAAd;AAEA,UAAA,EAAE,CAAC,WAAH,CAAe,QAAQ,CAAC,IAAxB,EAA8B,QAAQ,CAAC,EAAvC,EAA2C,KAAK,CAAC,MAAN,CAAa,IAAb,CAAkB,QAAQ,CAAC,IAA3B,EAAiC,KAAjC,CAA3C;AACD,SAJD,MAIO;AACL,UAAA,EAAE,CAAC,MAAH,CAAU,QAAQ,CAAC,IAAnB,EAAyB,QAAQ,CAAC,EAAlC;AACD;AACF;;AAED,aAAO,IAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD,CAhCM;;;;;;;ACAA,MAAM,aAAa,GAAiC,MAAM,UAAiB;AAAA,MAAhB;AAAE,IAAA,EAAF;AAAM,IAAA;AAAN,GAAgB;AAChF,QAAM;AAAE,IAAA;AAAF,MAAgB,EAAtB;AACA,QAAM;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,MAAoB,SAA1B;;AAEA,MAAI,KAAJ,EAAW;AACT,WAAO,IAAP;AACD;;AAED,MAAI,QAAJ,EAAc;AACZ,IAAA,MAAM,CAAC,OAAP,CAAe,KAAK,IAAA;AAClB,MAAA,EAAE,CAAC,UAAH,CAAc,KAAK,CAAC,KAAN,CAAY,GAA1B,EAA+B,KAAK,CAAC,GAAN,CAAU,GAAzC;AACD,KAFD;AAGD;;AAED,SAAO,IAAP;AACD,CAfM;;;;;;;ACWA,MAAM,SAAS,GAA6B,UAAC,UAAD;AAAA,MAAa,OAAb,uEAAuB,EAAvB;AAAA,SAA8B,UAAwB;AAAA,QAAvB;AAAE,MAAA,EAAF;AAAM,MAAA,KAAN;AAAa,MAAA;AAAb,KAAuB;;;;AACvG,UAAM;AAAE,MAAA,oBAAoB,GAAG;AAAzB,QAAmC,OAAzC;AACA,UAAM;AAAE,MAAA;AAAF,QAAgB,EAAtB;AACA,UAAM,IAAI,GAAG,WAAW,CAAC,UAAD,EAAa,KAAK,CAAC,MAAnB,CAAxB;AACA,UAAM;AAAE,MAAA,KAAF;AAAS,MAAA,KAAT;AAAgB,MAAA;AAAhB,QAA2B,SAAjC;;AAEA,QAAI,CAAC,QAAL,EAAe;AACb,aAAO,IAAP;AACD;;AAED,QAAI,KAAK,IAAI,oBAAb,EAAmC;AACjC,UAAI;AAAE,QAAA,IAAF;AAAQ,QAAA;AAAR,UAAe,SAAnB;AACA,YAAM,KAAK,GAAG,CAAA,EAAA,GAAA,KAAK,CAAC,KAAN,GAAc,IAAd,CAAmB,IAAI,IAAI,IAAI,CAAC,IAAL,KAAc,IAAzC,CAAA,MAA8C,IAA9C,IAA8C,EAAA,KAAA,KAAA,CAA9C,GAA8C,KAAA,CAA9C,GAA8C,EAAA,CAAE,KAA9D;AACA,YAAM,KAAK,GAAG,YAAY,CAAC,KAAD,EAAQ,IAAR,EAAc,KAAd,CAA1B;;AAEA,UAAI,KAAJ,EAAW;AACT,QAAA,IAAI,GAAG,KAAK,CAAC,IAAb;AACA,QAAA,EAAE,GAAG,KAAK,CAAC,EAAX;AACD;;AAED,MAAA,EAAE,CAAC,UAAH,CAAc,IAAd,EAAoB,EAApB,EAAwB,IAAxB;AACD,KAXD,MAWO;AACL,MAAA,MAAM,CAAC,OAAP,CAAe,KAAK,IAAA;AAClB,QAAA,EAAE,CAAC,UAAH,CAAc,KAAK,CAAC,KAAN,CAAY,GAA1B,EAA+B,KAAK,CAAC,GAAN,CAAU,GAAzC,EAA8C,IAA9C;AACD,OAFD;AAGD;;AAED,IAAA,EAAE,CAAC,gBAAH,CAAoB,IAApB;AAEA,WAAO,IAAP;AACD,GA9BkD;AAAA,CAA5C;;;;;;;ACPA,MAAM,gBAAgB,GAAoC,UAAC,UAAD;AAAA,MAAa,UAAb,uEAA0B,EAA1B;AAAA,SAAiC,UAAwB;AAAA,QAAvB;AAAE,MAAA,EAAF;AAAM,MAAA,KAAN;AAAa,MAAA;AAAb,KAAuB;AACxH,QAAI,QAAQ,GAAoB,IAAhC;AACA,QAAI,QAAQ,GAAoB,IAAhC;AAEA,UAAM,UAAU,GAAG,uBAAuB,CACxC,OAAO,UAAP,KAAsB,QAAtB,GACI,UADJ,GAEI,UAAU,CAAC,IAHyB,EAIxC,KAAK,CAAC,MAJkC,CAA1C;;AAOA,QAAI,CAAC,UAAL,EAAiB;AACf,aAAO,KAAP;AACD;;AAED,QAAI,UAAU,KAAK,MAAnB,EAA2B;AACzB,MAAA,QAAQ,GAAG,WAAW,CAAC,UAAD,EAAyB,KAAK,CAAC,MAA/B,CAAtB;AACD;;AAED,QAAI,UAAU,KAAK,MAAnB,EAA2B;AACzB,MAAA,QAAQ,GAAG,WAAW,CAAC,UAAD,EAAyB,KAAK,CAAC,MAA/B,CAAtB;AACD;;AAED,QAAI,QAAJ,EAAc;AACZ,MAAA,EAAE,CAAC,SAAH,CAAa,MAAb,CAAoB,OAApB,CAA4B,KAAK,IAAA;AAC/B,cAAM,IAAI,GAAG,KAAK,CAAC,KAAN,CAAY,GAAzB;AACA,cAAM,EAAE,GAAG,KAAK,CAAC,GAAN,CAAU,GAArB;AAEA,QAAA,KAAK,CAAC,GAAN,CAAU,YAAV,CAAuB,IAAvB,EAA6B,EAA7B,EAAiC,CAAC,IAAD,EAAO,GAAP,KAAU;AACzC,cAAI,QAAQ,IAAI,QAAQ,KAAK,IAAI,CAAC,IAAlC,EAAwC;AACtC,YAAA,EAAE,CAAC,aAAH,CAAiB,GAAjB,EAAsB,SAAtB,EAAiC,EAC/B,GAAG,IAAI,CAAC,KADuB;AAE/B,iBAAG;AAF4B,aAAjC;AAID;;AAED,cAAI,QAAQ,IAAI,IAAI,CAAC,KAAL,CAAW,MAA3B,EAAmC;AACjC,YAAA,IAAI,CAAC,KAAL,CAAW,OAAX,CAAmB,IAAI,IAAA;AACrB,kBAAI,QAAQ,KAAK,IAAI,CAAC,IAAtB,EAA4B;AAC1B,sBAAM,WAAW,GAAG,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,IAAd,CAApB;AACA,sBAAM,SAAS,GAAG,IAAI,CAAC,GAAL,CAAS,GAAG,GAAG,IAAI,CAAC,QAApB,EAA8B,EAA9B,CAAlB;AAEA,gBAAA,EAAE,CAAC,OAAH,CAAW,WAAX,EAAwB,SAAxB,EAAmC,QAAQ,CAAC,MAAT,CAAgB,EACjD,GAAG,IAAI,CAAC,KADyC;AAEjD,qBAAG;AAF8C,iBAAhB,CAAnC;AAID;AACF,aAVD;AAWD;AACF,SArBD;AAsBD,OA1BD;AA2BD;;AAED,WAAO,IAAP;AACD,GAtDgE;AAAA,CAA1D;;;;;;;ACDA,MAAM,MAAM,GAA0B,UAAC,UAAD;AAAA,MAAa,UAAb,uEAA0B,EAA1B;AAAA,SAAiC,UAAoB;AAAA,QAAnB;AAAE,MAAA,KAAF;AAAS,MAAA;AAAT,KAAmB;AAChG,UAAM,IAAI,GAAG,WAAW,CAAC,UAAD,EAAa,KAAK,CAAC,MAAnB,CAAxB;AAEA,WAAOC,QAAc,CAAC,IAAD,EAAO,UAAP,CAAdA,CAAiC,KAAjCA,EAAwC,QAAxCA,CAAP;AACD,GAJ4C;AAAA,CAAtC;;;;;;;ACAA,MAAM,UAAU,GAA8B,UAAC,UAAD;AAAA,MAAa,UAAb,uEAA0B,EAA1B;AAAA,SAAiC,UAAoB;AAAA,QAAnB;AAAE,MAAA,KAAF;AAAS,MAAA;AAAT,KAAmB;AACxG,UAAM,IAAI,GAAG,WAAW,CAAC,UAAD,EAAa,KAAK,CAAC,MAAnB,CAAxB;AAEA,WAAOC,YAAkB,CAAC,IAAD,EAAO,UAAP,CAAlBA,CAAqC,KAArCA,EAA4C,QAA5CA,CAAP;AACD,GAJoD;AAAA,CAA9C;;;;;;ACmFA,MAAM,QAAQ,GAAG,SAAS,CAAC,MAAV,CAAiB;AACvC,EAAA,IAAI,EAAE,UADiC;;AAGvC,EAAA,WAAW,GAAA;AACT,WAAO,EACL,GAAGC,MADE;AAEL,SAAGC,cAFE;AAGL,SAAGC,YAHE;AAIL,SAAGC,SAJE;AAKL,SAAGC,qBALE;AAML,SAAGC,YANE;AAOL,SAAGC,aAPE;AAQL,SAAGC,iBARE;AASL,SAAGC,OATE;AAUL,SAAGC,UAVE;AAWL,SAAGC,iBAXE;AAYL,SAAGC,OAZE;AAaL,SAAGC,OAbE;AAcL,SAAGC,SAdE;AAeL,SAAGC,eAfE;AAgBL,SAAGC,iBAhBE;AAiBL,SAAGC,cAjBE;AAkBL,SAAGC,aAlBE;AAmBL,SAAGC,kBAnBE;AAoBL,SAAGC,MApBE;AAqBL,SAAGC,gBArBE;AAsBL,SAAGC,cAtBE;AAuBL,SAAGC,eAvBE;AAwBL,SAAGC,iBAxBE;AAyBL,SAAGC,gBAzBE;AA0BL,SAAGC,WA1BE;AA2BL,SAAGC,oBA3BE;AA4BL,SAAGC,mBA5BE;AA6BL,SAAGC,kBA7BE;AA8BL,SAAGC,YA9BE;AA+BL,SAAGC,SA/BE;AAgCL,SAAGC,SAhCE;AAiCL,SAAGC,SAjCE;AAkCL,SAAGC,kBAlCE;AAmCL,SAAGC,kBAnCE;AAoCL,SAAGC,cApCE;AAqCL,SAAGC,YArCE;AAsCL,SAAGC,eAtCE;AAuCL,SAAGC,YAvCE;AAwCL,SAAGC,YAxCE;AAyCL,SAAGC,YAzCE;AA0CL,SAAGC,YA1CE;AA2CL,SAAGC,eA3CE;AA4CL,SAAGC,eA5CE;AA6CL,SAAGC,WA7CE;AA8CL,SAAGC,kBA9CE;AA+CL,SAAGC,QA/CE;AAgDL,SAAGC;AAhDE,KAAP;AAkDD;;AAtDsC,CAAjB,CAAjB;AChGA,MAAM,QAAQ,GAAG,SAAS,CAAC,MAAV,CAAiB;AACvC,EAAA,IAAI,EAAE,UADiC;;AAGvC,EAAA,qBAAqB,GAAA;AACnB,WAAO,CACL,IAAI,MAAJ,CAAW;AACT,MAAA,GAAG,EAAE,IAAI,SAAJ,CAAc,UAAd,CADI;AAET,MAAA,KAAK,EAAE;AACL,QAAA,QAAQ,EAAE,MAAM,KAAK,MAAL,CAAY,OAAZ,CAAoB;AAD/B;AAFE,KAAX,CADK,CAAP;AAQD;;AAZsC,CAAjB,CAAjB;ACAA,MAAM,WAAW,GAAG,SAAS,CAAC,MAAV,CAAiB;AAC1C,EAAA,IAAI,EAAE,aADoC;;AAG1C,EAAA,qBAAqB,GAAA;AACnB,UAAM;AAAE,MAAA;AAAF,QAAa,IAAnB;AAEA,WAAO,CACL,IAAI,MAAJ,CAAW;AACT,MAAA,GAAG,EAAE,IAAI,SAAJ,CAAc,aAAd,CADI;AAET,MAAA,KAAK,EAAE;AACL,QAAA,eAAe,EAAE;AACf,UAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,KAAY;AACjB,YAAA,MAAM,CAAC,SAAP,GAAmB,IAAnB;AAEA,kBAAM,WAAW,GAAG,MAAM,CAAC,KAAP,CAAa,EAAb,CACjB,OADiB,CACT,OADS,EACA;AAAE,cAAA;AAAF,aADA,EAEjB,OAFiB,CAET,cAFS,EAEO,KAFP,CAApB;AAIA,YAAA,IAAI,CAAC,QAAL,CAAc,WAAd;AAEA,mBAAO,KAAP;AACD,WAXc;AAYf,UAAA,IAAI,EAAE,CAAC,IAAD,EAAO,KAAP,KAAY;AAChB,YAAA,MAAM,CAAC,SAAP,GAAmB,KAAnB;AAEA,kBAAM,WAAW,GAAG,MAAM,CAAC,KAAP,CAAa,EAAb,CACjB,OADiB,CACT,MADS,EACD;AAAE,cAAA;AAAF,aADC,EAEjB,OAFiB,CAET,cAFS,EAEO,KAFP,CAApB;AAIA,YAAA,IAAI,CAAC,QAAL,CAAc,WAAd;AAEA,mBAAO,KAAP;AACD;AAtBc;AADZ;AAFE,KAAX,CADK,CAAP;AA+BD;;AArCyC,CAAjB,CAApB;;SCDS,oB,CAAqB,M,EAGpC;AACC,QAAM;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,MAAyB,MAA/B;AACA,MAAI;AAAE,IAAA;AAAF,MAAgB,WAApB;AACA,MAAI;AAAE,IAAA;AAAF,MAAU,WAAd;AACA,MAAI;AAAE,IAAA;AAAF,MAAkB,WAAtB;AAEA,SAAO,EACL,GAAG,KADE;AAEL,IAAA,MAAM,EAAE,KAAK,CAAC,MAFT;AAGL,IAAA,OAAO,EAAE,KAAK,CAAC,OAHV;AAIL,IAAA,KAAK,EAAE,KAAK,CAAC,KAAN,CAAY,IAAZ,CAAiB,KAAjB,CAJF;AAKL,IAAA,gBAAgB,EAAE,KAAK,CAAC,gBAAN,CAAuB,IAAvB,CAA4B,KAA5B,CALb;AAML,IAAA,WAAW,EAAE,KAAK,CAAC,WAAN,CAAkB,IAAlB,CAAuB,KAAvB,CANR;AAOL,IAAA,MAAM,EAAE,KAAK,CAAC,MAAN,CAAa,IAAb,CAAkB,KAAlB,CAPH;;AAQL,QAAI,WAAJ,GAAe;AACb,aAAO,WAAP;AACD,KAVI;;AAWL,QAAI,SAAJ,GAAa;AACX,aAAO,SAAP;AACD,KAbI;;AAcL,QAAI,GAAJ,GAAO;AACL,aAAO,GAAP;AACD,KAhBI;;AAiBL,QAAI,EAAJ,GAAM;AACJ,MAAA,SAAS,GAAG,WAAW,CAAC,SAAxB;AACA,MAAA,GAAG,GAAG,WAAW,CAAC,GAAlB;AACA,MAAA,WAAW,GAAG,WAAW,CAAC,WAA1B;AAEA,aAAO,WAAP;AACD;;AAvBI,GAAP;AAyBF;;MCzBa,c,CAAc;AAQzB,EAAA,WAAA,CAAY,KAAZ,EAGC;AACC,SAAK,MAAL,GAAc,KAAK,CAAC,MAApB;AACA,SAAK,WAAL,GAAmB,KAAK,MAAL,CAAY,gBAAZ,CAA6B,QAAhD;AACA,SAAK,WAAL,GAAmB,KAAK,CAAC,KAAzB;AACD;;AAEiB,MAAd,cAAc,GAAA;AAChB,WAAO,CAAC,CAAC,KAAK,WAAd;AACD;;AAEQ,MAAL,KAAK,GAAA;AACP,WAAO,KAAK,WAAL,IAAoB,KAAK,MAAL,CAAY,KAAvC;AACD;;AAEW,MAAR,QAAQ,GAAA;AAAA;;AACV,UAAM;AAAE,MAAA,WAAF;AAAe,MAAA,MAAf;AAAuB,MAAA;AAAvB,QAAiC,IAAvC;AACA,UAAM;AAAE,MAAA;AAAF,QAAW,MAAjB;AACA,UAAM;AAAE,MAAA;AAAF,QAAS,KAAf;AACA,UAAM,KAAK,GAAG,KAAK,UAAL,CAAgB,EAAhB,CAAd;AAEA,WAAO,MAAM,CAAC,WAAP,CAAmB,MAAM,CAC7B,OADuB,CACf,WADe,EAEvB,GAFuB,CAEnB,UAAgB;AAAA,UAAf,CAAC,IAAD,EAAO,OAAP,CAAe;;AACnB,YAAM,MAAM,GAAG,YAAe;AAC5B,cAAM,QAAQ,GAAG,OAAO,CAAC,YAAD,CAAP,CAAiB,KAAjB,CAAjB;;AAEA,YAAI,CAAC,EAAE,CAAC,OAAH,CAAW,iBAAX,CAAD,IAAkC,CAAC,KAAI,CAAC,cAA5C,EAA4D;AAC1D,UAAA,IAAI,CAAC,QAAL,CAAc,EAAd;AACD;;AAED,eAAO,QAAP;AACD,OARD;;AAUA,aAAO,CAAC,IAAD,EAAO,MAAP,CAAP;AACD,KAduB,CAAnB,CAAP;AAeD;;AAEQ,MAAL,KAAK,GAAA;AACP,WAAO,MAAM,KAAK,WAAL,EAAb;AACD;;AAEM,MAAH,GAAG,GAAA;AACL,WAAO,MAAM,KAAK,SAAL,EAAb;AACD;;AAEM,EAAA,WAAW,CAAC,OAAD,EAA6C;AAAA;;AAAA,QAArB,cAAqB,uEAAJ,IAAI;AAC7D,UAAM;AAAE,MAAA,WAAF;AAAe,MAAA,MAAf;AAAuB,MAAA;AAAvB,QAAiC,IAAvC;AACA,UAAM;AAAE,MAAA;AAAF,QAAW,MAAjB;AACA,UAAM,SAAS,GAAc,EAA7B;AACA,UAAM,mBAAmB,GAAG,CAAC,CAAC,OAA9B;AACA,UAAM,EAAE,GAAG,OAAO,IAAI,KAAK,CAAC,EAA5B;;AAEA,UAAM,GAAG,GAAG,MAAA;AACV,UACE,CAAC,mBAAD,IACG,cADH,IAEG,CAAC,EAAE,CAAC,OAAH,CAAW,iBAAX,CAFJ,IAGG,CAAC,KAAK,cAJX,EAKE;AACA,QAAA,IAAI,CAAC,QAAL,CAAc,EAAd;AACD;;AAED,aAAO,SAAS,CAAC,KAAV,CAAgB,QAAQ,IAAI,QAAQ,KAAK,IAAzC,CAAP;AACD,KAXD;;AAaA,UAAM,KAAK,GAAG,EACZ,GAAG,MAAM,CAAC,WAAP,CAAmB,MAAM,CAAC,OAAP,CAAe,WAAf,EAA4B,GAA5B,CAAgC,UAAgB;AAAA,YAAf,CAAC,IAAD,EAAO,OAAP,CAAe;;AACpE,cAAM,cAAc,GAAG,YAAiB;AACtC,gBAAM,KAAK,GAAG,MAAI,CAAC,UAAL,CAAgB,EAAhB,EAAoB,cAApB,CAAd;;AACA,gBAAM,QAAQ,GAAG,OAAO,CAAC,YAAD,CAAP,CAAiB,KAAjB,CAAjB;AAEA,UAAA,SAAS,CAAC,IAAV,CAAe,QAAf;AAEA,iBAAO,KAAP;AACD,SAPD;;AASA,eAAO,CAAC,IAAD,EAAO,cAAP,CAAP;AACD,OAXqB,CAAnB,CADS;AAaZ,MAAA;AAbY,KAAd;AAgBA,WAAO,KAAP;AACD;;AAEM,EAAA,SAAS,CAAC,OAAD,EAAsB;AACpC,UAAM;AAAE,MAAA,WAAF;AAAe,MAAA;AAAf,QAAyB,IAA/B;AACA,UAAM,QAAQ,GAAG,SAAjB;AACA,UAAM,EAAE,GAAG,OAAO,IAAI,KAAK,CAAC,EAA5B;AACA,UAAM,KAAK,GAAG,KAAK,UAAL,CAAgB,EAAhB,EAAoB,QAApB,CAAd;AACA,UAAM,iBAAiB,GAAG,MAAM,CAAC,WAAP,CAAmB,MAAM,CAChD,OAD0C,CAClC,WADkC,EAE1C,GAF0C,CAEtC,UAAgB;AAAA,UAAf,CAAC,IAAD,EAAO,OAAP,CAAe;AACnB,aAAO,CAAC,IAAD,EAAO;AAAA,eAAsB,OAAO,CAAC,YAAD,CAAP,CAAiB,EAAE,GAAG,KAAL;AAAY,UAAA;AAAZ,SAAjB,CAAtB;AAAA,OAAP,CAAP;AACD,KAJ0C,CAAnB,CAA1B;AAMA,WAAO,EACL,GAAG,iBADE;AAEL,MAAA,KAAK,EAAE,MAAM,KAAK,WAAL,CAAiB,EAAjB,EAAqB,QAArB;AAFR,KAAP;AAID;;AAEM,EAAA,UAAU,CAAC,EAAD,EAAuC;AAAA,QAArB,cAAqB,uEAAJ,IAAI;AACtD,UAAM;AAAE,MAAA,WAAF;AAAe,MAAA,MAAf;AAAuB,MAAA;AAAvB,QAAiC,IAAvC;AACA,UAAM;AAAE,MAAA;AAAF,QAAW,MAAjB;;AAEA,QAAI,KAAK,CAAC,WAAV,EAAuB;AACrB,MAAA,EAAE,CAAC,cAAH,CAAkB,KAAK,CAAC,WAAxB;AACD;;AAED,UAAM,KAAK,GAAiB;AAC1B,MAAA,EAD0B;AAE1B,MAAA,MAF0B;AAG1B,MAAA,IAH0B;AAI1B,MAAA,KAAK,EAAE,oBAAoB,CAAC;AAC1B,QAAA,KAD0B;AAE1B,QAAA,WAAW,EAAE;AAFa,OAAD,CAJD;AAQ1B,MAAA,QAAQ,EAAE,cAAc,GACpB,MAAM,SADc,GAEpB,SAVsB;AAW1B,MAAA,KAAK,EAAE,MAAM,KAAK,WAAL,CAAiB,EAAjB,CAXa;AAY1B,MAAA,GAAG,EAAE,MAAM,KAAK,SAAL,CAAe,EAAf,CAZe;;AAa1B,UAAI,QAAJ,GAAY;AACV,eAAO,MAAM,CAAC,WAAP,CAAmB,MAAM,CAC7B,OADuB,CACf,WADe,EAEvB,GAFuB,CAEnB,UAAgB;AAAA,cAAf,CAAC,IAAD,EAAO,OAAP,CAAe;AACnB,iBAAO,CAAC,IAAD,EAAO;AAAA,mBAAsB,OAAO,CAAC,YAAD,CAAP,CAAiB,KAAjB,CAAtB;AAAA,WAAP,CAAP;AACD,SAJuB,CAAnB,CAAP;AAKD;;AAnByB,KAA5B;AAsBA,WAAO,KAAP;AACD;;AA/IwB;;ACNpB,MAAM,MAAM,GAAG,SAAS,CAAC,MAAV,CAAiB;AACrC,EAAA,IAAI,EAAE,QAD+B;;AAGrC,EAAA,oBAAoB,GAAA;AAClB,UAAM,eAAe,GAAG,MAAM,KAAK,MAAL,CAAY,QAAZ,CAAqB,KAArB,CAA2B;AAAA,UAAC;AAAE,QAAA;AAAF,OAAD;AAAA,aAAkB,CACzE,MAAM,QAAQ,CAAC,aAAT,EADmE,E;AAGzE,YAAM,QAAQ,CAAC,OAAT,CAAiB,UAAO;AAAA,YAAN;AAAE,UAAA;AAAF,SAAM;AAC5B,cAAM;AAAE,UAAA,SAAF;AAAa,UAAA;AAAb,YAAqB,EAA3B;AACA,cAAM;AAAE,UAAA,KAAF;AAAS,UAAA;AAAT,YAAqB,SAA3B;AACA,cAAM;AAAE,UAAA,GAAF;AAAO,UAAA;AAAP,YAAkB,OAAxB;AACA,cAAM,SAAS,GAAG,SAAS,CAAC,OAAV,CAAkB,GAAlB,EAAuB,IAAvB,KAAgC,GAAlD;;AAEA,YACE,CAAC,KAAD,IACG,CAAC,SADJ,IAEG,CAAC,MAAM,CAAC,IAAP,CAAY,WAFhB,IAGG,MAAM,CAAC,WAAP,CAAmB,MAJxB,EAKE;AACA,iBAAO,KAAP;AACD;;AAED,eAAO,QAAQ,CAAC,UAAT,EAAP;AACD,OAhBK,CAHmE,EAoBzE,MAAM,QAAQ,CAAC,eAAT,EApBmE,EAqBzE,MAAM,QAAQ,CAAC,YAAT,EArBmE,EAsBzE,MAAM,QAAQ,CAAC,kBAAT,EAtBmE,CAAlB;AAAA,KAA3B,CAA9B;;AAyBA,UAAM,YAAY,GAAG,MAAM,KAAK,MAAL,CAAY,QAAZ,CAAqB,KAArB,CAA2B;AAAA,UAAC;AAAE,QAAA;AAAF,OAAD;AAAA,aAAkB,CACtE,MAAM,QAAQ,CAAC,eAAT,EADgE,EAEtE,MAAM,QAAQ,CAAC,WAAT,EAFgE,EAGtE,MAAM,QAAQ,CAAC,iBAAT,EAHgE,CAAlB;AAAA,KAA3B,CAA3B;;AAMA,WAAO;AACL,MAAA,KAAK,EAAE,MAAM,KAAK,MAAL,CAAY,QAAZ,CAAqB,KAArB,CAA2B;AAAA,YAAC;AAAE,UAAA;AAAF,SAAD;AAAA,eAAkB,CACxD,MAAM,QAAQ,CAAC,aAAT,EADkD,EAExD,MAAM,QAAQ,CAAC,mBAAT,EAFkD,EAGxD,MAAM,QAAQ,CAAC,cAAT,EAHkD,EAIxD,MAAM,QAAQ,CAAC,UAAT,EAJkD,CAAlB;AAAA,OAA3B,CADR;AAOL,mBAAa,MAAM,KAAK,MAAL,CAAY,QAAZ,CAAqB,QAArB,EAPd;AAQL,MAAA,SAAS,EAAE,eARN;AASL,uBAAiB,eATZ;AAUL,yBAAmB,eAVd;AAWL,MAAA,MAAM,EAAE,YAXH;AAYL,oBAAc,YAZT;AAaL,eAAS,MAAM,KAAK,MAAL,CAAY,QAAZ,CAAqB,SAArB;AAbV,KAAP;AAeD,GAlDoC;;AAoDrC,EAAA,qBAAqB,GAAA;AACnB,WAAO,C;;;;;AAML,QAAI,MAAJ,CAAW;AACT,MAAA,GAAG,EAAE,IAAI,SAAJ,CAAc,eAAd,CADI;AAET,MAAA,iBAAiB,EAAE,CAAC,YAAD,EAAe,QAAf,EAAyB,QAAzB,KAAiC;AAClD,cAAM,UAAU,GAAG,YAAY,CAAC,IAAb,CAAkB,WAAW,IAAI,WAAW,CAAC,UAA7C,KACd,CAAC,QAAQ,CAAC,GAAT,CAAa,EAAb,CAAgB,QAAQ,CAAC,GAAzB,CADN;;AAGA,YAAI,CAAC,UAAL,EAAiB;AACf;AACD;;AAED,cAAM;AAAE,UAAA,KAAF;AAAS,UAAA,IAAT;AAAe,UAAA;AAAf,YAAsB,QAAQ,CAAC,SAArC;AACA,cAAM,OAAO,GAAG,SAAS,CAAC,OAAV,CAAkB,QAAQ,CAAC,GAA3B,EAAgC,IAAhD;AACA,cAAM,MAAM,GAAG,SAAS,CAAC,KAAV,CAAgB,QAAQ,CAAC,GAAzB,EAA8B,EAA7C;AACA,cAAM,cAAc,GAAG,IAAI,KAAK,OAAT,IAAoB,EAAE,KAAK,MAAlD;AACA,cAAM,OAAO,GAAG,QAAQ,CAAC,GAAT,CAAa,WAAb,CAAyB,CAAzB,EAA4B,QAAQ,CAAC,GAAT,CAAa,OAAb,CAAqB,IAAjD,EAAuD,GAAvD,EAA4D,GAA5D,EAAiE,MAAjE,KAA4E,CAA5F;;AAEA,YAAI,KAAK,IAAI,CAAC,cAAV,IAA4B,CAAC,OAAjC,EAA0C;AACxC;AACD;;AAED,cAAM,EAAE,GAAG,QAAQ,CAAC,EAApB;AACA,cAAM,KAAK,GAAG,oBAAoB,CAAC;AACjC,UAAA,KAAK,EAAE,QAD0B;AAEjC,UAAA,WAAW,EAAE;AAFoB,SAAD,CAAlC;AAIA,cAAM;AAAE,UAAA;AAAF,YAAe,IAAI,cAAJ,CAAmB;AACtC,UAAA,MAAM,EAAE,KAAK,MADyB;AAEtC,UAAA;AAFsC,SAAnB,CAArB;AAKA,QAAA,QAAQ,CAAC,UAAT;;AAEA,YAAI,CAAC,EAAE,CAAC,KAAH,CAAS,MAAd,EAAsB;AACpB;AACD;;AAED,eAAO,EAAP;AACD;AArCQ,KAAX,CANK,CAAP;AA8CD;;AAnGoC,CAAjB,CAAf;ACFA,MAAM,QAAQ,GAAG,SAAS,CAAC,MAAV,CAAiB;AACvC,EAAA,IAAI,EAAE,UADiC;;AAGvC,EAAA,qBAAqB,GAAA;AACnB,WAAO,CACL,IAAI,MAAJ,CAAW;AACT,MAAA,GAAG,EAAE,IAAI,SAAJ,CAAc,UAAd,CADI;AAET,MAAA,KAAK,EAAE;AACL,QAAA,UAAU,EAAE;AACV,UAAA,QAAQ,EAAE;AADA;AADP;AAFE,KAAX,CADK,CAAP;AAUD;;AAdsC,CAAjB,CAAjB;;;;;;;;;;;SCCS,iB,CAAkB,K,EAAoB,U,EAA6B;AACjF,QAAM,IAAI,GAAG,WAAW,CAAC,UAAD,EAAa,KAAK,CAAC,MAAnB,CAAxB;AACA,QAAM;AAAE,IAAA,IAAF;AAAQ,IAAA;AAAR,MAAe,KAAK,CAAC,SAA3B;AACA,QAAM,KAAK,GAAW,EAAtB;AAEA,EAAA,KAAK,CAAC,GAAN,CAAU,YAAV,CAAuB,IAAvB,EAA6B,EAA7B,EAAiC,IAAI,IAAA;AACnC,IAAA,KAAK,CAAC,IAAN,CAAW,IAAX;AACD,GAFD;AAIA,QAAM,IAAI,GAAG,KAAK,CACf,OADU,GAEV,IAFU,CAEL,QAAQ,IAAI,QAAQ,CAAC,IAAT,CAAc,IAAd,KAAuB,IAAI,CAAC,IAFnC,CAAb;;AAIA,MAAI,CAAC,IAAL,EAAW;AACT,WAAO,EAAP;AACD;;AAED,SAAO,EAAE,GAAG,IAAI,CAAC;AAAV,GAAP;AACF;;SChBgB,a,CACd,K,EACA,U,EAAwC;AAExC,QAAM,UAAU,GAAG,uBAAuB,CACxC,OAAO,UAAP,KAAsB,QAAtB,GACI,UADJ,GAEI,UAAU,CAAC,IAHyB,EAIxC,KAAK,CAAC,MAJkC,CAA1C;;AAOA,MAAI,UAAU,KAAK,MAAnB,EAA2B;AACzB,WAAO,iBAAiB,CAAC,KAAD,EAAQ,UAAR,CAAxB;AACD;;AAED,MAAI,UAAU,KAAK,MAAnB,EAA2B;AACzB,WAAO,iBAAiB,CAAC,KAAD,EAAQ,UAAR,CAAxB;AACD;;AAED,SAAO,EAAP;AACF;;SCrBgB,Q,CAAS,K,EAAoB,I,EAAyD;AAAA,MAApC,UAAoC,uEAAF,EAAE;;AACpG,MAAI,CAAC,IAAL,EAAW;AACT,WAAO,YAAY,CAAC,KAAD,EAAQ,IAAR,EAAc,UAAd,CAAZ,IAAyC,YAAY,CAAC,KAAD,EAAQ,IAAR,EAAc,UAAd,CAA5D;AACD;;AAED,QAAM,UAAU,GAAG,uBAAuB,CAAC,IAAD,EAAO,KAAK,CAAC,MAAb,CAA1C;;AAEA,MAAI,UAAU,KAAK,MAAnB,EAA2B;AACzB,WAAO,YAAY,CAAC,KAAD,EAAQ,IAAR,EAAc,UAAd,CAAnB;AACD;;AAED,MAAI,UAAU,KAAK,MAAnB,EAA2B;AACzB,WAAO,YAAY,CAAC,KAAD,EAAQ,IAAR,EAAc,UAAd,CAAnB;AACD;;AAED,SAAO,KAAP;AACF;;SCnBgB,mB,CAAoB,Q,EAAoB,M,EAAc;AACpE,QAAM,gBAAgB,GAAG,aAAa,CACnC,UADsB,CACX,MADW,EAEtB,iBAFsB,CAEJ,QAFI,CAAzB;AAIA,QAAM,iBAAiB,GAAG,QAAQ,CAAC,cAAT,CAAwB,kBAAxB,EAA1B;AACA,QAAM,SAAS,GAAG,iBAAiB,CAAC,aAAlB,CAAgC,KAAhC,CAAlB;AAEA,EAAA,SAAS,CAAC,WAAV,CAAsB,gBAAtB;AAEA,SAAO,SAAS,CAAC,SAAjB;AACF;;SCTgB,O,CACd,I,EACA,O,EAGC;AAED,QAAM,KAAK,GAAG;AACZ,IAAA,IAAI,EAAE,CADM;AAEZ,IAAA,EAAE,EAAE,IAAI,CAAC,OAAL,CAAa;AAFL,GAAd;AAKA,SAAO,cAAc,CAAC,IAAD,EAAO,KAAP,EAAc,OAAd,CAArB;AACF;;SCfgB,W,CAAY,I,EAAqB;;;AAC/C,QAAM,cAAc,GAAG,CAAA,EAAA,GAAA,IAAI,CAAC,IAAL,CAAU,aAAV,EAAA,MAAyB,IAAzB,IAAyB,EAAA,KAAA,KAAA,CAAzB,GAAyB,KAAA,CAAzB,GAAyB,EAAA,CAAE,MAAF,EAAhD;AACA,QAAM,OAAO,GAAG,IAAI,CAAC,MAAL,EAAhB;AAEA,SAAO,IAAI,CAAC,SAAL,CAAe,cAAf,MAAmC,IAAI,CAAC,SAAL,CAAe,OAAf,CAA1C;AACF;;SCPgB,c,CAAe,K,EAAa;AAC1C,QAAM,cAAc,GAAsB,QAAQ,CAAC,aAAT,CAAuB,0BAAvB,CAA1C;;AAEA,MAAI,cAAc,KAAK,IAAvB,EAA6B;AAC3B,WAAO,cAAP;AACD;;AAED,QAAM,SAAS,GAAG,QAAQ,CAAC,aAAT,CAAuB,OAAvB,CAAlB;AAEA,EAAA,SAAS,CAAC,YAAV,CAAuB,mBAAvB,EAA4C,EAA5C;AACA,EAAA,SAAS,CAAC,SAAV,GAAsB,KAAtB;AACA,EAAA,QAAQ,CAAC,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,EAAyC,WAAzC,CAAqD,SAArD;AAEA,SAAO,SAAP;AACF;;MCWa,S,CAAS;AAYpB,EAAA,WAAA,CAAY,MAAZ,EAUC;AACC,SAAK,IAAL,GAAY,MAAM,CAAC,IAAnB;AACA,SAAK,OAAL,GAAe,MAAM,CAAC,OAAtB;AACD;;AAzBmB;;AA4BtB,MAAM,uBAAuB,GAAG,CAAC,IAAD,EAAe,IAAf,KAAoC;AAClE,MAAI,QAAQ,CAAC,IAAD,CAAZ,EAAoB;AAClB,WAAO,IAAI,CAAC,IAAL,CAAU,IAAV,CAAP;AACD;;AAED,QAAM,cAAc,GAAG,IAAI,CAAC,IAAD,CAA3B;;AAEA,MAAI,CAAC,cAAL,EAAqB;AACnB,WAAO,IAAP;AACD;;AAED,QAAM,MAAM,GAA6B,EAAzC;AAEA,EAAA,MAAM,CAAC,IAAP,CAAY,cAAc,CAAC,IAA3B;AACA,EAAA,MAAM,CAAC,KAAP,GAAe,cAAc,CAAC,KAA9B;AACA,EAAA,MAAM,CAAC,KAAP,GAAe,IAAf;AACA,EAAA,MAAM,CAAC,IAAP,GAAc,cAAc,CAAC,IAA7B;;AAEA,MAAI,cAAc,CAAC,WAAnB,EAAgC;AAC9B,QAAI,CAAC,cAAc,CAAC,IAAf,CAAoB,QAApB,CAA6B,cAAc,CAAC,WAA5C,CAAL,EAA+D;AAC7D,MAAA,OAAO,CAAC,IAAR,CAAa,oFAAb;AACD;;AAED,IAAA,MAAM,CAAC,IAAP,CAAY,cAAc,CAAC,WAA3B;AACD;;AAED,SAAO,MAAP;AACD,CA3BD;;AA6BA,SAASC,KAAT,CAAa,MAAb,EAOC;;;AACC,QAAM;AACJ,IAAA,MADI;AAEJ,IAAA,IAFI;AAGJ,IAAA,EAHI;AAIJ,IAAA,IAJI;AAKJ,IAAA,KALI;AAMJ,IAAA;AANI,MAOF,MAPJ;AAQA,QAAM;AAAE,IAAA;AAAF,MAAW,MAAjB;;AAEA,MAAI,IAAI,CAAC,SAAT,EAAoB;AAClB,WAAO,KAAP;AACD;;AAED,QAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAe,OAAf,CAAuB,IAAvB,CAAd;;AAEA,O;AAEE,EAAA,KAAK,CAAC,MAAN,CAAa,IAAb,CAAkB,IAAlB,CAAuB,IAAvB,C;AAAA,KAEG,CAAC,EAAC,CAAA,EAAA,GAAC,KAAK,CAAC,UAAN,IAAoB,KAAK,CAAC,SAA3B,MAAqC,IAArC,IAAqC,EAAA,KAAA,KAAA,CAArC,GAAqC,KAAA,CAArC,GAAqC,EAAA,CAAE,KAAF,CAAQ,IAAR,CAAa,IAAI,IAAI,IAAI,CAAC,IAAL,CAAU,IAAV,CAAe,IAApC,CAAtC,CAJN,EAKE;AACA,WAAO,KAAP;AACD;;AAED,MAAI,OAAO,GAAG,KAAd;AACA,QAAM,QAAQ,GAAG,GAAjB;AACA,QAAM,UAAU,GAAG,KAAK,CAAC,MAAN,CAAa,WAAb,CACjB,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,KAAK,CAAC,YAAN,GAAqB,QAAjC,CADiB,EAEjB,KAAK,CAAC,YAFW,EAGjB,SAHiB,EAIjB,GAJiB,IAKf,IALJ;AAOA,EAAA,KAAK,CAAC,OAAN,CAAc,IAAI,IAAA;AAChB,QAAI,OAAJ,EAAa;AACX;AACD;;AAED,UAAM,KAAK,GAAG,uBAAuB,CAAC,UAAD,EAAa,IAAI,CAAC,IAAlB,CAArC;;AAEA,QAAI,CAAC,KAAL,EAAY;AACV;AACD;;AAED,UAAM,EAAE,GAAG,IAAI,CAAC,KAAL,CAAW,EAAtB;AACA,UAAM,KAAK,GAAG,oBAAoB,CAAC;AACjC,MAAA,KAAK,EAAE,IAAI,CAAC,KADqB;AAEjC,MAAA,WAAW,EAAE;AAFoB,KAAD,CAAlC;AAIA,UAAM,KAAK,GAAG;AACZ,MAAA,IAAI,EAAE,IAAI,IAAI,KAAK,CAAC,CAAD,CAAL,CAAS,MAAT,GAAkB,IAAI,CAAC,MAA3B,CADE;AAEZ,MAAA;AAFY,KAAd;AAKA,UAAM;AAAE,MAAA,QAAF;AAAY,MAAA,KAAZ;AAAmB,MAAA;AAAnB,QAA2B,IAAI,cAAJ,CAAmB;AAClD,MAAA,MADkD;AAElD,MAAA;AAFkD,KAAnB,CAAjC;AAKA,IAAA,IAAI,CAAC,OAAL,CAAa;AACX,MAAA,KADW;AAEX,MAAA,KAFW;AAGX,MAAA,KAHW;AAIX,MAAA,QAJW;AAKX,MAAA,KALW;AAMX,MAAA;AANW,KAAb,EA1BgB,C;;AAoChB,QAAI,CAAC,EAAE,CAAC,KAAH,CAAS,MAAd,EAAsB;AACpB;AACD,KAtCe,C;;;;AA0ChB,IAAA,EAAE,CAAC,OAAH,CAAW,MAAX,EAAmB;AACjB,MAAA,SAAS,EAAE,EADM;AAEjB,MAAA,IAFiB;AAGjB,MAAA,EAHiB;AAIjB,MAAA;AAJiB,KAAnB;AAOA,IAAA,IAAI,CAAC,QAAL,CAAc,EAAd;AACA,IAAA,OAAO,GAAG,IAAV;AACD,GAnDD;AAqDA,SAAO,OAAP;AACD;AAED;;;;;;;SAKgB,gB,CAAiB,K,EAA6C;AAC5E,QAAM;AAAE,IAAA,MAAF;AAAU,IAAA;AAAV,MAAoB,KAA1B;AACA,QAAM,MAAM,GAAG,IAAI,MAAJ,CAAW;AACxB,IAAA,KAAK,EAAE;AACL,MAAA,IAAI,GAAA;AACF,eAAO,IAAP;AACD,OAHI;;AAIL,MAAA,KAAK,CAAC,EAAD,EAAK,IAAL,EAAS;AACZ,cAAM,MAAM,GAAG,EAAE,CAAC,OAAH,CAAW,IAAX,CAAf;;AAEA,YAAI,MAAJ,EAAY;AACV,iBAAO,MAAP;AACD;;AAED,eAAO,EAAE,CAAC,YAAH,IAAmB,EAAE,CAAC,UAAtB,GACH,IADG,GAEH,IAFJ;AAGD;;AAdI,KADiB;AAkBxB,IAAA,KAAK,EAAE;AACL,MAAA,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,EAAb,EAAiB,IAAjB,EAAqB;AAClC,eAAOA,KAAG,CAAC;AACT,UAAA,MADS;AAET,UAAA,IAFS;AAGT,UAAA,EAHS;AAIT,UAAA,IAJS;AAKT,UAAA,KALS;AAMT,UAAA;AANS,SAAD,CAAV;AAQD,OAVI;;AAYL,MAAA,eAAe,EAAE;AACf,QAAA,cAAc,EAAE,IAAI,IAAA;AAClB,UAAA,UAAU,CAAC,MAAA;AACT,kBAAM;AAAE,cAAA;AAAF,gBAAc,IAAI,CAAC,KAAL,CAAW,SAA/B;;AAEA,gBAAI,OAAJ,EAAa;AACXA,cAAAA,KAAG,CAAC;AACF,gBAAA,MADE;AAEF,gBAAA,IAAI,EAAE,OAAO,CAAC,GAFZ;AAGF,gBAAA,EAAE,EAAE,OAAO,CAAC,GAHV;AAIF,gBAAA,IAAI,EAAE,EAJJ;AAKF,gBAAA,KALE;AAMF,gBAAA;AANE,eAAD,CAAHA;AAQD;AACF,WAbS,CAAV;AAeA,iBAAO,KAAP;AACD;AAlBc,OAZZ;;;;AAmCL,MAAA,aAAa,CAAC,IAAD,EAAO,KAAP,EAAY;AACvB,YAAI,KAAK,CAAC,GAAN,KAAc,OAAlB,EAA2B;AACzB,iBAAO,KAAP;AACD;;AAED,cAAM;AAAE,UAAA;AAAF,YAAc,IAAI,CAAC,KAAL,CAAW,SAA/B;;AAEA,YAAI,OAAJ,EAAa;AACX,iBAAOA,KAAG,CAAC;AACT,YAAA,MADS;AAET,YAAA,IAAI,EAAE,OAAO,CAAC,GAFL;AAGT,YAAA,EAAE,EAAE,OAAO,CAAC,GAHH;AAIT,YAAA,IAAI,EAAE,IAJG;AAKT,YAAA,KALS;AAMT,YAAA;AANS,WAAD,CAAV;AAQD;;AAED,eAAO,KAAP;AACD;;AAtDI,KAlBiB;;AA4ExB,IAAA,YAAY,EAAE;AA5EU,GAAX,CAAf;AA+EA,SAAO,MAAP;AACF;;SC3QgB,Q,CAAS,K,EAAU;AACjC,SAAO,OAAO,KAAP,KAAiB,QAAxB;AACF;;MCwBa,S,CAAS;AAYpB,EAAA,WAAA,CAAY,MAAZ,EAUC;AACC,SAAK,IAAL,GAAY,MAAM,CAAC,IAAnB;AACA,SAAK,OAAL,GAAe,MAAM,CAAC,OAAtB;AACD;;AAzBmB;;AA4BtB,MAAM,uBAAuB,GAAG,CAAC,IAAD,EAAe,IAAf,KAAoC;AAClE,MAAI,QAAQ,CAAC,IAAD,CAAZ,EAAoB;AAClB,WAAO,CAAC,GAAG,IAAI,CAAC,QAAL,CAAc,IAAd,CAAJ,CAAP;AACD;;AAED,QAAM,OAAO,GAAG,IAAI,CAAC,IAAD,CAApB;;AAEA,MAAI,CAAC,OAAL,EAAc;AACZ,WAAO,EAAP;AACD;;AAED,SAAO,OAAO,CAAC,GAAR,CAAY,cAAc,IAAA;AAC/B,UAAM,MAAM,GAA6B,EAAzC;AAEA,IAAA,MAAM,CAAC,IAAP,CAAY,cAAc,CAAC,IAA3B;AACA,IAAA,MAAM,CAAC,KAAP,GAAe,cAAc,CAAC,KAA9B;AACA,IAAA,MAAM,CAAC,KAAP,GAAe,IAAf;AACA,IAAA,MAAM,CAAC,IAAP,GAAc,cAAc,CAAC,IAA7B;;AAEA,QAAI,cAAc,CAAC,WAAnB,EAAgC;AAC9B,UAAI,CAAC,cAAc,CAAC,IAAf,CAAoB,QAApB,CAA6B,cAAc,CAAC,WAA5C,CAAL,EAA+D;AAC7D,QAAA,OAAO,CAAC,IAAR,CAAa,oFAAb;AACD;;AAED,MAAA,MAAM,CAAC,IAAP,CAAY,cAAc,CAAC,WAA3B;AACD;;AAED,WAAO,MAAP;AACD,GAjBM,CAAP;AAkBD,CA7BD;;AA+BA,SAAS,GAAT,CAAa,MAAb,EAOC;AACC,QAAM;AACJ,IAAA,MADI;AAEJ,IAAA,KAFI;AAGJ,IAAA,IAHI;AAIJ,IAAA,EAJI;AAKJ,IAAA;AALI,MAMF,MANJ;AAQA,QAAM;AAAE,IAAA,QAAF;AAAY,IAAA,KAAZ;AAAmB,IAAA;AAAnB,MAA2B,IAAI,cAAJ,CAAmB;AAClD,IAAA,MADkD;AAElD,IAAA;AAFkD,GAAnB,CAAjC;AAKA,EAAA,KAAK,CAAC,GAAN,CAAU,YAAV,CAAuB,IAAvB,EAA6B,EAA7B,EAAiC,CAAC,IAAD,EAAO,GAAP,KAAU;AACzC,QAAI,CAAC,IAAI,CAAC,WAAN,IAAqB,IAAI,CAAC,IAAL,CAAU,IAAV,CAAe,IAAxC,EAA8C;AAC5C;AACD;;AAED,UAAM,YAAY,GAAG,IAAI,CAAC,GAAL,CAAS,IAAT,EAAe,GAAf,CAArB;AACA,UAAM,UAAU,GAAG,IAAI,CAAC,GAAL,CAAS,EAAT,EAAa,GAAG,GAAG,IAAI,CAAC,OAAL,CAAa,IAAhC,CAAnB;AACA,UAAM,WAAW,GAAG,IAAI,CAAC,WAAL,CAClB,YAAY,GAAG,GADG,EAElB,UAAU,GAAG,GAFK,EAGlB,SAHkB,EAIlB,QAJkB,CAApB;AAOA,IAAA,KAAK,CAAC,OAAN,CAAc,IAAI,IAAA;AAChB,YAAM,OAAO,GAAG,uBAAuB,CAAC,WAAD,EAAc,IAAI,CAAC,IAAnB,CAAvC;AAEA,MAAA,OAAO,CAAC,OAAR,CAAgB,KAAK,IAAA;AACnB,YAAI,KAAK,CAAC,KAAN,KAAgB,SAApB,EAA+B;AAC7B;AACD;;AAED,cAAM,KAAK,GAAG,YAAY,GAAG,KAAK,CAAC,KAArB,GAA6B,CAA3C;AACA,cAAM,GAAG,GAAG,KAAK,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,MAA7B;AACA,cAAM,KAAK,GAAG;AACZ,UAAA,IAAI,EAAE,KAAK,CAAC,EAAN,CAAS,OAAT,CAAiB,GAAjB,CAAqB,KAArB,CADM;AAEZ,UAAA,EAAE,EAAE,KAAK,CAAC,EAAN,CAAS,OAAT,CAAiB,GAAjB,CAAqB,GAArB;AAFQ,SAAd;AAKA,QAAA,IAAI,CAAC,OAAL,CAAa;AACX,UAAA,KADW;AAEX,UAAA,KAFW;AAGX,UAAA,KAHW;AAIX,UAAA,QAJW;AAKX,UAAA,KALW;AAMX,UAAA;AANW,SAAb;AAQD,OApBD;AAqBD,KAxBD;AAyBD,GAvCD;AAwCD;AAED;;;;;;;SAKgB,gB,CAAiB,K,EAA6C;AAC5E,QAAM;AAAE,IAAA,MAAF;AAAU,IAAA;AAAV,MAAoB,KAA1B;AACA,MAAI,iBAAiB,GAAG,KAAxB;AAEA,QAAM,MAAM,GAAG,IAAI,MAAJ,CAAW;AACxB,IAAA,KAAK,EAAE;AACL,MAAA,WAAW,EAAE,CAAC,IAAD,EAAO,KAAP,KAAY;;;AACvB,cAAM,IAAI,GAAG,CAAA,EAAA,GAAA,KAAK,CAAC,aAAN,MAAmB,IAAnB,IAAmB,EAAA,KAAA,KAAA,CAAnB,GAAmB,KAAA,CAAnB,GAAmB,EAAA,CAAE,OAAF,CAAU,WAAV,CAAhC;AAEA,QAAA,iBAAiB,GAAG,CAAC,EAAC,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,QAAN,CAAe,eAAf,CAAD,CAArB;AAEA,eAAO,KAAP;AACD;AAPI,KADiB;AAUxB,IAAA,iBAAiB,EAAE,CAAC,YAAD,EAAe,QAAf,EAAyB,KAAzB,KAA8B;AAC/C,YAAM,WAAW,GAAG,YAAY,CAAC,CAAD,CAAhC,CAD+C,C;;AAI/C,UAAI,CAAC,WAAW,CAAC,OAAZ,CAAoB,OAApB,CAAD,IAAiC,iBAArC,EAAwD;AACtD;AACD,OAN8C,C;;;AAS/C,YAAM;AAAE,QAAA,GAAF;AAAO,QAAA;AAAP,UAAkB,WAAxB;AACA,YAAM,IAAI,GAAG,MAAM,CAAC,OAAP,CAAe,aAAf,CAA6B,GAAG,CAAC,OAAjC,CAAb;AACA,YAAM,EAAE,GAAG,MAAM,CAAC,OAAP,CAAe,WAAf,CAA2B,GAAG,CAAC,OAA/B,CAAX;;AAEA,UAAI,CAAC,QAAQ,CAAC,IAAD,CAAT,IAAmB,CAAC,EAApB,IAA0B,IAAI,KAAK,EAAE,CAAC,CAA1C,EAA6C;AAC3C;AACD,OAf8C,C;;;;AAmB/C,YAAM,EAAE,GAAG,KAAK,CAAC,EAAjB;AACA,YAAM,cAAc,GAAG,oBAAoB,CAAC;AAC1C,QAAA,KAD0C;AAE1C,QAAA,WAAW,EAAE;AAF6B,OAAD,CAA3C;AAKA,MAAA,GAAG,CAAC;AACF,QAAA,MADE;AAEF,QAAA,KAAK,EAAE,cAFL;AAGF,QAAA,IAAI,EAAE,IAAI,CAAC,GAAL,CAAS,IAAI,GAAG,CAAhB,EAAmB,CAAnB,CAHJ;AAIF,QAAA,EAAE,EAAE,EAAE,CAAC,CAJL;AAKF,QAAA,KALE;AAMF,QAAA;AANE,OAAD,CAAH,CAzB+C,C;;AAmC/C,UAAI,CAAC,EAAE,CAAC,KAAH,CAAS,MAAd,EAAsB;AACpB;AACD;;AAED,aAAO,EAAP;AACD,KAlDuB;;AAqDxB,IAAA,YAAY,EAAE;AArDU,GAAX,CAAf;AAwDA,SAAO,MAAP;AACF;AC1MA;;;;;;SAIgB,2B,CAA4B,U,EAAsB;AAChE,QAAM,mBAAmB,GAAyB,EAAlD;AACA,QAAM;AAAE,IAAA,cAAF;AAAkB,IAAA;AAAlB,MAAqC,eAAe,CAAC,UAAD,CAA1D;AACA,QAAM,qBAAqB,GAAG,CAAC,GAAG,cAAJ,EAAoB,GAAG,cAAvB,CAA9B;AACA,QAAM,gBAAgB,GAAwB;AAC5C,IAAA,OAAO,EAAE,IADmC;AAE5C,IAAA,QAAQ,EAAE,IAFkC;AAG5C,IAAA,UAAU,EAAE,IAHgC;AAI5C,IAAA,SAAS,EAAE,IAJiC;AAK5C,IAAA,WAAW,EAAE;AAL+B,GAA9C;AAQA,EAAA,UAAU,CAAC,OAAX,CAAmB,SAAS,IAAA;AAC1B,UAAM,OAAO,GAAG;AACd,MAAA,IAAI,EAAE,SAAS,CAAC,IADF;AAEd,MAAA,OAAO,EAAE,SAAS,CAAC,OAFL;AAGd,MAAA,OAAO,EAAE,SAAS,CAAC;AAHL,KAAhB;AAMA,UAAM,mBAAmB,GAAG,iBAAiB,CAC3C,SAD2C,EAE3C,qBAF2C,EAG3C,OAH2C,CAA7C;;AAMA,QAAI,CAAC,mBAAL,EAA0B;AACxB;AACD,KAfyB,C;;;AAkB1B,UAAM,gBAAgB,GAAG,mBAAmB,EAA5C;AAEA,IAAA,gBAAgB,CAAC,OAAjB,CAAyB,eAAe,IAAA;AACtC,MAAA,eAAe,CAAC,KAAhB,CAAsB,OAAtB,CAA8B,IAAI,IAAA;AAChC,QAAA,MAAM,CACH,OADH,CACW,eAAe,CAAC,UAD3B,EAEG,OAFH,CAEW,UAAkB;AAAA,cAAjB,CAAC,IAAD,EAAO,SAAP,CAAiB;AACzB,UAAA,mBAAmB,CAAC,IAApB,CAAyB;AACvB,YAAA,IADuB;AAEvB,YAAA,IAFuB;AAGvB,YAAA,SAAS,EAAE,EACT,GAAG,gBADM;AAET,iBAAG;AAFM;AAHY,WAAzB;AAQD,SAXH;AAYD,OAbD;AAcD,KAfD;AAgBD,GApCD;AAsCA,EAAA,qBAAqB,CAAC,OAAtB,CAA8B,SAAS,IAAA;AACrC,UAAM,OAAO,GAAG;AACd,MAAA,IAAI,EAAE,SAAS,CAAC,IADF;AAEd,MAAA,OAAO,EAAE,SAAS,CAAC,OAFL;AAGd,MAAA,OAAO,EAAE,SAAS,CAAC;AAHL,KAAhB;AAMA,UAAM,aAAa,GAAG,iBAAiB,CACrC,SADqC,EAErC,eAFqC,EAGrC,OAHqC,CAAvC;;AAMA,QAAI,CAAC,aAAL,EAAoB;AAClB;AACD,KAfoC,C;;;AAkBrC,UAAM,UAAU,GAAG,aAAa,EAAhC;AAEA,IAAA,MAAM,CACH,OADH,CACW,UADX,EAEG,OAFH,CAEW,UAAkB;AAAA,UAAjB,CAAC,IAAD,EAAO,SAAP,CAAiB;AACzB,MAAA,mBAAmB,CAAC,IAApB,CAAyB;AACvB,QAAA,IAAI,EAAE,SAAS,CAAC,IADO;AAEvB,QAAA,IAFuB;AAGvB,QAAA,SAAS,EAAE,EACT,GAAG,gBADM;AAET,aAAG;AAFM;AAHY,OAAzB;AAQD,KAXH;AAYD,GAhCD;AAkCA,SAAO,mBAAP;AACF;;SCrGgB,e,GAAiD;AAAA,qCAA9B,OAA8B;AAA9B,IAAA,OAA8B;AAAA;;AAC/D,SAAO,OAAO,CACX,MADI,CACG,IAAI,IAAI,CAAC,CAAC,IADb,EAEJ,MAFI,CAEG,CAAC,KAAD,EAAQ,IAAR,KAAY;AAClB,UAAM,gBAAgB,GAAG,EAAE,GAAG;AAAL,KAAzB;AAEA,IAAA,MAAM,CAAC,OAAP,CAAe,IAAf,EAAqB,OAArB,CAA6B,UAAa;AAAA,UAAZ,CAAC,GAAD,EAAM,KAAN,CAAY;AACxC,YAAM,MAAM,GAAG,gBAAgB,CAAC,GAAD,CAA/B;;AAEA,UAAI,CAAC,MAAL,EAAa;AACX,QAAA,gBAAgB,CAAC,GAAD,CAAhB,GAAwB,KAAxB;AAEA;AACD;;AAED,UAAI,GAAG,KAAK,OAAZ,EAAqB;AACnB,QAAA,gBAAgB,CAAC,GAAD,CAAhB,GAAwB,CAAC,gBAAgB,CAAC,GAAD,CAAjB,EAAwB,KAAxB,EAA+B,IAA/B,CAAoC,GAApC,CAAxB;AACD,OAFD,MAEO,IAAI,GAAG,KAAK,OAAZ,EAAqB;AAC1B,QAAA,gBAAgB,CAAC,GAAD,CAAhB,GAAwB,CAAC,gBAAgB,CAAC,GAAD,CAAjB,EAAwB,KAAxB,EAA+B,IAA/B,CAAoC,IAApC,CAAxB;AACD,OAFM,MAEA;AACL,QAAA,gBAAgB,CAAC,GAAD,CAAhB,GAAwB,KAAxB;AACD;AACF,KAhBD;AAkBA,WAAO,gBAAP;AACD,GAxBI,EAwBF,EAxBE,CAAP;AAyBF;;SCtBgB,qB,CAAsB,U,EAAyB,mB,EAAyC;AACtG,SAAO,mBAAmB,CACvB,MADI,CACG,IAAI,IAAI,IAAI,CAAC,SAAL,CAAe,QAD1B,EAEJ,GAFI,CAEA,IAAI,IAAA;AACP,QAAI,CAAC,IAAI,CAAC,SAAL,CAAe,UAApB,EAAgC;AAC9B,aAAO;AACL,SAAC,IAAI,CAAC,IAAN,GAAa,UAAU,CAAC,KAAX,CAAiB,IAAI,CAAC,IAAtB;AADR,OAAP;AAGD;;AAED,WAAO,IAAI,CAAC,SAAL,CAAe,UAAf,CAA0B,UAAU,CAAC,KAArC,KAA+C,EAAtD;AACD,GAVI,EAWJ,MAXI,CAWG,CAAC,UAAD,EAAa,SAAb,KAA2B,eAAe,CAAC,UAAD,EAAa,SAAb,CAX7C,EAWsE,EAXtE,CAAP;AAYF;;SCjBgB,a,GAAwB;AAAA,MAAV,KAAU,uEAAF,EAAE;AACtC,SAAO,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,MAAnB,KAA8B,CAA9B,IAAmC,KAAK,CAAC,WAAN,KAAsB,MAAhE;AACF;;SCFgB,U,CAAW,K,EAAU;AACnC,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAO,KAAP;AACD;;AAED,MAAI,KAAK,CAAC,KAAN,CAAY,sBAAZ,CAAJ,EAAyC;AACvC,WAAO,MAAM,CAAC,KAAD,CAAb;AACD;;AAED,MAAI,KAAK,KAAK,MAAd,EAAsB;AACpB,WAAO,IAAP;AACD;;AAED,MAAI,KAAK,KAAK,OAAd,EAAuB;AACrB,WAAO,KAAP;AACD;;AAED,SAAO,KAAP;AACF;ACbA;;;;;;;;SAMgB,oC,CAAqC,S,EAAsB,mB,EAAyC;AAClH,MAAI,SAAS,CAAC,KAAd,EAAqB;AACnB,WAAO,SAAP;AACD;;AAED,SAAO,EACL,GAAG,SADE;AAEL,IAAA,QAAQ,EAAE,IAAI,IAAA;AACZ,YAAM,aAAa,GAAG,SAAS,CAAC,QAAV,GAClB,SAAS,CAAC,QAAV,CAAmB,IAAnB,CADkB,GAElB,SAAS,CAAC,KAFd;;AAIA,UAAI,aAAa,KAAK,KAAtB,EAA6B;AAC3B,eAAO,KAAP;AACD;;AAED,YAAM,aAAa,GAAG,mBAAmB,CACtC,MADmB,CACZ,IAAI,IAAI,IAAI,CAAC,SAAL,CAAe,QADX,EAEnB,MAFmB,CAEZ,CAAC,KAAD,EAAQ,IAAR,KAAY;AAClB,cAAM,KAAK,GAAG,IAAI,CAAC,SAAL,CAAe,SAAf,GACV,IAAI,CAAC,SAAL,CAAe,SAAf,CAAyB,IAAzB,CADU,GAEV,UAAU,CAAE,IAAoB,CAAC,YAArB,CAAkC,IAAI,CAAC,IAAvC,CAAF,CAFd;;AAIA,YAAI,QAAQ,CAAC,KAAD,CAAZ,EAAqB;AACnB,UAAA,OAAO,CAAC,IAAR,CAAa,mEAAmE,IAAI,CAAC,IAAI,0OAAzF;AACD;;AAED,YAAI,KAAK,KAAK,IAAV,IAAkB,KAAK,KAAK,SAAhC,EAA2C;AACzC,iBAAO,KAAP;AACD;;AAED,eAAO,EACL,GAAG,KADE;AAEL,WAAC,IAAI,CAAC,IAAN,GAAa;AAFR,SAAP;AAID,OAnBmB,EAmBjB,EAnBiB,CAAtB;AAqBA,aAAO,EAAE,GAAG,aAAL;AAAoB,WAAG;AAAvB,OAAP;AACD;AAjCI,GAAP;AAmCF;;ACxCA,SAAS,iBAAT,CAA8B,IAA9B,EAAqC;AACnC,SAAO,MAAM,CAAC,WAAP,CAAmB,MAAM,CAAC,OAAP,CAAe,IAAf,EAAqB,MAArB,CAA4B,UAAa;AAAA,QAAZ,CAAC,GAAD,EAAM,KAAN,CAAY;;AACjE,QAAI,GAAG,KAAK,OAAR,IAAmB,aAAa,CAAC,KAAD,CAApC,EAA6C;AAC3C,aAAO,KAAP;AACD;;AAED,WAAO,KAAK,KAAK,IAAV,IAAkB,KAAK,KAAK,SAAnC;AACD,GANyB,CAAnB,CAAP;AAOD;;SAEe,6B,CAA8B,U,EAAsB;;;AAClE,QAAM,aAAa,GAAG,2BAA2B,CAAC,UAAD,CAAjD;AACA,QAAM;AAAE,IAAA,cAAF;AAAkB,IAAA;AAAlB,MAAqC,eAAe,CAAC,UAAD,CAA1D;AACA,QAAM,OAAO,GAAG,CAAA,EAAA,GAAA,cAAc,CAAC,IAAf,CAAoB,SAAS,IAAI,iBAAiB,CAAC,SAAD,EAAY,SAAZ,CAAlD,CAAA,MAAyE,IAAzE,IAAyE,EAAA,KAAA,KAAA,CAAzE,GAAyE,KAAA,CAAzE,GAAyE,EAAA,CAAE,IAA3F;AAEA,QAAM,KAAK,GAAG,MAAM,CAAC,WAAP,CAAmB,cAAc,CAAC,GAAf,CAAmB,SAAS,IAAA;AAC3D,UAAM,mBAAmB,GAAG,aAAa,CAAC,MAAd,CAAqB,SAAS,IAAI,SAAS,CAAC,IAAV,KAAmB,SAAS,CAAC,IAA/D,CAA5B;AACA,UAAM,OAAO,GAAG;AACd,MAAA,IAAI,EAAE,SAAS,CAAC,IADF;AAEd,MAAA,OAAO,EAAE,SAAS,CAAC,OAFL;AAGd,MAAA,OAAO,EAAE,SAAS,CAAC;AAHL,KAAhB;AAMA,UAAM,eAAe,GAAG,UAAU,CAAC,MAAX,CAAkB,CAAC,MAAD,EAAS,CAAT,KAAU;AAClD,YAAM,gBAAgB,GAAG,iBAAiB,CACxC,CADwC,EAExC,kBAFwC,EAGxC,OAHwC,CAA1C;AAMA,aAAO,EACL,GAAG,MADE;AAEL,YAAI,gBAAgB,GAAG,gBAAgB,CAAC,SAAD,CAAnB,GAAiC,EAArD;AAFK,OAAP;AAID,KAXuB,EAWrB,EAXqB,CAAxB;AAaA,UAAM,MAAM,GAAa,iBAAiB,CAAC,EACzC,GAAG,eADsC;AAEzC,MAAA,OAAO,EAAE,YAAY,CAAC,iBAAiB,CAAwB,SAAxB,EAAmC,SAAnC,EAA8C,OAA9C,CAAlB,CAFoB;AAGzC,MAAA,KAAK,EAAE,YAAY,CAAC,iBAAiB,CAAsB,SAAtB,EAAiC,OAAjC,EAA0C,OAA1C,CAAlB,CAHsB;AAIzC,MAAA,KAAK,EAAE,YAAY,CAAC,iBAAiB,CAAsB,SAAtB,EAAiC,OAAjC,EAA0C,OAA1C,CAAlB,CAJsB;AAKzC,MAAA,MAAM,EAAE,YAAY,CAAC,iBAAiB,CAAuB,SAAvB,EAAkC,QAAlC,EAA4C,OAA5C,CAAlB,CALqB;AAMzC,MAAA,IAAI,EAAE,YAAY,CAAC,iBAAiB,CAAqB,SAArB,EAAgC,MAAhC,EAAwC,OAAxC,CAAlB,CANuB;AAOzC,MAAA,UAAU,EAAE,YAAY,CAAC,iBAAiB,CAA2B,SAA3B,EAAsC,YAAtC,EAAoD,OAApD,CAAlB,CAPiB;AAQzC,MAAA,SAAS,EAAE,YAAY,CAAC,iBAAiB,CAA0B,SAA1B,EAAqC,WAArC,EAAkD,OAAlD,CAAlB,CARkB;AASzC,MAAA,IAAI,EAAE,YAAY,CAAC,iBAAiB,CAAqB,SAArB,EAAgC,MAAhC,EAAwC,OAAxC,CAAlB,CATuB;AAUzC,MAAA,QAAQ,EAAE,YAAY,CAAC,iBAAiB,CAAyB,SAAzB,EAAoC,UAApC,EAAgD,OAAhD,CAAlB,CAVmB;AAWzC,MAAA,SAAS,EAAE,YAAY,CAAC,iBAAiB,CAA0B,SAA1B,EAAqC,WAArC,EAAkD,OAAlD,CAAlB,CAXkB;AAYzC,MAAA,KAAK,EAAE,MAAM,CAAC,WAAP,CAAmB,mBAAmB,CAAC,GAApB,CAAwB,kBAAkB,IAAA;;;AAClE,eAAO,CAAC,kBAAkB,CAAC,IAApB,EAA0B;AAAE,UAAA,OAAO,EAAE,CAAA,EAAA,GAAA,kBAAkB,KAAA,IAAlB,IAAA,kBAAkB,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAA,kBAAkB,CAAE,SAApB,MAA6B,IAA7B,IAA6B,EAAA,KAAA,KAAA,CAA7B,GAA6B,KAAA,CAA7B,GAA6B,EAAA,CAAE;AAA1C,SAA1B,CAAP;AACD,OAFyB,CAAnB;AAZkC,KAAD,CAA1C;AAiBA,UAAM,SAAS,GAAG,YAAY,CAAC,iBAAiB,CAA0B,SAA1B,EAAqC,WAArC,EAAkD,OAAlD,CAAlB,CAA9B;;AAEA,QAAI,SAAJ,EAAe;AACb,MAAA,MAAM,CAAC,QAAP,GAAkB,SAAS,CACxB,GADe,CACX,SAAS,IAAI,oCAAoC,CAAC,SAAD,EAAY,mBAAZ,CADtC,CAAlB;AAED;;AAED,UAAM,UAAU,GAAG,iBAAiB,CAA2B,SAA3B,EAAsC,YAAtC,EAAoD,OAApD,CAApC;;AAEA,QAAI,UAAJ,EAAgB;AACd,MAAA,MAAM,CAAC,KAAP,GAAe,IAAI,IAAI,UAAU,CAAC;AAChC,QAAA,IADgC;AAEhC,QAAA,cAAc,EAAE,qBAAqB,CAAC,IAAD,EAAO,mBAAP;AAFL,OAAD,CAAjC;AAID;;AAED,UAAM,UAAU,GAAG,iBAAiB,CAA2B,SAA3B,EAAsC,YAAtC,EAAoD,OAApD,CAApC;;AAEA,QAAI,UAAJ,EAAgB;AACd,MAAA,MAAM,CAAC,MAAP,GAAgB,UAAhB;AACD;;AAED,WAAO,CAAC,SAAS,CAAC,IAAX,EAAiB,MAAjB,CAAP;AACD,GA7DgC,CAAnB,CAAd;AA+DA,QAAM,KAAK,GAAG,MAAM,CAAC,WAAP,CAAmB,cAAc,CAAC,GAAf,CAAmB,SAAS,IAAA;AAC3D,UAAM,mBAAmB,GAAG,aAAa,CAAC,MAAd,CAAqB,SAAS,IAAI,SAAS,CAAC,IAAV,KAAmB,SAAS,CAAC,IAA/D,CAA5B;AACA,UAAM,OAAO,GAAG;AACd,MAAA,IAAI,EAAE,SAAS,CAAC,IADF;AAEd,MAAA,OAAO,EAAE,SAAS,CAAC,OAFL;AAGd,MAAA,OAAO,EAAE,SAAS,CAAC;AAHL,KAAhB;AAMA,UAAM,eAAe,GAAG,UAAU,CAAC,MAAX,CAAkB,CAAC,MAAD,EAAS,CAAT,KAAU;AAClD,YAAM,gBAAgB,GAAG,iBAAiB,CACxC,CADwC,EAExC,kBAFwC,EAGxC,OAHwC,CAA1C;AAMA,aAAO,EACL,GAAG,MADE;AAEL,YAAI,gBAAgB,GAAG,gBAAgB,CAAC,SAAD,CAAnB,GAAiC,EAArD;AAFK,OAAP;AAID,KAXuB,EAWrB,EAXqB,CAAxB;AAaA,UAAM,MAAM,GAAa,iBAAiB,CAAC,EACzC,GAAG,eADsC;AAEzC,MAAA,SAAS,EAAE,YAAY,CAAC,iBAAiB,CAA0B,SAA1B,EAAqC,WAArC,EAAkD,OAAlD,CAAlB,CAFkB;AAGzC,MAAA,QAAQ,EAAE,YAAY,CAAC,iBAAiB,CAAyB,SAAzB,EAAoC,UAApC,EAAgD,OAAhD,CAAlB,CAHmB;AAIzC,MAAA,KAAK,EAAE,YAAY,CAAC,iBAAiB,CAAsB,SAAtB,EAAiC,OAAjC,EAA0C,OAA1C,CAAlB,CAJsB;AAKzC,MAAA,QAAQ,EAAE,YAAY,CAAC,iBAAiB,CAAyB,SAAzB,EAAoC,UAApC,EAAgD,OAAhD,CAAlB,CALmB;AAMzC,MAAA,IAAI,EAAE,YAAY,CAAC,iBAAiB,CAAqB,SAArB,EAAgC,MAAhC,EAAwC,OAAxC,CAAlB,CANuB;AAOzC,MAAA,KAAK,EAAE,MAAM,CAAC,WAAP,CAAmB,mBAAmB,CAAC,GAApB,CAAwB,kBAAkB,IAAA;;;AAClE,eAAO,CAAC,kBAAkB,CAAC,IAApB,EAA0B;AAAE,UAAA,OAAO,EAAE,CAAA,EAAA,GAAA,kBAAkB,KAAA,IAAlB,IAAA,kBAAkB,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAA,kBAAkB,CAAE,SAApB,MAA6B,IAA7B,IAA6B,EAAA,KAAA,KAAA,CAA7B,GAA6B,KAAA,CAA7B,GAA6B,EAAA,CAAE;AAA1C,SAA1B,CAAP;AACD,OAFyB,CAAnB;AAPkC,KAAD,CAA1C;AAYA,UAAM,SAAS,GAAG,YAAY,CAAC,iBAAiB,CAA0B,SAA1B,EAAqC,WAArC,EAAkD,OAAlD,CAAlB,CAA9B;;AAEA,QAAI,SAAJ,EAAe;AACb,MAAA,MAAM,CAAC,QAAP,GAAkB,SAAS,CACxB,GADe,CACX,SAAS,IAAI,oCAAoC,CAAC,SAAD,EAAY,mBAAZ,CADtC,CAAlB;AAED;;AAED,UAAM,UAAU,GAAG,iBAAiB,CAA2B,SAA3B,EAAsC,YAAtC,EAAoD,OAApD,CAApC;;AAEA,QAAI,UAAJ,EAAgB;AACd,MAAA,MAAM,CAAC,KAAP,GAAe,IAAI,IAAI,UAAU,CAAC;AAChC,QAAA,IADgC;AAEhC,QAAA,cAAc,EAAE,qBAAqB,CAAC,IAAD,EAAO,mBAAP;AAFL,OAAD,CAAjC;AAID;;AAED,WAAO,CAAC,SAAS,CAAC,IAAX,EAAiB,MAAjB,CAAP;AACD,GAlDgC,CAAnB,CAAd;AAoDA,SAAO,IAAI,MAAJ,CAAW;AAChB,IAAA,OADgB;AAEhB,IAAA,KAFgB;AAGhB,IAAA;AAHgB,GAAX,CAAP;AAKF;;SChJgB,mB,CAAoB,I,EAAc,M,EAAc;AAC9D,SAAO,MAAM,CAAC,KAAP,CAAa,IAAb,KAAsB,MAAM,CAAC,KAAP,CAAa,IAAb,CAAtB,IAA4C,IAAnD;AACF;;SCFgB,uB,CAAwB,S,EAAyB,O,EAAoB;AACnF,MAAI,KAAK,CAAC,OAAN,CAAc,OAAd,CAAJ,EAA4B;AAC1B,WAAO,OAAO,CAAC,IAAR,CAAa,gBAAgB,IAAA;AAClC,YAAM,IAAI,GAAG,OAAO,gBAAP,KAA4B,QAA5B,GACT,gBADS,GAET,gBAAgB,CAAC,IAFrB;AAIA,aAAO,IAAI,KAAK,SAAS,CAAC,IAA1B;AACD,KANM,CAAP;AAOD;;AAED,SAAO,OAAP;AACF;;SCdgB,c,CAAe,K,EAAY;AACzC,QAAM,QAAQ,GAAG,KAAK,CAAC,MAAN,CAAa,CAAC,EAAD,EAAK,KAAL,KAAe,KAAK,CAAC,OAAN,CAAc,EAAd,MAAsB,KAAlD,CAAjB;AAEA,SAAO,CAAC,GAAG,IAAI,GAAJ,CAAQ,QAAR,CAAJ,CAAP;AACF;;MCgBa,gB,CAAgB;AAU3B,EAAA,WAAA,CAAY,UAAZ,EAAoC,MAApC,EAAkD;AAFlD,SAAA,eAAA,GAA4B,EAA5B;AAGE,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,UAAL,GAAkB,gBAAgB,CAAC,OAAjB,CAAyB,UAAzB,CAAlB;AACA,SAAK,MAAL,GAAc,6BAA6B,CAAC,KAAK,UAAN,CAA3C;AAEA,SAAK,UAAL,CAAgB,OAAhB,CAAwB,SAAS,IAAA;aAAA,C;;;AAE/B,WAAK,MAAL,CAAY,gBAAZ,CAA6B,SAAS,CAAC,IAAvC,IAA+C,SAAS,CAAC,OAAzD;AAEA,YAAM,OAAO,GAAG;AACd,QAAA,IAAI,EAAE,SAAS,CAAC,IADF;AAEd,QAAA,OAAO,EAAE,SAAS,CAAC,OAFL;AAGd,QAAA,OAAO,EAAE,SAAS,CAAC,OAHL;AAId,QAAA,MAAM,EAAE,KAAK,MAJC;AAKd,QAAA,IAAI,EAAE,mBAAmB,CAAC,SAAS,CAAC,IAAX,EAAiB,KAAK,MAAtB;AALX,OAAhB;;AAQA,UAAI,SAAS,CAAC,IAAV,KAAmB,MAAvB,EAA+B;AAC7B,cAAM,WAAW,GAAG,CAAA,EAAA,GAAA,YAAY,CAAC,iBAAiB,CAAC,SAAD,EAAY,aAAZ,EAA2B,OAA3B,CAAlB,CAAZ,MAAkE,IAAlE,IAAkE,EAAA,KAAA,KAAA,CAAlE,GAAkE,EAAlE,GAAsE,IAA1F;;AAEA,YAAI,WAAJ,EAAiB;AACf,eAAK,eAAL,CAAqB,IAArB,CAA0B,SAAS,CAAC,IAApC;AACD;AACF;;AAED,YAAM,cAAc,GAAG,iBAAiB,CACtC,SADsC,EAEtC,gBAFsC,EAGtC,OAHsC,CAAxC;;AAMA,UAAI,cAAJ,EAAoB;AAClB,aAAK,MAAL,CAAY,EAAZ,CAAe,cAAf,EAA+B,cAA/B;AACD;;AAED,YAAM,QAAQ,GAAG,iBAAiB,CAChC,SADgC,EAEhC,UAFgC,EAGhC,OAHgC,CAAlC;;AAMA,UAAI,QAAJ,EAAc;AACZ,aAAK,MAAL,CAAY,EAAZ,CAAe,QAAf,EAAyB,QAAzB;AACD;;AAED,YAAM,QAAQ,GAAG,iBAAiB,CAChC,SADgC,EAEhC,UAFgC,EAGhC,OAHgC,CAAlC;;AAMA,UAAI,QAAJ,EAAc;AACZ,aAAK,MAAL,CAAY,EAAZ,CAAe,QAAf,EAAyB,QAAzB;AACD;;AAED,YAAM,iBAAiB,GAAG,iBAAiB,CACzC,SADyC,EAEzC,mBAFyC,EAGzC,OAHyC,CAA3C;;AAMA,UAAI,iBAAJ,EAAuB;AACrB,aAAK,MAAL,CAAY,EAAZ,CAAe,iBAAf,EAAkC,iBAAlC;AACD;;AAED,YAAM,aAAa,GAAG,iBAAiB,CACrC,SADqC,EAErC,eAFqC,EAGrC,OAHqC,CAAvC;;AAMA,UAAI,aAAJ,EAAmB;AACjB,aAAK,MAAL,CAAY,EAAZ,CAAe,aAAf,EAA8B,aAA9B;AACD;;AAED,YAAM,OAAO,GAAG,iBAAiB,CAC/B,SAD+B,EAE/B,SAF+B,EAG/B,OAH+B,CAAjC;;AAMA,UAAI,OAAJ,EAAa;AACX,aAAK,MAAL,CAAY,EAAZ,CAAe,OAAf,EAAwB,OAAxB;AACD;;AAED,YAAM,MAAM,GAAG,iBAAiB,CAC9B,SAD8B,EAE9B,QAF8B,EAG9B,OAH8B,CAAhC;;AAMA,UAAI,MAAJ,EAAY;AACV,aAAK,MAAL,CAAY,EAAZ,CAAe,MAAf,EAAuB,MAAvB;AACD;;AAED,YAAM,SAAS,GAAG,iBAAiB,CACjC,SADiC,EAEjC,WAFiC,EAGjC,OAHiC,CAAnC;;AAMA,UAAI,SAAJ,EAAe;AACb,aAAK,MAAL,CAAY,EAAZ,CAAe,SAAf,EAA0B,SAA1B;AACD;AACF,KAnGD;AAoGD;;AAEa,SAAP,OAAO,CAAC,UAAD,EAAuB;AACnC,UAAM,kBAAkB,GAAG,gBAAgB,CAAC,IAAjB,CAAsB,gBAAgB,CAAC,OAAjB,CAAyB,UAAzB,CAAtB,CAA3B;AACA,UAAM,eAAe,GAAG,cAAc,CAAC,kBAAkB,CAAC,GAAnB,CAAuB,SAAS,IAAI,SAAS,CAAC,IAA9C,CAAD,CAAtC;;AAEA,QAAI,eAAe,CAAC,MAApB,EAA4B;AAC1B,MAAA,OAAO,CAAC,IAAR,CAAa,oDAAoD,eAAe,CAAC,GAAhB,CAAoB,IAAI,IAAI,IAAI,IAAI,GAApC,EAAyC,IAAzC,CAA8C,IAA9C,CAAmD,6BAApH;AACD;;AAED,WAAO,kBAAP;AACD;;AAEa,SAAP,OAAO,CAAC,UAAD,EAAuB;AACnC,WAAO,UAAU,CACd,GADI,CACA,SAAS,IAAA;AACZ,YAAM,OAAO,GAAG;AACd,QAAA,IAAI,EAAE,SAAS,CAAC,IADF;AAEd,QAAA,OAAO,EAAE,SAAS,CAAC,OAFL;AAGd,QAAA,OAAO,EAAE,SAAS,CAAC;AAHL,OAAhB;AAMA,YAAM,aAAa,GAAG,iBAAiB,CACrC,SADqC,EAErC,eAFqC,EAGrC,OAHqC,CAAvC;;AAMA,UAAI,aAAJ,EAAmB;AACjB,eAAO,CACL,SADK,EAEL,GAAG,KAAK,OAAL,CAAa,aAAa,EAA1B,CAFE,CAAP;AAID;;AAED,aAAO,SAAP;AACD,KAtBI,E;AAAA,KAwBJ,IAxBI,CAwBC,EAxBD,CAAP;AAyBD;;AAEU,SAAJ,IAAI,CAAC,UAAD,EAAuB;AAChC,UAAM,eAAe,GAAG,GAAxB;AAEA,WAAO,UAAU,CAAC,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,KAAK;AAC1B,YAAM,SAAS,GAAG,iBAAiB,CAAwB,CAAxB,EAA2B,UAA3B,CAAjB,IAA2D,eAA7E;AACA,YAAM,SAAS,GAAG,iBAAiB,CAAwB,CAAxB,EAA2B,UAA3B,CAAjB,IAA2D,eAA7E;;AAEA,UAAI,SAAS,GAAG,SAAhB,EAA2B;AACzB,eAAO,CAAC,CAAR;AACD;;AAED,UAAI,SAAS,GAAG,SAAhB,EAA2B;AACzB,eAAO,CAAP;AACD;;AAED,aAAO,CAAP;AACD,KAbM,CAAP;AAcD;;AAEW,MAAR,QAAQ,GAAA;AACV,WAAO,KAAK,UAAL,CAAgB,MAAhB,CAAuB,CAAC,QAAD,EAAW,SAAX,KAAoB;AAChD,YAAM,OAAO,GAAG;AACd,QAAA,IAAI,EAAE,SAAS,CAAC,IADF;AAEd,QAAA,OAAO,EAAE,SAAS,CAAC,OAFL;AAGd,QAAA,OAAO,EAAE,SAAS,CAAC,OAHL;AAId,QAAA,MAAM,EAAE,KAAK,MAJC;AAKd,QAAA,IAAI,EAAE,mBAAmB,CAAC,SAAS,CAAC,IAAX,EAAiB,KAAK,MAAtB;AALX,OAAhB;AAQA,YAAM,WAAW,GAAG,iBAAiB,CACnC,SADmC,EAEnC,aAFmC,EAGnC,OAHmC,CAArC;;AAMA,UAAI,CAAC,WAAL,EAAkB;AAChB,eAAO,QAAP;AACD;;AAED,aAAO,EACL,GAAG,QADE;AAEL,WAAG,WAAW;AAFT,OAAP;AAID,KAvBM,EAuBJ,EAvBI,CAAP;AAwBD;;AAEU,MAAP,OAAO,GAAA;AACT,UAAM;AAAE,MAAA;AAAF,QAAa,IAAnB,CADS,C;;;;;;AAQT,UAAM,UAAU,GAAG,gBAAgB,CAAC,IAAjB,CAAsB,CAAC,GAAG,KAAK,UAAT,EAAqB,OAArB,EAAtB,CAAnB;AAEA,UAAM,UAAU,GAAU,EAA1B;AACA,UAAM,UAAU,GAAU,EAA1B;AAEA,UAAM,UAAU,GAAG,UAAU,CAC1B,GADgB,CACZ,SAAS,IAAA;AACZ,YAAM,OAAO,GAAG;AACd,QAAA,IAAI,EAAE,SAAS,CAAC,IADF;AAEd,QAAA,OAAO,EAAE,SAAS,CAAC,OAFL;AAGd,QAAA,OAAO,EAAE,SAAS,CAAC,OAHL;AAId,QAAA,MAJc;AAKd,QAAA,IAAI,EAAE,mBAAmB,CAAC,SAAS,CAAC,IAAX,EAAiB,KAAK,MAAtB;AALX,OAAhB;AAQA,YAAM,OAAO,GAAa,EAA1B;AAEA,YAAM,oBAAoB,GAAG,iBAAiB,CAC5C,SAD4C,EAE5C,sBAF4C,EAG5C,OAH4C,CAA9C;;AAMA,UAAI,oBAAJ,EAA0B;AACxB,cAAM,QAAQ,GAAG,MAAM,CAAC,WAAP,CACf,MAAM,CACH,OADH,CACW,oBAAoB,EAD/B,EAEG,GAFH,CAEO,UAAmB;AAAA,cAAlB,CAAC,QAAD,EAAW,MAAX,CAAkB;AACtB,iBAAO,CAAC,QAAD,EAAW,MAAM,MAAM,CAAC;AAAE,YAAA;AAAF,WAAD,CAAvB,CAAP;AACD,SAJH,CADe,CAAjB;AAQA,cAAM,YAAY,GAAG,MAAM,CAAC,QAAD,CAA3B;AAEA,QAAA,OAAO,CAAC,IAAR,CAAa,YAAb;AACD;;AAED,YAAM,aAAa,GAAG,iBAAiB,CACrC,SADqC,EAErC,eAFqC,EAGrC,OAHqC,CAAvC;;AAMA,UAAI,uBAAuB,CAAC,SAAD,EAAY,MAAM,CAAC,OAAP,CAAe,gBAA3B,CAAvB,IAAuE,aAA3E,EAA0F;AACxF,QAAA,UAAU,CAAC,IAAX,CAAgB,GAAG,aAAa,EAAhC;AACD;;AAED,YAAM,aAAa,GAAG,iBAAiB,CACrC,SADqC,EAErC,eAFqC,EAGrC,OAHqC,CAAvC;;AAMA,UAAI,uBAAuB,CAAC,SAAD,EAAY,MAAM,CAAC,OAAP,CAAe,gBAA3B,CAAvB,IAAuE,aAA3E,EAA0F;AACxF,QAAA,UAAU,CAAC,IAAX,CAAgB,GAAG,aAAa,EAAhC;AACD;;AAED,YAAM,qBAAqB,GAAG,iBAAiB,CAC7C,SAD6C,EAE7C,uBAF6C,EAG7C,OAH6C,CAA/C;;AAMA,UAAI,qBAAJ,EAA2B;AACzB,cAAM,kBAAkB,GAAG,qBAAqB,EAAhD;AAEA,QAAA,OAAO,CAAC,IAAR,CAAa,GAAG,kBAAhB;AACD;;AAED,aAAO,OAAP;AACD,KAjEgB,EAkEhB,IAlEgB,EAAnB;AAoEA,WAAO,CACL,gBAAgB,CAAC;AACf,MAAA,MADe;AAEf,MAAA,KAAK,EAAE;AAFQ,KAAD,CADX,EAKL,gBAAgB,CAAC;AACf,MAAA,MADe;AAEf,MAAA,KAAK,EAAE;AAFQ,KAAD,CALX,EASL,GAAG,UATE,CAAP;AAWD;;AAEa,MAAV,UAAU,GAAA;AACZ,WAAO,2BAA2B,CAAC,KAAK,UAAN,CAAlC;AACD;;AAEY,MAAT,SAAS,GAAA;AACX,UAAM;AAAE,MAAA;AAAF,QAAa,IAAnB;AACA,UAAM;AAAE,MAAA;AAAF,QAAqB,eAAe,CAAC,KAAK,UAAN,CAA1C;AAEA,WAAO,MAAM,CAAC,WAAP,CAAmB,cAAc,CACrC,MADuB,CAChB,SAAS,IAAI,CAAC,CAAC,iBAAiB,CAAC,SAAD,EAAY,aAAZ,CADhB,EAEvB,GAFuB,CAEnB,SAAS,IAAA;AACZ,YAAM,mBAAmB,GAAG,KAAK,UAAL,CAAgB,MAAhB,CAAuB,SAAS,IAAI,SAAS,CAAC,IAAV,KAAmB,SAAS,CAAC,IAAjE,CAA5B;AACA,YAAM,OAAO,GAAG;AACd,QAAA,IAAI,EAAE,SAAS,CAAC,IADF;AAEd,QAAA,OAAO,EAAE,SAAS,CAAC,OAFL;AAGd,QAAA,OAAO,EAAE,SAAS,CAAC,OAHL;AAId,QAAA,MAJc;AAKd,QAAA,IAAI,EAAE,WAAW,CAAC,SAAS,CAAC,IAAX,EAAiB,KAAK,MAAtB;AALH,OAAhB;AAOA,YAAM,WAAW,GAAG,iBAAiB,CACnC,SADmC,EAEnC,aAFmC,EAGnC,OAHmC,CAArC;;AAMA,UAAI,CAAC,WAAL,EAAkB;AAChB,eAAO,EAAP;AACD;;AAED,YAAM,QAAQ,GAAG,CACf,IADe,EAEf,IAFe,EAGf,MAHe,EAIf,WAJe,KAIU;AAEzB,cAAM,cAAc,GAAG,qBAAqB,CAAC,IAAD,EAAO,mBAAP,CAA5C;AAEA,eAAO,WAAW,GAAG;AACnB,UAAA,MADmB;AAEnB,UAAA,IAFmB;AAGnB,UAAA,MAHmB;AAInB,UAAA,WAJmB;AAKnB,UAAA,cALmB;AAMnB,UAAA;AANmB,SAAH,CAAlB;AAQD,OAhBD;;AAkBA,aAAO,CAAC,SAAS,CAAC,IAAX,EAAiB,QAAjB,CAAP;AACD,KAxCuB,CAAnB,CAAP;AAyCD;;AAzV0B;;MCVhB,Y,CAAY;AAAzB,EAAA,WAAA,GAAA;AAEU,SAAA,SAAA,GAA2C,EAA3C;AAuCT;;AArCQ,EAAA,EAAE,CAAmC,KAAnC,EAAqD,EAArD,EAAuF;AAC9F,QAAI,CAAC,KAAK,SAAL,CAAe,KAAf,CAAL,EAA4B;AAC1B,WAAK,SAAL,CAAe,KAAf,IAAwB,EAAxB;AACD;;AAED,SAAK,SAAL,CAAe,KAAf,EAAsB,IAAtB,CAA2B,EAA3B;AAEA,WAAO,IAAP;AACD;;AAES,EAAA,IAAI,CAAmC,KAAnC,EAAwF;AAAA,uCAAhC,IAAgC;AAAhC,MAAA,IAAgC;AAAA;;AACpG,UAAM,SAAS,GAAG,KAAK,SAAL,CAAe,KAAf,CAAlB;;AAEA,QAAI,SAAJ,EAAe;AACb,MAAA,SAAS,CAAC,OAAV,CAAkB,QAAQ,IAAI,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,IAArB,CAA9B;AACD;;AAED,WAAO,IAAP;AACD;;AAEM,EAAA,GAAG,CAAmC,KAAnC,EAAqD,EAArD,EAAwF;AAChG,UAAM,SAAS,GAAG,KAAK,SAAL,CAAe,KAAf,CAAlB;;AAEA,QAAI,SAAJ,EAAe;AACb,UAAI,EAAJ,EAAQ;AACN,aAAK,SAAL,CAAe,KAAf,IAAwB,SAAS,CAAC,MAAV,CAAiB,QAAQ,IAAI,QAAQ,KAAK,EAA1C,CAAxB;AACD,OAFD,MAEO;AACL,eAAO,KAAK,SAAL,CAAe,KAAf,CAAP;AACD;AACF;;AAED,WAAO,IAAP;AACD;;AAES,EAAA,kBAAkB,GAAA;AAC1B,SAAK,SAAL,GAAiB,EAAjB;AACD;;AAxCsB;;ACVlB,MAAM,KAAK,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EnB,EA1EK;;MCuCM,M,SAAe,Y,CAA0B;AAsCpD,EAAA,WAAA,GAAgD;AAAA,QAApC,OAAoC,uEAAF,EAAE;AAC9C;AA3BK,SAAA,SAAA,GAAY,KAAZ;AAEA,SAAA,gBAAA,GAAwC,EAAxC;AAEA,SAAA,OAAA,GAAyB;AAC9B,MAAA,OAAO,EAAE,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CADqB;AAE9B,MAAA,OAAO,EAAE,EAFqB;AAG9B,MAAA,SAAS,EAAE,IAHmB;AAI9B,MAAA,UAAU,EAAE,EAJkB;AAK9B,MAAA,SAAS,EAAE,KALmB;AAM9B,MAAA,QAAQ,EAAE,IANoB;AAO9B,MAAA,WAAW,EAAE,EAPiB;AAQ9B,MAAA,YAAY,EAAE,EARgB;AAS9B,MAAA,gBAAgB,EAAE,IATY;AAU9B,MAAA,gBAAgB,EAAE,IAVY;AAW9B,MAAA,oBAAoB,EAAE,IAXQ;AAY9B,MAAA,cAAc,EAAE,MAAM,IAZQ;AAa9B,MAAA,QAAQ,EAAE,MAAM,IAbc;AAc9B,MAAA,QAAQ,EAAE,MAAM,IAdc;AAe9B,MAAA,iBAAiB,EAAE,MAAM,IAfK;AAgB9B,MAAA,aAAa,EAAE,MAAM,IAhBS;AAiB9B,MAAA,OAAO,EAAE,MAAM,IAjBe;AAkB9B,MAAA,MAAM,EAAE,MAAM,IAlBgB;AAmB9B,MAAA,SAAS,EAAE,MAAM;AAnBa,KAAzB;AAsPA,SAAA,sBAAA,GAAyB,KAAzB;AAEC,SAAA,mBAAA,GAA0C,IAA1C;AAhON,SAAK,UAAL,CAAgB,OAAhB;AACA,SAAK,sBAAL;AACA,SAAK,oBAAL;AACA,SAAK,YAAL;AACA,SAAK,EAAL,CAAQ,cAAR,EAAwB,KAAK,OAAL,CAAa,cAArC;AACA,SAAK,IAAL,CAAU,cAAV,EAA0B;AAAE,MAAA,MAAM,EAAE;AAAV,KAA1B;AACA,SAAK,UAAL;AACA,SAAK,SAAL;AACA,SAAK,EAAL,CAAQ,QAAR,EAAkB,KAAK,OAAL,CAAa,QAA/B;AACA,SAAK,EAAL,CAAQ,QAAR,EAAkB,KAAK,OAAL,CAAa,QAA/B;AACA,SAAK,EAAL,CAAQ,iBAAR,EAA2B,KAAK,OAAL,CAAa,iBAAxC;AACA,SAAK,EAAL,CAAQ,aAAR,EAAuB,KAAK,OAAL,CAAa,aAApC;AACA,SAAK,EAAL,CAAQ,OAAR,EAAiB,KAAK,OAAL,CAAa,OAA9B;AACA,SAAK,EAAL,CAAQ,MAAR,EAAgB,KAAK,OAAL,CAAa,MAA7B;AACA,SAAK,EAAL,CAAQ,SAAR,EAAmB,KAAK,OAAL,CAAa,SAAhC;AAEA,IAAA,MAAM,CAAC,UAAP,CAAkB,MAAA;AAChB,UAAI,KAAK,WAAT,EAAsB;AACpB;AACD;;AAED,WAAK,QAAL,CAAc,KAAd,CAAoB,KAAK,OAAL,CAAa,SAAjC;AACA,WAAK,IAAL,CAAU,QAAV,EAAoB;AAAE,QAAA,MAAM,EAAE;AAAV,OAApB;AACD,KAPD,EAOG,CAPH;AAQD;;;;;;AAKiB,MAAP,OAAO,GAAA;AAChB,WAAO,KAAK,gBAAZ;AACD;;;;;;AAKkB,MAAR,QAAQ,GAAA;AACjB,WAAO,KAAK,cAAL,CAAoB,QAA3B;AACD;;;;;;AAKM,EAAA,KAAK,GAAA;AACV,WAAO,KAAK,cAAL,CAAoB,KAApB,EAAP;AACD;;;;;;AAKM,EAAA,GAAG,GAAA;AACR,WAAO,KAAK,cAAL,CAAoB,GAApB,EAAP;AACD;;;;;;AAKO,EAAA,SAAS,GAAA;AACf,QAAI,KAAK,OAAL,CAAa,SAAb,IAA0B,QAA9B,EAAwC;AACtC,WAAK,GAAL,GAAW,cAAc,CAAC,KAAD,CAAzB;AACD;AACF;;;;;;;;AAOM,EAAA,UAAU,GAAqC;AAAA,QAApC,OAAoC,uEAAF,EAAE;AACpD,SAAK,OAAL,GAAe,EACb,GAAG,KAAK,OADK;AAEb,SAAG;AAFU,KAAf;;AAKA,QAAI,CAAC,KAAK,IAAN,IAAc,CAAC,KAAK,KAApB,IAA6B,KAAK,WAAtC,EAAmD;AACjD;AACD;;AAED,QAAI,KAAK,OAAL,CAAa,WAAjB,EAA8B;AAC5B,WAAK,IAAL,CAAU,QAAV,CAAmB,KAAK,OAAL,CAAa,WAAhC;AACD;;AAED,SAAK,IAAL,CAAU,WAAV,CAAsB,KAAK,KAA3B;AACD;;;;;;AAKM,EAAA,WAAW,CAAC,QAAD,EAAkB;AAClC,SAAK,UAAL,CAAgB;AAAE,MAAA;AAAF,KAAhB;AACD;;;;;;AAKoB,MAAV,UAAU,GAAA;;;;AAInB,WAAO,KAAK,OAAL,CAAa,QAAb,IACF,KAAK,IADH,IAEF,KAAK,IAAL,CAAU,QAFf;AAGD;;;;;;AAKe,MAAL,KAAK,GAAA;AACd,WAAO,KAAK,IAAL,CAAU,KAAjB;AACD;;;;;;;;;AAQM,EAAA,cAAc,CAAC,MAAD,EAAiB,aAAjB,EAAmF;AACtG,UAAM,OAAO,GAAG,UAAU,CAAC,aAAD,CAAV,GACZ,aAAa,CAAC,MAAD,EAAS,KAAK,KAAL,CAAW,OAApB,CADD,GAEZ,CAAC,GAAG,KAAK,KAAL,CAAW,OAAf,EAAwB,MAAxB,CAFJ;AAIA,UAAM,KAAK,GAAG,KAAK,KAAL,CAAW,WAAX,CAAuB;AAAE,MAAA;AAAF,KAAvB,CAAd;AAEA,SAAK,IAAL,CAAU,WAAV,CAAsB,KAAtB;AACD;;;;;;;;AAOM,EAAA,gBAAgB,CAAC,eAAD,EAAoC;AACzD,QAAI,KAAK,WAAT,EAAsB;AACpB;AACD;;AAED,UAAM,IAAI,GAAG,OAAO,eAAP,KAA2B,QAA3B,GACT,GAAG,eAAe,GADT,C;AAAA,MAGT,eAAe,CAAC,GAHpB;AAKA,UAAM,KAAK,GAAG,KAAK,KAAL,CAAW,WAAX,CAAuB;;AAEnC,MAAA,OAAO,EAAE,KAAK,KAAL,CAAW,OAAX,CAAmB,MAAnB,CAA0B,MAAM,IAAI,CAAC,MAAM,CAAC,GAAP,CAAW,UAAX,CAAsB,IAAtB,CAArC;AAF0B,KAAvB,CAAd;AAKA,SAAK,IAAL,CAAU,WAAV,CAAsB,KAAtB;AACD;;;;;;AAKO,EAAA,sBAAsB,GAAA;AAC5B,UAAM,cAAc,GAAG,KAAK,OAAL,CAAa,oBAAb,GACnB,MAAM,CAAC,MAAP,CAAc,UAAd,CADmB,GAEnB,EAFJ;AAGA,UAAM,aAAa,GAAG,CAAC,GAAG,cAAJ,EAAoB,GAAG,KAAK,OAAL,CAAa,UAApC,EAAgD,MAAhD,CAAuD,SAAS,IAAA;AACpF,aAAO,CAAC,WAAD,EAAc,MAAd,EAAsB,MAAtB,EAA8B,QAA9B,CAAuC,SAAS,KAAA,IAAT,IAAA,SAAS,KAAA,KAAA,CAAT,GAAS,KAAA,CAAT,GAAA,SAAS,CAAE,IAAlD,CAAP;AACD,KAFqB,CAAtB;AAIA,SAAK,gBAAL,GAAwB,IAAI,gBAAJ,CAAqB,aAArB,EAAoC,IAApC,CAAxB;AACD;;;;;;AAKO,EAAA,oBAAoB,GAAA;AAC1B,SAAK,cAAL,GAAsB,IAAI,cAAJ,CAAmB;AACvC,MAAA,MAAM,EAAE;AAD+B,KAAnB,CAAtB;AAGD;;;;;;AAKO,EAAA,YAAY,GAAA;AAClB,SAAK,MAAL,GAAc,KAAK,gBAAL,CAAsB,MAApC;AACD;;;;;;AAKO,EAAA,UAAU,GAAA;AAChB,UAAM,GAAG,GAAG,cAAc,CAAC,KAAK,OAAL,CAAa,OAAd,EAAuB,KAAK,MAA5B,EAAoC,KAAK,OAAL,CAAa,YAAjD,CAA1B;AACA,UAAM,SAAS,GAAG,oBAAoB,CAAC,GAAD,EAAM,KAAK,OAAL,CAAa,SAAnB,CAAtC;AAEA,SAAK,IAAL,GAAY,IAAI,UAAJ,CAAe,KAAK,OAAL,CAAa,OAA5B,EAAqC,EAC/C,GAAG,KAAK,OAAL,CAAa,WAD+B;AAE/C,MAAA,mBAAmB,EAAE,KAAK,mBAAL,CAAyB,IAAzB,CAA8B,IAA9B,CAF0B;AAG/C,MAAA,KAAK,EAAE,WAAW,CAAC,MAAZ,CAAmB;AACxB,QAAA,GADwB;AAExB,QAAA;AAFwB,OAAnB;AAHwC,KAArC,CAAZ,CAJgB,C;;;AAehB,UAAM,QAAQ,GAAG,KAAK,KAAL,CAAW,WAAX,CAAuB;AACtC,MAAA,OAAO,EAAE,KAAK,gBAAL,CAAsB;AADO,KAAvB,CAAjB;AAIA,SAAK,IAAL,CAAU,WAAV,CAAsB,QAAtB;AAEA,SAAK,eAAL,GArBgB,C;;;AAyBhB,UAAM,GAAG,GAAG,KAAK,IAAL,CAAU,GAAtB;AAEA,IAAA,GAAG,CAAC,MAAJ,GAAa,IAAb;AACD;;;;;;AAKM,EAAA,eAAe,GAAA;AACpB,SAAK,IAAL,CAAU,QAAV,CAAmB;AACjB,MAAA,SAAS,EAAE,KAAK,gBAAL,CAAsB;AADhB,KAAnB;AAGD;;AAMM,EAAA,kBAAkB,CAAC,EAAD,EAAa;AACpC,SAAK,sBAAL,GAA8B,IAA9B;AACA,IAAA,EAAE;AACF,SAAK,sBAAL,GAA8B,KAA9B;AAEA,UAAM,EAAE,GAAG,KAAK,mBAAhB;AAEA,SAAK,mBAAL,GAA2B,IAA3B;AAEA,WAAO,EAAP;AACD;;;;;;;;AAOO,EAAA,mBAAmB,CAAC,WAAD,EAAyB;AAClD,QAAI,KAAK,sBAAT,EAAiC;AAC/B,UAAI,CAAC,KAAK,mBAAV,EAA+B;AAC7B,aAAK,mBAAL,GAA2B,WAA3B;AAEA;AACD;;AAED,MAAA,WAAW,CAAC,KAAZ,CAAkB,OAAlB,CAA0B,IAAI,IAAA;AAAA,YAAA,EAAA;;AAAI,eAAA,CAAA,EAAA,GAAA,KAAK,mBAAL,MAAwB,IAAxB,IAAwB,EAAA,KAAA,KAAA,CAAxB,GAAwB,KAAA,CAAxB,GAAwB,EAAA,CAAE,IAAF,CAAO,IAAP,CAAxB;AAAoC,OAAtE;AAEA;AACD;;AAED,UAAM,KAAK,GAAG,KAAK,KAAL,CAAW,KAAX,CAAiB,WAAjB,CAAd;AACA,UAAM,mBAAmB,GAAG,CAAC,KAAK,KAAL,CAAW,SAAX,CAAqB,EAArB,CAAwB,KAAK,CAAC,SAA9B,CAA7B;AAEA,SAAK,IAAL,CAAU,WAAV,CAAsB,KAAtB;AACA,SAAK,IAAL,CAAU,aAAV,EAAyB;AACvB,MAAA,MAAM,EAAE,IADe;AAEvB,MAAA;AAFuB,KAAzB;;AAKA,QAAI,mBAAJ,EAAyB;AACvB,WAAK,IAAL,CAAU,iBAAV,EAA6B;AAC3B,QAAA,MAAM,EAAE,IADmB;AAE3B,QAAA;AAF2B,OAA7B;AAID;;AAED,UAAM,KAAK,GAAG,WAAW,CAAC,OAAZ,CAAoB,OAApB,CAAd;AACA,UAAM,IAAI,GAAG,WAAW,CAAC,OAAZ,CAAoB,MAApB,CAAb;;AAEA,QAAI,KAAJ,EAAW;AACT,WAAK,IAAL,CAAU,OAAV,EAAmB;AACjB,QAAA,MAAM,EAAE,IADS;AAEjB,QAAA,KAAK,EAAE,KAAK,CAAC,KAFI;AAGjB,QAAA;AAHiB,OAAnB;AAKD;;AAED,QAAI,IAAJ,EAAU;AACR,WAAK,IAAL,CAAU,MAAV,EAAkB;AAChB,QAAA,MAAM,EAAE,IADQ;AAEhB,QAAA,KAAK,EAAE,IAAI,CAAC,KAFI;AAGhB,QAAA;AAHgB,OAAlB;AAKD;;AAED,QAAI,CAAC,WAAW,CAAC,UAAb,IAA2B,WAAW,CAAC,OAAZ,CAAoB,eAApB,CAA/B,EAAqE;AACnE;AACD;;AAED,SAAK,IAAL,CAAU,QAAV,EAAoB;AAClB,MAAA,MAAM,EAAE,IADU;AAElB,MAAA;AAFkB,KAApB;AAID;;;;;;AAKM,EAAA,aAAa,CAAC,UAAD,EAAyC;AAC3D,WAAO,aAAa,CAAC,KAAK,KAAN,EAAa,UAAb,CAApB;AACD;;AAUM,EAAA,QAAQ,CAAC,gBAAD,EAA2B,qBAA3B,EAAqD;AAClE,UAAM,IAAI,GAAG,OAAO,gBAAP,KAA4B,QAA5B,GACT,gBADS,GAET,IAFJ;AAIA,UAAM,UAAU,GAAG,OAAO,gBAAP,KAA4B,QAA5B,GACf,qBADe,GAEf,gBAFJ;AAIA,WAAO,QAAQ,CAAC,KAAK,KAAN,EAAa,IAAb,EAAmB,UAAnB,CAAf;AACD;;;;;;AAKM,EAAA,OAAO,GAAA;AACZ,WAAO,KAAK,KAAL,CAAW,GAAX,CAAe,MAAf,EAAP;AACD;;;;;;AAKM,EAAA,OAAO,GAAA;AACZ,WAAO,mBAAmB,CAAC,KAAK,KAAL,CAAW,GAAX,CAAe,OAAhB,EAAyB,KAAK,MAA9B,CAA1B;AACD;;;;;;AAKM,EAAA,OAAO,CAAC,OAAD,EAGb;AACC,UAAM;AACJ,MAAA,cAAc,GAAG,MADb;AAEJ,MAAA,eAAe,GAAG;AAFd,QAGF,OAAO,IAAI,EAHf;AAKA,WAAO,OAAO,CAAC,KAAK,KAAL,CAAW,GAAZ,EAAiB;AAC7B,MAAA,cAD6B;AAE7B,MAAA,eAAe,EAAE,EACf,GAAG,eADY;AAEf,WAAG,2BAA2B,CAAC,KAAK,MAAN;AAFf;AAFY,KAAjB,CAAd;AAOD;;;;;;AAKiB,MAAP,OAAO,GAAA;AAChB,WAAO,WAAW,CAAC,KAAK,KAAL,CAAW,GAAZ,CAAlB;AACD;;;;;;;;AAOM,EAAA,iBAAiB,GAAA;AACtB,IAAA,OAAO,CAAC,IAAR,CAAa,6HAAb;AAEA,WAAO,KAAK,KAAL,CAAW,GAAX,CAAe,OAAf,CAAuB,IAAvB,GAA8B,CAArC;AACD;;;;;;AAKM,EAAA,OAAO,GAAA;AACZ,SAAK,IAAL,CAAU,SAAV;;AAEA,QAAI,KAAK,IAAT,EAAe;AACb,WAAK,IAAL,CAAU,OAAV;AACD;;AAED,SAAK,kBAAL;AACD;;;;;;AAKqB,MAAX,WAAW,GAAA;WAAA,C;;;AAEpB,WAAO,EAAC,CAAA,EAAA,GAAA,KAAK,IAAL,MAAS,IAAT,IAAS,EAAA,KAAA,KAAA,CAAT,GAAS,KAAA,CAAT,GAAS,EAAA,CAAE,OAAZ,CAAP;AACD;;AAxbmD;;MCkazC,I,CAAI;AAkBf,EAAA,WAAA,GAA8D;AAAA,QAAlD,MAAkD,uEAAF,EAAE;AAjB9D,SAAA,IAAA,GAAO,MAAP;AAEA,SAAA,IAAA,GAAO,MAAP;AAEA,SAAA,MAAA,GAAsB,IAAtB;AAEA,SAAA,KAAA,GAAqB,IAArB;AAMA,SAAA,MAAA,GAAqB;AACnB,MAAA,IAAI,EAAE,KAAK,IADQ;AAEnB,MAAA,cAAc,EAAE;AAFG,KAArB;AAME,SAAK,MAAL,GAAc,EACZ,GAAG,KAAK,MADI;AAEZ,SAAG;AAFS,KAAd;AAKA,SAAK,IAAL,GAAY,KAAK,MAAL,CAAY,IAAxB;;AAEA,QAAI,MAAM,CAAC,cAAX,EAA2B;AACzB,MAAA,OAAO,CAAC,IAAR,CAAa,yHAAyH,KAAK,IAAI,IAA/I;AACD,KAV2D,C;;;AAa5D,SAAK,OAAL,GAAe,KAAK,MAAL,CAAY,cAA3B;;AAEA,QAAI,KAAK,MAAL,CAAY,UAAhB,EAA4B;AAC1B,WAAK,OAAL,GAAe,YAAY,CAAC,iBAAiB,CAC3C,IAD2C,EAE3C,YAF2C,EAG3C;AACE,QAAA,IAAI,EAAE,KAAK;AADb,OAH2C,CAAlB,CAA3B;AAOD;;AAED,SAAK,OAAL,GAAe,YAAY,CAAC,iBAAiB,CAC3C,IAD2C,EAE3C,YAF2C,EAG3C;AACE,MAAA,IAAI,EAAE,KAAK,IADb;AAEE,MAAA,OAAO,EAAE,KAAK;AAFhB,KAH2C,CAAlB,CAAZ,IAOT,EAPN;AAQD;;AAEY,SAAN,MAAM,GAAyD;AAAA,QAAtC,MAAsC,uEAAF,EAAE;AACpE,WAAO,IAAI,IAAJ,CAAe,MAAf,CAAP;AACD;;AAED,EAAA,SAAS,GAA+B;AAAA,QAA9B,OAA8B,uEAAF,EAAE;;;AAGtC,UAAM,SAAS,GAAG,KAAK,MAAL,EAAlB;AAEA,IAAA,SAAS,CAAC,OAAV,GAAoB,SAAS,CAAC,KAAK,OAAN,EAAe,OAAf,CAA7B;AAEA,IAAA,SAAS,CAAC,OAAV,GAAoB,YAAY,CAAC,iBAAiB,CAChD,SADgD,EAEhD,YAFgD,EAGhD;AACE,MAAA,IAAI,EAAE,SAAS,CAAC,IADlB;AAEE,MAAA,OAAO,EAAE,SAAS,CAAC;AAFrB,KAHgD,CAAlB,CAAhC;AASA,WAAO,SAAP;AACD;;AAED,EAAA,MAAM,GAAiI;AAAA,QAA1E,cAA0E,uEAAF,EAAE;AACrI,UAAM,SAAS,GAAG,IAAI,IAAJ,CAA2C,cAA3C,CAAlB;AAEA,IAAA,SAAS,CAAC,MAAV,GAAmB,IAAnB;AAEA,SAAK,KAAL,GAAa,SAAb;AAEA,IAAA,SAAS,CAAC,IAAV,GAAiB,cAAc,CAAC,IAAf,GACb,cAAc,CAAC,IADF,GAEb,SAAS,CAAC,MAAV,CAAiB,IAFrB;;AAIA,QAAI,cAAc,CAAC,cAAnB,EAAmC;AACjC,MAAA,OAAO,CAAC,IAAR,CAAa,yHAAyH,SAAS,CAAC,IAAI,IAApJ;AACD;;AAED,IAAA,SAAS,CAAC,OAAV,GAAoB,YAAY,CAAC,iBAAiB,CAChD,SADgD,EAEhD,YAFgD,EAGhD;AACE,MAAA,IAAI,EAAE,SAAS,CAAC;AADlB,KAHgD,CAAlB,CAAhC;AAQA,IAAA,SAAS,CAAC,OAAV,GAAoB,YAAY,CAAC,iBAAiB,CAChD,SADgD,EAEhD,YAFgD,EAGhD;AACE,MAAA,IAAI,EAAE,SAAS,CAAC,IADlB;AAEE,MAAA,OAAO,EAAE,SAAS,CAAC;AAFrB,KAHgD,CAAlB,CAAhC;AASA,WAAO,SAAP;AACD;;AA7Gc;;MChFJ,I,CAAI;AAkBf,EAAA,WAAA,GAA8D;AAAA,QAAlD,MAAkD,uEAAF,EAAE;AAjB9D,SAAA,IAAA,GAAO,MAAP;AAEA,SAAA,IAAA,GAAO,MAAP;AAEA,SAAA,MAAA,GAAsB,IAAtB;AAEA,SAAA,KAAA,GAAqB,IAArB;AAMA,SAAA,MAAA,GAAqB;AACnB,MAAA,IAAI,EAAE,KAAK,IADQ;AAEnB,MAAA,cAAc,EAAE;AAFG,KAArB;AAME,SAAK,MAAL,GAAc,EACZ,GAAG,KAAK,MADI;AAEZ,SAAG;AAFS,KAAd;AAKA,SAAK,IAAL,GAAY,KAAK,MAAL,CAAY,IAAxB;;AAEA,QAAI,MAAM,CAAC,cAAX,EAA2B;AACzB,MAAA,OAAO,CAAC,IAAR,CAAa,yHAAyH,KAAK,IAAI,IAA/I;AACD,KAV2D,C;;;AAa5D,SAAK,OAAL,GAAe,KAAK,MAAL,CAAY,cAA3B;;AAEA,QAAI,KAAK,MAAL,CAAY,UAAhB,EAA4B;AAC1B,WAAK,OAAL,GAAe,YAAY,CAAC,iBAAiB,CAC3C,IAD2C,EAE3C,YAF2C,EAG3C;AACE,QAAA,IAAI,EAAE,KAAK;AADb,OAH2C,CAAlB,CAA3B;AAOD;;AAED,SAAK,OAAL,GAAe,YAAY,CAAC,iBAAiB,CAC3C,IAD2C,EAE3C,YAF2C,EAG3C;AACE,MAAA,IAAI,EAAE,KAAK,IADb;AAEE,MAAA,OAAO,EAAE,KAAK;AAFhB,KAH2C,CAAlB,CAAZ,IAOT,EAPN;AAQD;;AAEY,SAAN,MAAM,GAAyD;AAAA,QAAtC,MAAsC,uEAAF,EAAE;AACpE,WAAO,IAAI,IAAJ,CAAe,MAAf,CAAP;AACD;;AAED,EAAA,SAAS,GAA+B;AAAA,QAA9B,OAA8B,uEAAF,EAAE;;;AAGtC,UAAM,SAAS,GAAG,KAAK,MAAL,EAAlB;AAEA,IAAA,SAAS,CAAC,OAAV,GAAoB,SAAS,CAAC,KAAK,OAAN,EAAe,OAAf,CAA7B;AAEA,IAAA,SAAS,CAAC,OAAV,GAAoB,YAAY,CAAC,iBAAiB,CAChD,SADgD,EAEhD,YAFgD,EAGhD;AACE,MAAA,IAAI,EAAE,SAAS,CAAC,IADlB;AAEE,MAAA,OAAO,EAAE,SAAS,CAAC;AAFrB,KAHgD,CAAlB,CAAhC;AASA,WAAO,SAAP;AACD;;AAED,EAAA,MAAM,GAAiI;AAAA,QAA1E,cAA0E,uEAAF,EAAE;AACrI,UAAM,SAAS,GAAG,IAAI,IAAJ,CAA2C,cAA3C,CAAlB;AAEA,IAAA,SAAS,CAAC,MAAV,GAAmB,IAAnB;AAEA,SAAK,KAAL,GAAa,SAAb;AAEA,IAAA,SAAS,CAAC,IAAV,GAAiB,cAAc,CAAC,IAAf,GACb,cAAc,CAAC,IADF,GAEb,SAAS,CAAC,MAAV,CAAiB,IAFrB;;AAIA,QAAI,cAAc,CAAC,cAAnB,EAAmC;AACjC,MAAA,OAAO,CAAC,IAAR,CAAa,yHAAyH,SAAS,CAAC,IAAI,IAApJ;AACD;;AAED,IAAA,SAAS,CAAC,OAAV,GAAoB,YAAY,CAAC,iBAAiB,CAChD,SADgD,EAEhD,YAFgD,EAGhD;AACE,MAAA,IAAI,EAAE,SAAS,CAAC;AADlB,KAHgD,CAAlB,CAAhC;AAQA,IAAA,SAAS,CAAC,OAAV,GAAoB,YAAY,CAAC,iBAAiB,CAChD,SADgD,EAEhD,YAFgD,EAGhD;AACE,MAAA,IAAI,EAAE,SAAS,CAAC,IADlB;AAEE,MAAA,OAAO,EAAE,SAAS,CAAC;AAFrB,KAHgD,CAAlB,CAAhC;AASA,WAAO,SAAP;AACD;;AA7Gc;;MCjXJ,Q,CAAQ;AAsBnB,EAAA,WAAA,CAAY,SAAZ,EAAkC,KAAlC,EAAgE,OAAhE,EAA0F;AAF1F,SAAA,UAAA,GAAa,KAAb;AAGE,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,MAAL,GAAc,KAAK,CAAC,MAApB;AACA,SAAK,OAAL,GAAe;AACb,MAAA,SAAS,EAAE,IADE;AAEb,MAAA,cAAc,EAAE,IAFH;AAGb,SAAG;AAHU,KAAf;AAKA,SAAK,SAAL,GAAiB,KAAK,CAAC,SAAvB;AACA,SAAK,IAAL,GAAY,KAAK,CAAC,IAAlB;AACA,SAAK,WAAL,GAAmB,KAAK,CAAC,WAAzB;AACA,SAAK,MAAL,GAAc,KAAK,CAAC,MAApB;AACA,SAAK,KAAL;AACD;;AAED,EAAA,KAAK,GAAA;;AAEH;AACD;;AAEM,MAAH,GAAG,GAAA;AACL,WAAO,IAAP;AACD;;AAEa,MAAV,UAAU,GAAA;AACZ,WAAO,IAAP;AACD;;AAED,EAAA,WAAW,CAAC,KAAD,EAAiB;;;AAC1B,UAAM;AAAE,MAAA;AAAF,QAAW,KAAK,MAAtB;AACA,UAAM,MAAM,GAAI,KAAK,CAAC,MAAtB,CAF0B,C;;;AAM1B,UAAM,UAAU,GAAG,MAAM,CAAC,QAAP,KAAoB,CAApB,GACf,CAAA,EAAA,GAAA,MAAM,CAAC,aAAP,MAAoB,IAApB,IAAoB,EAAA,KAAA,KAAA,CAApB,GAAoB,KAAA,CAApB,GAAoB,EAAA,CAAE,OAAF,CAAU,oBAAV,CADL,GAEf,MAAM,CAAC,OAAP,CAAe,oBAAf,CAFJ;;AAIA,QACE,CAAC,KAAK,GAAN,KACG,CAAA,EAAA,GAAA,KAAK,UAAL,MAAe,IAAf,IAAe,EAAA,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAe,EAAA,CAAE,QAAF,CAAW,MAAX,CADlB,KAEG,CAAC,UAHN,EAIE;AACA;AACD;;AAED,QAAI,CAAC,GAAG,CAAR;AACA,QAAI,CAAC,GAAG,CAAR,CAnB0B,C;;AAsB1B,QAAI,KAAK,GAAL,KAAa,UAAjB,EAA6B;AAC3B,YAAM,MAAM,GAAG,KAAK,GAAL,CAAS,qBAAT,EAAf;AACA,YAAM,SAAS,GAAG,UAAU,CAAC,qBAAX,EAAlB;AAEA,MAAA,CAAC,GAAG,SAAS,CAAC,CAAV,GAAc,MAAM,CAAC,CAArB,GAAyB,KAAK,CAAC,OAAnC;AACA,MAAA,CAAC,GAAG,SAAS,CAAC,CAAV,GAAc,MAAM,CAAC,CAArB,GAAyB,KAAK,CAAC,OAAnC;AACD;;AAED,KAAA,EAAA,GAAA,KAAK,CAAC,YAAN,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAE,YAAF,CAAe,KAAK,GAApB,EAAyB,CAAzB,EAA4B,CAA5B,CAAlB,CA9B0B,C;;;AAkC1B,UAAM,SAAS,GAAG,aAAa,CAAC,MAAd,CAAqB,IAAI,CAAC,KAAL,CAAW,GAAhC,EAAqC,KAAK,MAAL,EAArC,CAAlB;AACA,UAAM,WAAW,GAAG,IAAI,CAAC,KAAL,CAAW,EAAX,CAAc,YAAd,CAA2B,SAA3B,CAApB;AAEA,IAAA,IAAI,CAAC,QAAL,CAAc,WAAd;AACD;;AAED,EAAA,SAAS,CAAC,KAAD,EAAa;;;AACpB,QAAI,CAAC,KAAK,GAAV,EAAe;AACb,aAAO,KAAP;AACD;;AAED,QAAI,OAAO,KAAK,OAAL,CAAa,SAApB,KAAkC,UAAtC,EAAkD;AAChD,aAAO,KAAK,OAAL,CAAa,SAAb,CAAuB;AAAE,QAAA;AAAF,OAAvB,CAAP;AACD;;AAED,UAAM,MAAM,GAAI,KAAK,CAAC,MAAtB;AACA,UAAM,WAAW,GAAG,KAAK,GAAL,CAAS,QAAT,CAAkB,MAAlB,KAA6B,EAAC,CAAA,EAAA,GAAA,KAAK,UAAL,MAAe,IAAf,IAAe,EAAA,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAe,EAAA,CAAE,QAAF,CAAW,MAAX,CAAhB,CAAjD,CAVoB,C;;AAapB,QAAI,CAAC,WAAL,EAAkB;AAChB,aAAO,KAAP;AACD;;AAED,UAAM,WAAW,GAAG,KAAK,CAAC,IAAN,KAAe,MAAnC;AACA,UAAM,OAAO,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,QAApB,EAA8B,UAA9B,EAA0C,QAA1C,CAAmD,MAAM,CAAC,OAA1D,KACX,MAAM,CAAC,iBADZ,CAlBoB,C;;AAsBpB,QAAI,OAAO,IAAI,CAAC,WAAhB,EAA6B;AAC3B,aAAO,IAAP;AACD;;AAED,UAAM;AAAE,MAAA;AAAF,QAAiB,KAAK,MAA5B;AACA,UAAM;AAAE,MAAA;AAAF,QAAiB,IAAvB;AACA,UAAM,WAAW,GAAG,CAAC,CAAC,KAAK,IAAL,CAAU,IAAV,CAAe,IAAf,CAAoB,SAA1C;AACA,UAAM,YAAY,GAAG,aAAa,CAAC,YAAd,CAA2B,KAAK,IAAhC,CAArB;AACA,UAAM,WAAW,GAAG,KAAK,CAAC,IAAN,KAAe,MAAnC;AACA,UAAM,YAAY,GAAG,KAAK,CAAC,IAAN,KAAe,OAApC;AACA,UAAM,UAAU,GAAG,KAAK,CAAC,IAAN,KAAe,KAAlC;AACA,UAAM,YAAY,GAAG,KAAK,CAAC,IAAN,KAAe,WAApC;AACA,UAAM,WAAW,GAAG,KAAK,CAAC,IAAN,CAAW,UAAX,CAAsB,MAAtB,CAApB,CAlCoB,C;;;;AAuCpB,QAAI,CAAC,WAAD,IAAgB,YAAhB,IAAgC,WAApC,EAAiD;AAC/C,MAAA,KAAK,CAAC,cAAN;AACD;;AAED,QAAI,WAAW,IAAI,WAAf,IAA8B,CAAC,UAAnC,EAA+C;AAC7C,MAAA,KAAK,CAAC,cAAN;AACA,aAAO,KAAP;AACD,KA9CmB,C;;;AAiDpB,QAAI,WAAW,IAAI,UAAf,IAA6B,CAAC,UAA9B,IAA4C,YAAhD,EAA8D;AAC5D,YAAM,UAAU,GAAG,MAAM,CAAC,OAAP,CAAe,oBAAf,CAAnB;AACA,YAAM,iBAAiB,GAAG,UAAU,KAC9B,KAAK,GAAL,KAAa,UAAb,IAA4B,KAAK,GAAL,CAAS,QAAT,CAAkB,UAAlB,CADE,CAApC;;AAGA,UAAI,iBAAJ,EAAuB;AACrB,aAAK,UAAL,GAAkB,IAAlB;AAEA,QAAA,QAAQ,CAAC,gBAAT,CAA0B,SAA1B,EAAqC,MAAA;AACnC,eAAK,UAAL,GAAkB,KAAlB;AACD,SAFD,EAEG;AAAE,UAAA,IAAI,EAAE;AAAR,SAFH;AAIA,QAAA,QAAQ,CAAC,gBAAT,CAA0B,SAA1B,EAAqC,MAAA;AACnC,eAAK,UAAL,GAAkB,KAAlB;AACD,SAFD,EAEG;AAAE,UAAA,IAAI,EAAE;AAAR,SAFH;AAGD;AACF,KAjEmB,C;;;AAoEpB,QACE,UAAU,IACP,WADH,IAEG,WAFH,IAGG,YAHH,IAIG,UAJH,IAKI,YAAY,IAAI,YANtB,EAOE;AACA,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAED,EAAA,cAAc,CAAC,QAAD,EAAkE;AAC9E,QAAI,CAAC,KAAK,GAAN,IAAa,CAAC,KAAK,UAAvB,EAAmC;AACjC,aAAO,IAAP;AACD;;AAED,QAAI,OAAO,KAAK,OAAL,CAAa,cAApB,KAAuC,UAA3C,EAAuD;AACrD,aAAO,KAAK,OAAL,CAAa,cAAb,CAA4B;AAAE,QAAA;AAAF,OAA5B,CAAP;AACD,KAP6E,C;;;;AAW9E,QAAI,KAAK,IAAL,CAAU,MAAV,IAAoB,KAAK,IAAL,CAAU,MAAlC,EAA0C;AACxC,aAAO,IAAP;AACD,KAb6E,C;;;AAgB9E,QAAI,QAAQ,CAAC,IAAT,KAAkB,WAAtB,EAAmC;AACjC,aAAO,KAAP;AACD,KAlB6E,C;;;;;;AAwB9E,QACE,KAAK,GAAL,CAAS,QAAT,CAAkB,QAAQ,CAAC,MAA3B,KACG,QAAQ,CAAC,IAAT,KAAkB,WADrB,IAEG,KAAK,EAFR,IAGG,KAAK,MAAL,CAAY,SAJjB,EAKE;AACA,YAAM,YAAY,GAAG,CACnB,GAAG,KAAK,CAAC,IAAN,CAAW,QAAQ,CAAC,UAApB,CADgB,EAEnB,GAAG,KAAK,CAAC,IAAN,CAAW,QAAQ,CAAC,YAApB,CAFgB,CAArB,CADA,C;;;AAQA,UAAI,YAAY,CAAC,KAAb,CAAmB,IAAI,IAAI,IAAI,CAAC,iBAAhC,CAAJ,EAAwD;AACtD,eAAO,KAAP;AACD;AACF,KAxC6E,C;;;;AA4C9E,QAAI,KAAK,UAAL,KAAoB,QAAQ,CAAC,MAA7B,IAAuC,QAAQ,CAAC,IAAT,KAAkB,YAA7D,EAA2E;AACzE,aAAO,IAAP;AACD,KA9C6E,C;;;AAiD9E,QAAI,KAAK,UAAL,CAAgB,QAAhB,CAAyB,QAAQ,CAAC,MAAlC,CAAJ,EAA+C;AAC7C,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAED,EAAA,gBAAgB,CAAC,UAAD,EAAe;AAC7B,SAAK,MAAL,CAAY,QAAZ,CAAqB,OAArB,CAA6B,UAAO;AAAA,UAAN;AAAE,QAAA;AAAF,OAAM;AAClC,YAAM,GAAG,GAAG,KAAK,MAAL,EAAZ;AAEA,MAAA,EAAE,CAAC,aAAH,CAAiB,GAAjB,EAAsB,SAAtB,EAAiC,EAC/B,GAAG,KAAK,IAAL,CAAU,KADkB;AAE/B,WAAG;AAF4B,OAAjC;AAKA,aAAO,IAAP;AACD,KATD;AAUD;;AAED,EAAA,UAAU,GAAA;AACR,UAAM,IAAI,GAAG,KAAK,MAAL,EAAb;AACA,UAAM,EAAE,GAAG,IAAI,GAAG,KAAK,IAAL,CAAU,QAA5B;AAEA,SAAK,MAAL,CAAY,QAAZ,CAAqB,WAArB,CAAiC;AAAE,MAAA,IAAF;AAAQ,MAAA;AAAR,KAAjC;AACD;;AAtPkB;;MCDR,O,CAAO;AAMlB,EAAA,WAAA,CAAY,WAAZ,EAAoC;AAClC,SAAK,WAAL,GAAmB,WAAnB;AACA,SAAK,WAAL,GAAmB,KAAK,WAAL,CAAiB,KAAjB,CAAuB,MAA1C;AACD;;AAED,EAAA,GAAG,CAAC,QAAD,EAAiB;AAClB,QAAI,OAAO,GAAG,KAAd;AAEA,UAAM,cAAc,GAAG,KAAK,WAAL,CAAiB,KAAjB,CACpB,KADoB,CACd,KAAK,WADS,EAEpB,MAFoB,CAEb,CAAC,WAAD,EAAc,IAAd,KAAkB;AACxB,YAAM,SAAS,GAAG,IAAI,CACnB,MADe,GAEf,SAFe,CAEL,WAFK,CAAlB;;AAIA,UAAI,SAAS,CAAC,OAAd,EAAuB;AACrB,QAAA,OAAO,GAAG,IAAV;AACD;;AAED,aAAO,SAAS,CAAC,GAAjB;AACD,KAZoB,EAYlB,QAZkB,CAAvB;AAcA,WAAO;AACL,MAAA,QAAQ,EAAE,cADL;AAEL,MAAA;AAFK,KAAP;AAID;;AAhCiB;ACFpB;;;;;;SAIgB,a,CAAc,M,EAS7B;AACC,SAAO,IAAI,SAAJ,CAAc;AACnB,IAAA,IAAI,EAAE,MAAM,CAAC,IADM;AAEnB,IAAA,OAAO,EAAE,UAAwB;AAAA,UAAvB;AAAE,QAAA,KAAF;AAAS,QAAA,KAAT;AAAgB,QAAA;AAAhB,OAAuB;AAC/B,YAAM,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC,aAAR,EAAuB,SAAvB,EAAkC,KAAlC,CAAZ,IAAwD,EAA3E;AACA,YAAM;AAAE,QAAA;AAAF,UAAS,KAAf;AACA,YAAM,KAAK,GAAG,KAAK,CAAC,IAApB;AACA,UAAI,GAAG,GAAG,KAAK,CAAC,EAAhB;;AAEA,UAAI,KAAK,CAAC,CAAD,CAAT,EAAc;AACZ,cAAM,MAAM,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,WAAT,CAAqB,KAAK,CAAC,CAAD,CAA1B,CAAf;AACA,YAAI,UAAU,GAAG,KAAK,GAAG,MAAzB;;AAEA,YAAI,UAAU,GAAG,GAAjB,EAAsB;AACpB,UAAA,UAAU,GAAG,GAAb;AACD,SAFD,MAEO;AACL,UAAA,GAAG,GAAG,UAAU,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,MAA5B;AACD,SARW,C;;;AAWZ,cAAM,QAAQ,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,KAAK,CAAC,CAAD,CAAL,CAAS,MAAT,GAAkB,CAA3B,CAAjB;AAEA,QAAA,EAAE,CAAC,UAAH,CAAc,QAAd,EAAwB,KAAK,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,MAAjB,GAA0B,CAAlD,EAbY,C;;AAgBZ,QAAA,EAAE,CAAC,WAAH,CAAe,UAAf,EAA2B,GAA3B,EAAgC,MAAM,CAAC,IAAP,CAAY,MAAZ,CAAmB,UAAnB,CAAhC;AACD,OAjBD,MAiBO,IAAI,KAAK,CAAC,CAAD,CAAT,EAAc;AACnB,QAAA,EAAE,CAAC,WAAH,CAAe,KAAf,EAAsB,GAAtB,EAA2B,MAAM,CAAC,IAAP,CAAY,MAAZ,CAAmB,UAAnB,CAA3B;AACD;AACF;AA5BkB,GAAd,CAAP;AA8BF;;SC7CgB,e,CAAgB,I,EAAc,E,EAAY,G,EAAoB;AAC5E,QAAM,KAAK,GAAgB,EAA3B,CAD4E,C;;AAI5E,MAAI,IAAI,KAAK,EAAb,EAAiB;AACf,IAAA,GAAG,CACA,OADH,CACW,IADX,EAEG,KAFH,GAGG,OAHH,CAGW,IAAI,IAAA;AACX,YAAM,IAAI,GAAG,GAAG,CAAC,OAAJ,CAAY,IAAI,GAAG,CAAnB,CAAb;AACA,YAAM,KAAK,GAAG,YAAY,CAAC,IAAD,EAAO,IAAI,CAAC,IAAZ,CAA1B;;AAEA,UAAI,CAAC,KAAL,EAAY;AACV;AACD;;AAED,MAAA,KAAK,CAAC,IAAN,CAAW;AACT,QAAA,IADS;AAET,WAAG;AAFM,OAAX;AAID,KAfH;AAgBD,GAjBD,MAiBO;AACL,IAAA,GAAG,CAAC,YAAJ,CAAiB,IAAjB,EAAuB,EAAvB,EAA2B,CAAC,IAAD,EAAO,GAAP,KAAU;AACnC,MAAA,KAAK,CAAC,IAAN,CAAW,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAe,IAAI,KAAK;AACpC,QAAA,IAAI,EAAE,GAD8B;AAEpC,QAAA,EAAE,EAAE,GAAG,GAAG,IAAI,CAAC,QAFqB;AAGpC,QAAA;AAHoC,OAAL,CAAnB,CAAd;AAKD,KAND;AAOD;;AAED,SAAO,KAAP;AACF;AC9BA;;;;;;SAIgB,a,CAAc,M,EAS7B;AACC,SAAO,IAAI,SAAJ,CAAc;AACnB,IAAA,IAAI,EAAE,MAAM,CAAC,IADM;AAEnB,IAAA,OAAO,EAAE,UAAwB;AAAA,UAAvB;AAAE,QAAA,KAAF;AAAS,QAAA,KAAT;AAAgB,QAAA;AAAhB,OAAuB;AAC/B,YAAM,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC,aAAR,EAAuB,SAAvB,EAAkC,KAAlC,CAA/B;;AAEA,UAAI,UAAU,KAAK,KAAf,IAAwB,UAAU,KAAK,IAA3C,EAAiD;AAC/C;AACD;;AAED,YAAM;AAAE,QAAA;AAAF,UAAS,KAAf;AACA,YAAM,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC,MAAN,GAAe,CAAhB,CAA1B;AACA,YAAM,SAAS,GAAG,KAAK,CAAC,CAAD,CAAvB;AACA,UAAI,OAAO,GAAG,KAAK,CAAC,EAApB;;AAEA,UAAI,YAAJ,EAAkB;AAChB,cAAM,WAAW,GAAG,SAAS,CAAC,MAAV,CAAiB,IAAjB,CAApB;AACA,cAAM,SAAS,GAAG,KAAK,CAAC,IAAN,GAAa,SAAS,CAAC,OAAV,CAAkB,YAAlB,CAA/B;AACA,cAAM,OAAO,GAAG,SAAS,GAAG,YAAY,CAAC,MAAzC;AAEA,cAAM,aAAa,GAAG,eAAe,CAAC,KAAK,CAAC,IAAP,EAAa,KAAK,CAAC,EAAnB,EAAuB,KAAK,CAAC,GAA7B,CAAf,CACnB,MADmB,CACZ,IAAI,IAAA;;AAEV,gBAAM,QAAQ,GAAG,IAAI,CAAC,IAAL,CAAU,IAAV,CAAe,QAAhC;AAEA,iBAAO,QAAQ,CAAC,IAAT,CAAc,IAAI,IAAI,IAAI,KAAK,MAAM,CAAC,IAAhB,IAAwB,IAAI,KAAK,IAAI,CAAC,IAAL,CAAU,IAAjE,CAAP;AACD,SANmB,EAOnB,MAPmB,CAOZ,IAAI,IAAI,IAAI,CAAC,EAAL,GAAU,SAPN,CAAtB;;AASA,YAAI,aAAa,CAAC,MAAlB,EAA0B;AACxB,iBAAO,IAAP;AACD;;AAED,YAAI,OAAO,GAAG,KAAK,CAAC,EAApB,EAAwB;AACtB,UAAA,EAAE,CAAC,MAAH,CAAU,OAAV,EAAmB,KAAK,CAAC,EAAzB;AACD;;AAED,YAAI,SAAS,GAAG,KAAK,CAAC,IAAtB,EAA4B;AAC1B,UAAA,EAAE,CAAC,MAAH,CAAU,KAAK,CAAC,IAAN,GAAa,WAAvB,EAAoC,SAApC;AACD;;AAED,QAAA,OAAO,GAAG,KAAK,CAAC,IAAN,GAAa,WAAb,GAA2B,YAAY,CAAC,MAAlD;AAEA,QAAA,EAAE,CAAC,OAAH,CAAW,KAAK,CAAC,IAAN,GAAa,WAAxB,EAAqC,OAArC,EAA8C,MAAM,CAAC,IAAP,CAAY,MAAZ,CAAmB,UAAU,IAAI,EAAjC,CAA9C;AAEA,QAAA,EAAE,CAAC,gBAAH,CAAoB,MAAM,CAAC,IAA3B;AACD;AACF;AA9CkB,GAAd,CAAP;AAgDF;AC/DA;;;;;;;;SAMgB,sB,CAAuB,M,EAStC;AACC,SAAO,IAAI,SAAJ,CAAc;AACnB,IAAA,IAAI,EAAE,MAAM,CAAC,IADM;AAEnB,IAAA,OAAO,EAAE,UAAwB;AAAA,UAAvB;AAAE,QAAA,KAAF;AAAS,QAAA,KAAT;AAAgB,QAAA;AAAhB,OAAuB;AAC/B,YAAM,MAAM,GAAG,KAAK,CAAC,GAAN,CAAU,OAAV,CAAkB,KAAK,CAAC,IAAxB,CAAf;AACA,YAAM,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC,aAAR,EAAuB,SAAvB,EAAkC,KAAlC,CAAZ,IAAwD,EAA3E;;AAEA,UAAI,CAAC,MAAM,CAAC,IAAP,CAAY,CAAC,CAAb,EAAgB,cAAhB,CAA+B,MAAM,CAAC,KAAP,CAAa,CAAC,CAAd,CAA/B,EAAiD,MAAM,CAAC,UAAP,CAAkB,CAAC,CAAnB,CAAjD,EAAwE,MAAM,CAAC,IAA/E,CAAL,EAA2F;AACzF,eAAO,IAAP;AACD;;AAED,MAAA,KAAK,CAAC,EAAN,CACG,MADH,CACU,KAAK,CAAC,IADhB,EACsB,KAAK,CAAC,EAD5B,EAEG,YAFH,CAEgB,KAAK,CAAC,IAFtB,EAE4B,KAAK,CAAC,IAFlC,EAEwC,MAAM,CAAC,IAF/C,EAEqD,UAFrD;AAGD;AAbkB,GAAd,CAAP;AAeF;AClCA;;;;;;SAIgB,a,CAAc,M,EAG7B;AACC,SAAO,IAAI,SAAJ,CAAc;AACnB,IAAA,IAAI,EAAE,MAAM,CAAC,IADM;AAEnB,IAAA,OAAO,EAAE,UAAwB;AAAA,UAAvB;AAAE,QAAA,KAAF;AAAS,QAAA,KAAT;AAAgB,QAAA;AAAhB,OAAuB;AAC/B,UAAI,MAAM,GAAG,MAAM,CAAC,OAApB;AACA,UAAI,KAAK,GAAG,KAAK,CAAC,IAAlB;AACA,YAAM,GAAG,GAAG,KAAK,CAAC,EAAlB;;AAEA,UAAI,KAAK,CAAC,CAAD,CAAT,EAAc;AACZ,cAAM,MAAM,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,WAAT,CAAqB,KAAK,CAAC,CAAD,CAA1B,CAAf;AAEA,QAAA,MAAM,IAAI,KAAK,CAAC,CAAD,CAAL,CAAS,KAAT,CAAe,MAAM,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,MAAjC,CAAV;AACA,QAAA,KAAK,IAAI,MAAT;AAEA,cAAM,MAAM,GAAG,KAAK,GAAG,GAAvB;;AAEA,YAAI,MAAM,GAAG,CAAb,EAAgB;AACd,UAAA,MAAM,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,KAAT,CAAe,MAAM,GAAG,MAAxB,EAAgC,MAAhC,IAA0C,MAAnD;AACA,UAAA,KAAK,GAAG,GAAR;AACD;AACF;;AAED,MAAA,KAAK,CAAC,EAAN,CAAS,UAAT,CAAoB,MAApB,EAA4B,KAA5B,EAAmC,GAAnC;AACD;AAtBkB,GAAd,CAAP;AAwBF;AC5BA;;;;;;;;;;;;;;;;SAcgB,iB,CAAkB,M,EAUjC;AACC,SAAO,IAAI,SAAJ,CAAc;AACnB,IAAA,IAAI,EAAE,MAAM,CAAC,IADM;AAEnB,IAAA,OAAO,EAAE,UAAwB;AAAA,UAAvB;AAAE,QAAA,KAAF;AAAS,QAAA,KAAT;AAAgB,QAAA;AAAhB,OAAuB;AAC/B,YAAM,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC,aAAR,EAAuB,SAAvB,EAAkC,KAAlC,CAAZ,IAAwD,EAA3E;AACA,YAAM,EAAE,GAAG,KAAK,CAAC,EAAN,CAAS,MAAT,CAAgB,KAAK,CAAC,IAAtB,EAA4B,KAAK,CAAC,EAAlC,CAAX;AACA,YAAM,MAAM,GAAG,EAAE,CAAC,GAAH,CAAO,OAAP,CAAe,KAAK,CAAC,IAArB,CAAf;AACA,YAAM,UAAU,GAAG,MAAM,CAAC,UAAP,EAAnB;AACA,YAAM,QAAQ,GAAG,UAAU,IAAI,YAAY,CAAC,UAAD,EAAa,MAAM,CAAC,IAApB,EAA0B,UAA1B,CAA3C;;AAEA,UAAI,CAAC,QAAL,EAAe;AACb,eAAO,IAAP;AACD;;AAED,MAAA,EAAE,CAAC,IAAH,CAAQ,UAAR,EAAoB,QAApB;AAEA,YAAM,MAAM,GAAG,EAAE,CAAC,GAAH,CAAO,OAAP,CAAe,KAAK,CAAC,IAAN,GAAa,CAA5B,EAA+B,UAA9C;;AAEA,UACE,MAAM,IACH,MAAM,CAAC,IAAP,KAAgB,MAAM,CAAC,IAD1B,IAEG,OAAO,CAAC,EAAE,CAAC,GAAJ,EAAS,KAAK,CAAC,IAAN,GAAa,CAAtB,CAFV,KAGI,CAAC,MAAM,CAAC,aAAR,IAAyB,MAAM,CAAC,aAAP,CAAqB,KAArB,EAA4B,MAA5B,CAH7B,CADF,EAKE;AACA,QAAA,EAAE,CAAC,IAAH,CAAQ,KAAK,CAAC,IAAN,GAAa,CAArB;AACD;AACF;AAzBkB,GAAd,CAAP;AA2BF;ACpDA;;;;;;SAIgB,a,CAAc,M,EAS7B;AACC,SAAO,IAAI,SAAJ,CAAc;AACnB,IAAA,IAAI,EAAE,MAAM,CAAC,IADM;AAEnB,IAAA,OAAO,EAAE,UAAwB;AAAA,UAAvB;AAAE,QAAA,KAAF;AAAS,QAAA,KAAT;AAAgB,QAAA;AAAhB,OAAuB;AAC/B,YAAM,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC,aAAR,EAAuB,SAAvB,EAAkC,KAAlC,CAA/B;;AAEA,UAAI,UAAU,KAAK,KAAf,IAAwB,UAAU,KAAK,IAA3C,EAAiD;AAC/C;AACD;;AAED,YAAM;AAAE,QAAA;AAAF,UAAS,KAAf;AACA,YAAM,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC,MAAN,GAAe,CAAhB,CAA1B;AACA,YAAM,SAAS,GAAG,KAAK,CAAC,CAAD,CAAvB;AACA,UAAI,OAAO,GAAG,KAAK,CAAC,EAApB;;AAEA,UAAI,YAAJ,EAAkB;AAChB,cAAM,WAAW,GAAG,SAAS,CAAC,MAAV,CAAiB,IAAjB,CAApB;AACA,cAAM,SAAS,GAAG,KAAK,CAAC,IAAN,GAAa,SAAS,CAAC,OAAV,CAAkB,YAAlB,CAA/B;AACA,cAAM,OAAO,GAAG,SAAS,GAAG,YAAY,CAAC,MAAzC;AAEA,cAAM,aAAa,GAAG,eAAe,CAAC,KAAK,CAAC,IAAP,EAAa,KAAK,CAAC,EAAnB,EAAuB,KAAK,CAAC,GAA7B,CAAf,CACnB,MADmB,CACZ,IAAI,IAAA;;AAEV,gBAAM,QAAQ,GAAG,IAAI,CAAC,IAAL,CAAU,IAAV,CAAe,QAAhC;AAEA,iBAAO,QAAQ,CAAC,IAAT,CAAc,IAAI,IAAI,IAAI,KAAK,MAAM,CAAC,IAAhB,IAAwB,IAAI,KAAK,IAAI,CAAC,IAAL,CAAU,IAAjE,CAAP;AACD,SANmB,EAOnB,MAPmB,CAOZ,IAAI,IAAI,IAAI,CAAC,EAAL,GAAU,SAPN,CAAtB;;AASA,YAAI,aAAa,CAAC,MAAlB,EAA0B;AACxB,iBAAO,IAAP;AACD;;AAED,YAAI,OAAO,GAAG,KAAK,CAAC,EAApB,EAAwB;AACtB,UAAA,EAAE,CAAC,MAAH,CAAU,OAAV,EAAmB,KAAK,CAAC,EAAzB;AACD;;AAED,YAAI,SAAS,GAAG,KAAK,CAAC,IAAtB,EAA4B;AAC1B,UAAA,EAAE,CAAC,MAAH,CAAU,KAAK,CAAC,IAAN,GAAa,WAAvB,EAAoC,SAApC;AACD;;AAED,QAAA,OAAO,GAAG,KAAK,CAAC,IAAN,GAAa,WAAb,GAA2B,YAAY,CAAC,MAAlD;AAEA,QAAA,EAAE,CAAC,OAAH,CAAW,KAAK,CAAC,IAAN,GAAa,WAAxB,EAAqC,OAArC,EAA8C,MAAM,CAAC,IAAP,CAAY,MAAZ,CAAmB,UAAU,IAAI,EAAjC,CAA9C;AAEA,QAAA,EAAE,CAAC,gBAAH,CAAoB,MAAM,CAAC,IAA3B;AACD;AACF;AA9CkB,GAAd,CAAP;AAgDF;AClEA;;;;;;SAIgB,a,CAAc,M,EAG7B;AACC,SAAO,IAAI,SAAJ,CAAc;AACnB,IAAA,IAAI,EAAE,MAAM,CAAC,IADM;AAEnB,IAAA,OAAO,EAAE,UAAwB;AAAA,UAAvB;AAAE,QAAA,KAAF;AAAS,QAAA,KAAT;AAAgB,QAAA;AAAhB,OAAuB;AAC/B,UAAI,MAAM,GAAG,MAAM,CAAC,OAApB;AACA,UAAI,KAAK,GAAG,KAAK,CAAC,IAAlB;AACA,YAAM,GAAG,GAAG,KAAK,CAAC,EAAlB;;AAEA,UAAI,KAAK,CAAC,CAAD,CAAT,EAAc;AACZ,cAAM,MAAM,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,WAAT,CAAqB,KAAK,CAAC,CAAD,CAA1B,CAAf;AAEA,QAAA,MAAM,IAAI,KAAK,CAAC,CAAD,CAAL,CAAS,KAAT,CAAe,MAAM,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,MAAjC,CAAV;AACA,QAAA,KAAK,IAAI,MAAT;AAEA,cAAM,MAAM,GAAG,KAAK,GAAG,GAAvB;;AAEA,YAAI,MAAM,GAAG,CAAb,EAAgB;AACd,UAAA,MAAM,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,KAAT,CAAe,MAAM,GAAG,MAAxB,EAAgC,MAAhC,IAA0C,MAAnD;AACA,UAAA,KAAK,GAAG,GAAR;AACD;AACF;;AAED,MAAA,KAAK,CAAC,EAAN,CAAS,UAAT,CAAoB,MAApB,EAA4B,KAA5B,EAAmC,GAAnC;AACD;AAtBkB,GAAd,CAAP;AAwBF;AC9BA;;;;;SAGgB,uB,CAAwB,M,EAAyB,Y,EAA2B;AAC1F,QAAM,SAAS,GAAG,IAAI,SAAJ,CAAc,MAAd,CAAlB;AAEA,EAAA,YAAY,CAAC,OAAb,CAAqB,WAAW,IAAA;AAC9B,IAAA,WAAW,CAAC,KAAZ,CAAkB,OAAlB,CAA0B,IAAI,IAAA;AAC5B,MAAA,SAAS,CAAC,IAAV,CAAe,IAAf;AACD,KAFD;AAGD,GAJD;AAMA,SAAO,SAAP;AACF;;SCfgB,c,CAAe,K,EAAmB;AAChD,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,SAA1B,EAAqC,CAAC,IAAI,CAA1C,EAA6C;AAC3C,UAAM;AAAE,MAAA;AAAF,QAAW,KAAK,CAAC,IAAN,CAAW,CAAX,CAAjB;;AAEA,QAAI,IAAI,CAAC,WAAL,IAAoB,CAAC,IAAI,CAAC,gBAAL,EAAzB,EAAkD;AAChD,aAAO,IAAP;AACD;AACF;;AAED,SAAO,IAAP;AACF;;SCTgB,Y,CAAa,I,EAAuB,S,EAAoB;AACtE,QAAM,YAAY,GAAkB,EAApC;AAEA,EAAA,IAAI,CAAC,WAAL,CAAiB,CAAC,KAAD,EAAQ,GAAR,KAAW;AAC1B,QAAI,SAAS,CAAC,KAAD,CAAb,EAAsB;AACpB,MAAA,YAAY,CAAC,IAAb,CAAkB;AAChB,QAAA,IAAI,EAAE,KADU;AAEhB,QAAA;AAFgB,OAAlB;AAID;AACF,GAPD;AASA,SAAO,YAAP;AACF;ACbA;;;;;SAGgB,mB,CAAoB,I,EAAuB,K,EAAc,S,EAAoB;AAC3F,QAAM,YAAY,GAAkB,EAApC,CAD2F,C;;;;;;;;;;AAc3F,EAAA,IAAI,CAAC,YAAL,CAAkB,KAAK,CAAC,IAAxB,EAA8B,KAAK,CAAC,EAApC,EAAwC,CAAC,KAAD,EAAQ,GAAR,KAAW;AACjD,QAAI,SAAS,CAAC,KAAD,CAAb,EAAsB;AACpB,MAAA,YAAY,CAAC,IAAb,CAAkB;AAChB,QAAA,IAAI,EAAE,KADU;AAEhB,QAAA;AAFgB,OAAlB;AAID;AACF,GAPD;AASA,SAAO,YAAP;AACF;;SCzBgB,S,CAAU,U,EAAsB;AAC9C,QAAM,kBAAkB,GAAG,gBAAgB,CAAC,OAAjB,CAAyB,UAAzB,CAA3B;AAEA,SAAO,6BAA6B,CAAC,kBAAD,CAApC;AACF;;SCJgB,Y,CAAa,G,EAAkB,U,EAAsB;AACnE,QAAM,MAAM,GAAG,SAAS,CAAC,UAAD,CAAxB;AACA,QAAM,WAAW,GAAGC,MAAI,CAAC,QAALA,CAAc,MAAdA,EAAsB,GAAtBA,CAApB;AAEA,SAAO,mBAAmB,CAAC,WAAW,CAAC,OAAb,EAAsB,MAAtB,CAA1B;AACF;;SCLgB,Y,CAAa,I,EAAc,U,EAAsB;AAC/D,QAAM,MAAM,GAAG,SAAS,CAAC,UAAD,CAAxB;AACA,QAAM,GAAG,GAAG,iBAAiB,CAAC,IAAD,CAA7B;AAEA,SAAO,SAAS,CAAC,UAAV,CAAqB,MAArB,EACJ,KADI,CACE,GADF,EAEJ,MAFI,EAAP;AAGF;;SCNgB,Y,CACd,G,EACA,U,EACA,O,EAGC;AAED,QAAM;AACJ,IAAA,cAAc,GAAG,MADb;AAEJ,IAAA,eAAe,GAAG;AAFd,MAGF,OAAO,IAAI,EAHf;AAIA,QAAM,MAAM,GAAG,SAAS,CAAC,UAAD,CAAxB;AACA,QAAM,WAAW,GAAGA,MAAI,CAAC,QAALA,CAAc,MAAdA,EAAsB,GAAtBA,CAApB;AAEA,SAAO,OAAO,CAAC,WAAD,EAAc;AAC1B,IAAA,cAD0B;AAE1B,IAAA,eAAe,EAAE,EACf,GAAG,eADY;AAEf,SAAG,2BAA2B,CAAC,MAAD;AAFf;AAFS,GAAd,CAAd;AAOF;AC5BA;;;;;;SAIgB,gB,CAAoB,K,EAA+B;AAAA,MAAnB,EAAmB,uEAAd,IAAI,CAAC,SAAS;AACjE,QAAM,IAAI,GAAqB,EAA/B;AAEA,SAAO,KAAK,CAAC,MAAN,CAAa,IAAI,IAAA;AACtB,UAAM,GAAG,GAAG,EAAE,CAAC,IAAD,CAAd;AAEA,WAAO,MAAM,CAAC,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,IAArC,EAA2C,GAA3C,IACH,KADG,GAEF,IAAI,CAAC,GAAD,CAAJ,GAAY,IAFjB;AAGD,GANM,CAAP;AAOF;ACLA;;;;;;AAIA,SAAS,qBAAT,CAA+B,OAA/B,EAAsD;AACpD,QAAM,aAAa,GAAG,gBAAgB,CAAC,OAAD,CAAtC;AAEA,SAAO,aAAa,CAAC,MAAd,KAAyB,CAAzB,GACH,aADG,GAEH,aAAa,CAAC,MAAd,CAAqB,CAAC,MAAD,EAAS,KAAT,KAAc;AACnC,UAAM,IAAI,GAAG,aAAa,CAAC,MAAd,CAAqB,CAAC,CAAD,EAAI,CAAJ,KAAU,CAAC,KAAK,KAArC,CAAb;AAEA,WAAO,CAAC,IAAI,CAAC,IAAL,CAAU,WAAW,IAAA;AAC3B,aAAO,MAAM,CAAC,QAAP,CAAgB,IAAhB,IAAwB,WAAW,CAAC,QAAZ,CAAqB,IAA7C,IACF,MAAM,CAAC,QAAP,CAAgB,EAAhB,IAAsB,WAAW,CAAC,QAAZ,CAAqB,EADzC,IAEF,MAAM,CAAC,QAAP,CAAgB,IAAhB,IAAwB,WAAW,CAAC,QAAZ,CAAqB,IAF3C,IAGF,MAAM,CAAC,QAAP,CAAgB,EAAhB,IAAsB,WAAW,CAAC,QAAZ,CAAqB,EAHhD;AAID,KALO,CAAR;AAMD,GATC,CAFJ;AAYD;AAED;;;;;;SAIgB,gB,CAAiB,S,EAAoB;AACnD,QAAM;AAAE,IAAA,OAAF;AAAW,IAAA;AAAX,MAAqB,SAA3B;AACA,QAAM,OAAO,GAAmB,EAAhC;AAEA,EAAA,OAAO,CAAC,IAAR,CAAa,OAAb,CAAqB,CAAC,OAAD,EAAU,KAAV,KAAe;AAClC,UAAM,MAAM,GAAY,EAAxB,CADkC,C;;;;AAMlC,QAAI,CAAC,OAAO,CAAC,MAAR,CAAe,MAApB,EAA4B;AAC1B,YAAM;AAAE,QAAA,IAAF;AAAQ,QAAA;AAAR,UAAe,KAAK,CAAC,KAAD,CAA1B;;AAKA,UAAI,IAAI,KAAK,SAAT,IAAsB,EAAE,KAAK,SAAjC,EAA4C;AAC1C;AACD;;AAED,MAAA,MAAM,CAAC,IAAP,CAAY;AAAE,QAAA,IAAF;AAAQ,QAAA;AAAR,OAAZ;AACD,KAXD,MAWO;AACL,MAAA,OAAO,CAAC,OAAR,CAAgB,CAAC,IAAD,EAAO,EAAP,KAAS;AACvB,QAAA,MAAM,CAAC,IAAP,CAAY;AAAE,UAAA,IAAF;AAAQ,UAAA;AAAR,SAAZ;AACD,OAFD;AAGD;;AAED,IAAA,MAAM,CAAC,OAAP,CAAe,UAAa;AAAA,UAAZ;AAAE,QAAA,IAAF;AAAQ,QAAA;AAAR,OAAY;AAC1B,YAAM,QAAQ,GAAG,OAAO,CAAC,KAAR,CAAc,KAAd,EAAqB,GAArB,CAAyB,IAAzB,EAA+B,CAAC,CAAhC,CAAjB;AACA,YAAM,MAAM,GAAG,OAAO,CAAC,KAAR,CAAc,KAAd,EAAqB,GAArB,CAAyB,EAAzB,CAAf;AACA,YAAM,QAAQ,GAAG,OAAO,CAAC,MAAR,GAAiB,GAAjB,CAAqB,QAArB,EAA+B,CAAC,CAAhC,CAAjB;AACA,YAAM,MAAM,GAAG,OAAO,CAAC,MAAR,GAAiB,GAAjB,CAAqB,MAArB,CAAf;AAEA,MAAA,OAAO,CAAC,IAAR,CAAa;AACX,QAAA,QAAQ,EAAE;AACR,UAAA,IAAI,EAAE,QADE;AAER,UAAA,EAAE,EAAE;AAFI,SADC;AAKX,QAAA,QAAQ,EAAE;AACR,UAAA,IAAI,EAAE,QADE;AAER,UAAA,EAAE,EAAE;AAFI;AALC,OAAb;AAUD,KAhBD;AAiBD,GAxCD;AA0CA,SAAO,qBAAqB,CAAC,OAAD,CAA5B;AACF;;SCzEgB,Y,CAAa,I,EAAsC;AAAA,MAAf,WAAe,uEAAD,CAAC;AACjE,QAAM,SAAS,GAAG,IAAI,CAAC,IAAL,KAAc,IAAI,CAAC,IAAL,CAAU,MAAV,CAAiB,WAAjD;AACA,QAAM,SAAS,GAAG,SAAS,GAAG,CAAH,GAAO,CAAlC;AACA,QAAM,IAAI,GAAG,WAAb;AACA,QAAM,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,QAAvB;AACA,QAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAe,IAAI,IAAA;AAC/B,UAAM,MAAM,GAAkD;AAC5D,MAAA,IAAI,EAAE,IAAI,CAAC,IAAL,CAAU;AAD4C,KAA9D;;AAIA,QAAI,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,KAAjB,EAAwB,MAA5B,EAAoC;AAClC,MAAA,MAAM,CAAC,KAAP,GAAe,EAAE,GAAG,IAAI,CAAC;AAAV,OAAf;AACD;;AAED,WAAO,MAAP;AACD,GAVa,CAAd;AAWA,QAAM,KAAK,GAAG,EAAE,GAAG,IAAI,CAAC;AAAV,GAAd;AACA,QAAM,MAAM,GAAqB;AAC/B,IAAA,IAAI,EAAE,IAAI,CAAC,IAAL,CAAU,IADe;AAE/B,IAAA,IAF+B;AAG/B,IAAA;AAH+B,GAAjC;;AAMA,MAAI,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,MAAvB,EAA+B;AAC7B,IAAA,MAAM,CAAC,KAAP,GAAe,KAAf;AACD;;AAED,MAAI,KAAK,CAAC,MAAV,EAAkB;AAChB,IAAA,MAAM,CAAC,KAAP,GAAe,KAAf;AACD;;AAED,MAAI,IAAI,CAAC,OAAL,CAAa,UAAjB,EAA6B;AAC3B,IAAA,MAAM,CAAC,OAAP,GAAiB,EAAjB;AAEA,IAAA,IAAI,CAAC,OAAL,CAAa,CAAC,KAAD,EAAQ,MAAR,KAAc;;;AACzB,OAAA,EAAA,GAAA,MAAM,CAAC,OAAP,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAc,EAAA,CAAE,IAAF,CAAO,YAAY,CAAC,KAAD,EAAQ,WAAW,GAAG,MAAd,GAAuB,SAA/B,CAAnB,CAAd;AACD,KAFD;AAGD;;AAED,MAAI,IAAI,CAAC,IAAT,EAAe;AACb,IAAA,MAAM,CAAC,IAAP,GAAc,IAAI,CAAC,IAAnB;AACD;;AAED,SAAO,MAAP;AACF;;SCjDgB,e,CAAgB,K,EAAc;AAC5C,SAAO,QAAQ,CAAC,KAAD,CAAR,IAAmB,KAAK,YAAY,aAA3C;AACF;;SCFgB,Y,CAAa,I,EAAkB,I,EAAc,E,EAAU;AACrE,QAAM,MAAM,GAAG,CAAf;AACA,QAAM,MAAM,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAe,OAAf,CAAuB,IAAtC;AACA,QAAM,YAAY,GAAG,MAAM,CAAC,IAAD,EAAO,MAAP,EAAe,MAAf,CAA3B;AACA,QAAM,WAAW,GAAG,MAAM,CAAC,EAAD,EAAK,MAAL,EAAa,MAAb,CAA1B;AACA,QAAM,KAAK,GAAG,IAAI,CAAC,WAAL,CAAiB,YAAjB,CAAd;AACA,QAAM,GAAG,GAAG,IAAI,CAAC,WAAL,CAAiB,WAAjB,EAA8B,CAAC,CAA/B,CAAZ;AACA,QAAM,GAAG,GAAG,IAAI,CAAC,GAAL,CAAS,KAAK,CAAC,GAAf,EAAoB,GAAG,CAAC,GAAxB,CAAZ;AACA,QAAM,MAAM,GAAG,IAAI,CAAC,GAAL,CAAS,KAAK,CAAC,MAAf,EAAuB,GAAG,CAAC,MAA3B,CAAf;AACA,QAAM,IAAI,GAAG,IAAI,CAAC,GAAL,CAAS,KAAK,CAAC,IAAf,EAAqB,GAAG,CAAC,IAAzB,CAAb;AACA,QAAM,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,KAAK,CAAC,KAAf,EAAsB,GAAG,CAAC,KAA1B,CAAd;AACA,QAAM,KAAK,GAAG,KAAK,GAAG,IAAtB;AACA,QAAM,MAAM,GAAG,MAAM,GAAG,GAAxB;AACA,QAAM,CAAC,GAAG,IAAV;AACA,QAAM,CAAC,GAAG,GAAV;AACA,QAAM,IAAI,GAAG;AACX,IAAA,GADW;AAEX,IAAA,MAFW;AAGX,IAAA,IAHW;AAIX,IAAA,KAJW;AAKX,IAAA,KALW;AAMX,IAAA,MANW;AAOX,IAAA,CAPW;AAQX,IAAA;AARW,GAAb;AAWA,SAAO,EACL,GAAG,IADE;AAEL,IAAA,MAAM,EAAE,MAAM;AAFT,GAAP;AAIF","sourcesContent":["// see: https://github.com/mesqueeb/is-what/blob/88d6e4ca92fb2baab6003c54e02eedf4e729e5ab/src/index.ts\n\nfunction getType(value: any): string {\n  return Object.prototype.toString.call(value).slice(8, -1)\n}\n\nexport function isPlainObject(value: any): value is Record<string, any> {\n  if (getType(value) !== 'Object') {\n    return false\n  }\n\n  return value.constructor === Object && Object.getPrototypeOf(value) === Object.prototype\n}\n","import { isPlainObject } from './isPlainObject'\n\nexport function mergeDeep(target: Record<string, any>, source: Record<string, any>): Record<string, any> {\n  const output = { ...target }\n\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (isPlainObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, { [key]: source[key] })\n        } else {\n          output[key] = mergeDeep(target[key], source[key])\n        }\n      } else {\n        Object.assign(output, { [key]: source[key] })\n      }\n    })\n  }\n\n  return output\n}\n","export function isFunction(value: any): value is Function {\n  return typeof value === 'function'\n}\n","import { MaybeReturnType } from '../types'\nimport { isFunction } from './isFunction'\n\n/**\n * Optionally calls `value` as a function.\n * Otherwise it is returned directly.\n * @param value Function or any value.\n * @param context Optional context to bind to function.\n * @param props Optional props to pass to function.\n */\nexport function callOrReturn<T>(value: T, context: any = undefined, ...props: any[]): MaybeReturnType<T> {\n  if (isFunction(value)) {\n    if (context) {\n      return value.bind(context)(...props)\n    }\n\n    return value(...props)\n  }\n\n  return value as MaybeReturnType<T>\n}\n","import { AnyExtension, RemoveThis, MaybeThisParameterType } from '../types'\n\nexport function getExtensionField<T = any>(\n  extension: AnyExtension,\n  field: string,\n  context?: Omit<MaybeThisParameterType<T>, 'parent'>,\n): RemoveThis<T> {\n\n  if (extension.config[field] === undefined && extension.parent) {\n    return getExtensionField(extension.parent, field, context)\n  }\n\n  if (typeof extension.config[field] === 'function') {\n    const value = extension.config[field].bind({\n      ...context,\n      parent: extension.parent\n        ? getExtensionField(extension.parent, field, context)\n        : null,\n    })\n\n    return value\n  }\n\n  return extension.config[field]\n}\n","import { Plugin, Transaction } from 'prosemirror-state'\nimport { InputRule } from './InputRule'\nimport { PasteRule } from './PasteRule'\nimport { Editor } from './Editor'\nimport { Node } from './Node'\nimport { Mark } from './Mark'\nimport { mergeDeep } from './utilities/mergeDeep'\nimport { callOrReturn } from './utilities/callOrReturn'\nimport { getExtensionField } from './helpers/getExtensionField'\nimport {\n  AnyConfig,\n  Extensions,\n  GlobalAttributes,\n  RawCommands,\n  ParentConfig,\n  KeyboardShortcutCommand,\n} from './types'\nimport { ExtensionConfig } from '.'\n\ndeclare module '@tiptap/core' {\n  interface ExtensionConfig<Options = any, Storage = any> {\n    [key: string]: any;\n\n    /**\n     * Name\n     */\n    name: string,\n\n    /**\n     * Priority\n     */\n    priority?: number,\n\n    /**\n     * Default options\n     */\n    defaultOptions?: Options,\n\n    /**\n     * Default Options\n     */\n    addOptions?: (this: {\n      name: string,\n      parent: Exclude<ParentConfig<ExtensionConfig<Options, Storage>>['addOptions'], undefined>,\n    }) => Options,\n\n    /**\n     * Default Storage\n     */\n    addStorage?: (this: {\n      name: string,\n      options: Options,\n      parent: Exclude<ParentConfig<ExtensionConfig<Options, Storage>>['addStorage'], undefined>,\n    }) => Storage,\n\n    /**\n     * Global attributes\n     */\n    addGlobalAttributes?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addGlobalAttributes'],\n    }) => GlobalAttributes | {},\n\n    /**\n     * Raw\n     */\n    addCommands?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addCommands'],\n    }) => Partial<RawCommands>,\n\n    /**\n     * Keyboard shortcuts\n     */\n    addKeyboardShortcuts?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addKeyboardShortcuts'],\n    }) => {\n      [key: string]: KeyboardShortcutCommand,\n    },\n\n    /**\n     * Input rules\n     */\n    addInputRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addInputRules'],\n    }) => InputRule[],\n\n    /**\n     * Paste rules\n     */\n    addPasteRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addPasteRules'],\n    }) => PasteRule[],\n\n    /**\n     * ProseMirror plugins\n     */\n    addProseMirrorPlugins?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addProseMirrorPlugins'],\n    }) => Plugin[],\n\n    /**\n     * Extensions\n     */\n    addExtensions?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addExtensions'],\n    }) => Extensions,\n\n    /**\n     * Extend Node Schema\n     */\n    extendNodeSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['extendNodeSchema'],\n      },\n      extension: Node,\n    ) => Record<string, any>) | null,\n\n    /**\n     * Extend Mark Schema\n     */\n    extendMarkSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['extendMarkSchema'],\n      },\n      extension: Mark,\n    ) => Record<string, any>) | null,\n\n    /**\n     * The editor is not ready yet.\n     */\n    onBeforeCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onBeforeCreate'],\n    }) => void) | null,\n\n    /**\n     * The editor is ready.\n     */\n    onCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onCreate'],\n    }) => void) | null,\n\n    /**\n     * The content has changed.\n     */\n    onUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onUpdate'],\n    }) => void) | null,\n\n    /**\n     * The selection has changed.\n     */\n    onSelectionUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onSelectionUpdate'],\n    }) => void) | null,\n\n    /**\n     * The editor state has changed.\n     */\n    onTransaction?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['onTransaction'],\n      },\n      props: {\n        transaction: Transaction,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is focused.\n     */\n    onFocus?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['onFocus'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor isn’t focused anymore.\n     */\n    onBlur?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['onBlur'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is destroyed.\n     */\n    onDestroy?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onDestroy'],\n    }) => void) | null,\n  }\n}\n\nexport class Extension<Options = any, Storage = any> {\n  type = 'extension'\n\n  name = 'extension'\n\n  parent: Extension | null = null\n\n  child: Extension | null = null\n\n  options: Options\n\n  storage: Storage\n\n  config: ExtensionConfig = {\n    name: this.name,\n    defaultOptions: {},\n  }\n\n  constructor(config: Partial<ExtensionConfig<Options, Storage>> = {}) {\n    this.config = {\n      ...this.config,\n      ...config,\n    }\n\n    this.name = this.config.name\n\n    if (config.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`)\n    }\n\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions\n\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n        this,\n        'addOptions',\n        {\n          name: this.name,\n        },\n      ))\n    }\n\n    this.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      this,\n      'addStorage',\n      {\n        name: this.name,\n        options: this.options,\n      },\n    )) || {}\n  }\n\n  static create<O = any, S = any>(config: Partial<ExtensionConfig<O, S>> = {}) {\n    return new Extension<O, S>(config)\n  }\n\n  configure(options: Partial<Options> = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend()\n\n    extension.options = mergeDeep(this.options, options) as Options\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n\n  extend<ExtendedOptions = Options, ExtendedStorage = Storage>(extendedConfig: Partial<ExtensionConfig<ExtendedOptions, ExtendedStorage>> = {}) {\n    const extension = new Extension<ExtendedOptions, ExtendedStorage>(extendedConfig)\n\n    extension.parent = this\n\n    this.child = extension\n\n    extension.name = extendedConfig.name\n      ? extendedConfig.name\n      : extension.parent.name\n\n    if (extendedConfig.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`)\n    }\n\n    extension.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n      extension,\n      'addOptions',\n      {\n        name: extension.name,\n      },\n    ))\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n}\n","import { Range, TextSerializer } from '../types'\nimport { Node as ProseMirrorNode } from 'prosemirror-model'\n\nexport function getTextBetween(\n  startNode: ProseMirrorNode,\n  range: Range,\n  options?: {\n    blockSeparator?: string,\n    textSerializers?: Record<string, TextSerializer>,\n  },\n): string {\n  const { from, to } = range\n  const {\n    blockSeparator = '\\n\\n',\n    textSerializers = {},\n  } = options || {}\n  let text = ''\n  let separated = true\n\n  startNode.nodesBetween(from, to, (node, pos, parent, index) => {\n    const textSerializer = textSerializers?.[node.type.name]\n\n    if (textSerializer) {\n      if (node.isBlock && !separated) {\n        text += blockSeparator\n        separated = true\n      }\n\n      text += textSerializer({\n        node,\n        pos,\n        parent,\n        index,\n      })\n    } else if (node.isText) {\n      text += node?.text?.slice(Math.max(from, pos) - pos, to - pos)\n      separated = false\n    } else if (node.isBlock && !separated) {\n      text += blockSeparator\n      separated = true\n    }\n  })\n\n  return text\n}\n","import { Schema } from 'prosemirror-model'\nimport { TextSerializer } from '../types'\n\nexport function getTextSeralizersFromSchema(schema: Schema): Record<string, TextSerializer> {\n  return Object.fromEntries(Object\n    .entries(schema.nodes)\n    .filter(([, node]) => node.spec.toText)\n    .map(([name, node]) => [name, node.spec.toText]))\n}\n","import { Plugin, PluginKey } from 'prosemirror-state'\nimport { Extension } from '../Extension'\nimport { getTextBetween } from '../helpers/getTextBetween'\nimport { getTextSeralizersFromSchema } from '../helpers/getTextSeralizersFromSchema'\n\nexport const ClipboardTextSerializer = Extension.create({\n  name: 'clipboardTextSerializer',\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('clipboardTextSerializer'),\n        props: {\n          clipboardTextSerializer: () => {\n            const { editor } = this\n            const { state, schema } = editor\n            const { doc, selection } = state\n            const { ranges } = selection\n            const from = Math.min(...ranges.map(range => range.$from.pos))\n            const to = Math.max(...ranges.map(range => range.$to.pos))\n            const textSerializers = getTextSeralizersFromSchema(schema)\n            const range = { from, to }\n\n            return getTextBetween(doc, range, {\n              textSerializers,\n            })\n          },\n        },\n      }),\n    ]\n  },\n})\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    blur: {\n      /**\n       * Removes focus from the editor.\n       */\n      blur: () => ReturnType,\n    }\n  }\n}\n\nexport const blur: RawCommands['blur'] = () => ({ editor, view }) => {\n  requestAnimationFrame(() => {\n    if (!editor.isDestroyed) {\n      (view.dom as HTMLElement).blur()\n    }\n  })\n\n  return true\n}\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    clearContent: {\n      /**\n       * Clear the whole document.\n       */\n      clearContent: (emitUpdate?: boolean) => ReturnType,\n    }\n  }\n}\n\nexport const clearContent: RawCommands['clearContent'] = (emitUpdate = false) => ({ commands }) => {\n  return commands.setContent('', emitUpdate)\n}\n","import { liftTarget } from 'prosemirror-transform'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    clearNodes: {\n      /**\n       * Normalize nodes to a simple paragraph.\n       */\n      clearNodes: () => ReturnType,\n    }\n  }\n}\n\nexport const clearNodes: RawCommands['clearNodes'] = () => ({ state, tr, dispatch }) => {\n  const { selection } = tr\n  const { ranges } = selection\n\n  if (!dispatch) {\n    return true\n  }\n\n  ranges.forEach(({ $from, $to }) => {\n    state.doc.nodesBetween($from.pos, $to.pos, (node, pos) => {\n      if (node.type.isText) {\n        return\n      }\n\n      const { doc, mapping } = tr\n      const $mappedFrom = doc.resolve(mapping.map(pos))\n      const $mappedTo = doc.resolve(mapping.map(pos + node.nodeSize))\n      const nodeRange = $mappedFrom.blockRange($mappedTo)\n\n      if (!nodeRange) {\n        return\n      }\n\n      const targetLiftDepth = liftTarget(nodeRange)\n\n      if (node.type.isTextblock) {\n        const { defaultType } = $mappedFrom.parent.contentMatchAt($mappedFrom.index())\n\n        tr.setNodeMarkup(nodeRange.start, defaultType)\n      }\n\n      if (targetLiftDepth || targetLiftDepth === 0) {\n        tr.lift(nodeRange, targetLiftDepth)\n      }\n    })\n  })\n\n  return true\n}\n","import { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    command: {\n      /**\n       * Define a command inline.\n       */\n      command: (fn: (props: Parameters<Command>[0]) => boolean) => ReturnType,\n    }\n  }\n}\n\nexport const command: RawCommands['command'] = fn => props => {\n  return fn(props)\n}\n","import { createParagraphNear as originalCreateParagraphNear } from 'prosemirror-commands'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    createParagraphNear: {\n      /**\n       * Create a paragraph nearby.\n       */\n      createParagraphNear: () => ReturnType,\n    }\n  }\n}\n\nexport const createParagraphNear: RawCommands['createParagraphNear'] = () => ({ state, dispatch }) => {\n  return originalCreateParagraphNear(state, dispatch)\n}\n","import { NodeType, Schema } from 'prosemirror-model'\n\nexport function getNodeType(nameOrType: string | NodeType, schema: Schema): NodeType {\n  if (typeof nameOrType === 'string') {\n    if (!schema.nodes[nameOrType]) {\n      throw Error(`There is no node type named '${nameOrType}'. Maybe you forgot to add the extension?`)\n    }\n\n    return schema.nodes[nameOrType]\n  }\n\n  return nameOrType\n}\n","import { NodeType } from 'prosemirror-model'\nimport { getNodeType } from '../helpers/getNodeType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    deleteNode: {\n      /**\n       * Delete a node.\n       */\n      deleteNode: (typeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const deleteNode: RawCommands['deleteNode'] = typeOrName => ({ tr, state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const $pos = tr.selection.$anchor\n\n  for (let depth = $pos.depth; depth > 0; depth -= 1) {\n    const node = $pos.node(depth)\n\n    if (node.type === type) {\n      if (dispatch) {\n        const from = $pos.before(depth)\n        const to = $pos.after(depth)\n\n        tr.delete(from, to).scrollIntoView()\n      }\n\n      return true\n    }\n  }\n\n  return false\n}\n","import { RawCommands, Range } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    deleteRange: {\n      /**\n       * Delete a given range.\n       */\n      deleteRange: (range: Range) => ReturnType,\n    }\n  }\n}\n\nexport const deleteRange: RawCommands['deleteRange'] = range => ({ tr, dispatch }) => {\n  const { from, to } = range\n\n  if (dispatch) {\n    tr.delete(from, to)\n  }\n\n  return true\n}\n","import { deleteSelection as originalDeleteSelection } from 'prosemirror-commands'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    deleteSelection: {\n      /**\n       * Delete the selection, if there is one.\n       */\n      deleteSelection: () => ReturnType,\n    }\n  }\n}\n\nexport const deleteSelection: RawCommands['deleteSelection'] = () => ({ state, dispatch }) => {\n  return originalDeleteSelection(state, dispatch)\n}\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    enter: {\n      /**\n       * Trigger enter.\n       */\n      enter: () => ReturnType,\n    }\n  }\n}\n\nexport const enter: RawCommands['enter'] = () => ({ commands }) => {\n  return commands.keyboardShortcut('Enter')\n}\n","import { exitCode as originalExitCode } from 'prosemirror-commands'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    exitCode: {\n      /**\n       * Exit from a code block.\n       */\n      exitCode: () => ReturnType,\n    }\n  }\n}\n\nexport const exitCode: RawCommands['exitCode'] = () => ({ state, dispatch }) => {\n  return originalExitCode(state, dispatch)\n}\n","import { MarkType, Schema } from 'prosemirror-model'\n\nexport function getMarkType(nameOrType: string | MarkType, schema: Schema): MarkType {\n  if (typeof nameOrType === 'string') {\n    if (!schema.marks[nameOrType]) {\n      throw Error(`There is no mark type named '${nameOrType}'. Maybe you forgot to add the extension?`)\n    }\n\n    return schema.marks[nameOrType]\n  }\n\n  return nameOrType\n}\n","export function isRegExp(value: any): value is RegExp {\n  return Object.prototype.toString.call(value) === '[object RegExp]'\n}\n","import { isRegExp } from './isRegExp'\n\n/**\n * Check if object1 includes object2\n * @param object1 Object\n * @param object2 Object\n */\nexport function objectIncludes(\n  object1: Record<string, any>,\n  object2: Record<string, any>,\n  options: { strict: boolean } = { strict: true },\n): boolean {\n  const keys = Object.keys(object2)\n\n  if (!keys.length) {\n    return true\n  }\n\n  return keys.every(key => {\n    if (options.strict) {\n      return object2[key] === object1[key]\n    }\n\n    if (isRegExp(object2[key])) {\n      return object2[key].test(object1[key])\n    }\n\n    return object2[key] === object1[key]\n  })\n}\n","import { Mark as ProseMirrorMark, MarkType, ResolvedPos } from 'prosemirror-model'\nimport { objectIncludes } from '../utilities/objectIncludes'\nimport { Range } from '../types'\n\nfunction findMarkInSet(\n  marks: ProseMirrorMark[],\n  type: MarkType,\n  attributes: Record<string, any> = {},\n): ProseMirrorMark | undefined {\n  return marks.find(item => {\n    return item.type === type && objectIncludes(item.attrs, attributes)\n  })\n}\n\nfunction isMarkInSet(\n  marks: ProseMirrorMark[],\n  type: MarkType,\n  attributes: Record<string, any> = {},\n): boolean {\n  return !!findMarkInSet(marks, type, attributes)\n}\n\nexport function getMarkRange(\n  $pos: ResolvedPos,\n  type: MarkType,\n  attributes: Record<string, any> = {},\n): Range | void {\n  if (!$pos || !type) {\n    return\n  }\n\n  const start = $pos.parent.childAfter($pos.parentOffset)\n\n  if (!start.node) {\n    return\n  }\n\n  const mark = findMarkInSet(start.node.marks, type, attributes)\n\n  if (!mark) {\n    return\n  }\n\n  let startIndex = $pos.index()\n  let startPos = $pos.start() + start.offset\n  let endIndex = startIndex + 1\n  let endPos = startPos + start.node.nodeSize\n\n  findMarkInSet(start.node.marks, type, attributes)\n\n  while (startIndex > 0 && mark.isInSet($pos.parent.child(startIndex - 1).marks)) {\n    startIndex -= 1\n    startPos -= $pos.parent.child(startIndex).nodeSize\n  }\n\n  while (\n    endIndex < $pos.parent.childCount\n    && isMarkInSet($pos.parent.child(endIndex).marks, type, attributes)\n  ) {\n    endPos += $pos.parent.child(endIndex).nodeSize\n    endIndex += 1\n  }\n\n  return {\n    from: startPos,\n    to: endPos,\n  }\n}\n","import { TextSelection } from 'prosemirror-state'\nimport { MarkType } from 'prosemirror-model'\nimport { RawCommands } from '../types'\nimport { getMarkType } from '../helpers/getMarkType'\nimport { getMarkRange } from '../helpers/getMarkRange'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    extendMarkRange: {\n      /**\n       * Extends the text selection to the current mark.\n       */\n      extendMarkRange: (typeOrName: string | MarkType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const extendMarkRange: RawCommands['extendMarkRange'] = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n  const type = getMarkType(typeOrName, state.schema)\n  const { doc, selection } = tr\n  const { $from, from, to } = selection\n\n  if (dispatch) {\n    const range = getMarkRange($from, type, attributes)\n\n    if (range && range.from <= from && range.to >= to) {\n      const newSelection = TextSelection.create(doc, range.from, range.to)\n\n      tr.setSelection(newSelection)\n    }\n  }\n\n  return true\n}\n","import { Command, CommandProps, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    first: {\n      /**\n       * Runs one command after the other and stops at the first which returns true.\n       */\n      first: (commands: Command[] | ((props: CommandProps) => Command[])) => ReturnType,\n    }\n  }\n}\n\nexport const first: RawCommands['first'] = commands => props => {\n  const items = typeof commands === 'function'\n    ? commands(props)\n    : commands\n\n  for (let i = 0; i < items.length; i += 1) {\n    if (items[i](props)) {\n      return true\n    }\n  }\n\n  return false\n}\n","export function isClass(value: any): boolean {\n  if (value.constructor?.toString().substring(0, 5) !== 'class') {\n    return false\n  }\n\n  return true\n}\n","import { isClass } from './isClass'\n\nexport function isObject(value: any): boolean {\n  return (\n    value\n    && typeof value === 'object'\n    && !Array.isArray(value)\n    && !isClass(value)\n  )\n}\n","import { TextSelection } from 'prosemirror-state'\nimport { isObject } from '../utilities/isObject'\n\nexport function isTextSelection(value: unknown): value is TextSelection {\n  return isObject(value) && value instanceof TextSelection\n}\n","export function isiOS(): boolean {\n  return [\n    'iPad Simulator',\n    'iPhone Simulator',\n    'iPod Simulator',\n    'iPad',\n    'iPhone',\n    'iPod',\n  ].includes(navigator.platform)\n  // iPad on iOS 13 detection\n  || (navigator.userAgent.includes('Mac') && 'ontouchend' in document)\n}\n","export function minMax(value = 0, min = 0, max = 0): number {\n  return Math.min(Math.max(value, min), max)\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { Selection, TextSelection } from 'prosemirror-state'\nimport { FocusPosition } from '../types'\nimport { minMax } from '../utilities/minMax'\n\nexport function resolveFocusPosition(\n  doc: ProseMirrorNode,\n  position: FocusPosition = null,\n): Selection | null {\n\n  if (!position) {\n    return null\n  }\n\n  if (position === 'start' || position === true) {\n    return Selection.atStart(doc)\n  }\n\n  if (position === 'end') {\n    return Selection.atEnd(doc)\n  }\n\n  if (position === 'all') {\n    return TextSelection.create(doc, 0, doc.content.size)\n  }\n\n  // Check if `position` is in bounds of the doc if `position` is a number.\n  const minPos = Selection.atStart(doc).from\n  const maxPos = Selection.atEnd(doc).to\n  const resolvedFrom = minMax(position, minPos, maxPos)\n  const resolvedEnd = minMax(position, minPos, maxPos)\n\n  return TextSelection.create(doc, resolvedFrom, resolvedEnd)\n}\n","import { RawCommands, FocusPosition } from '../types'\nimport { isTextSelection } from '../helpers/isTextSelection'\nimport { isiOS } from '../utilities/isiOS'\nimport { resolveFocusPosition } from '../helpers/resolveFocusPosition'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    focus: {\n      /**\n       * Focus the editor at the given position.\n       */\n      focus: (\n        position?: FocusPosition,\n        options?: {\n          scrollIntoView?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const focus: RawCommands['focus'] = (position = null, options) => ({\n  editor,\n  view,\n  tr,\n  dispatch,\n}) => {\n  options = {\n    scrollIntoView: true,\n    ...options,\n  }\n\n  const delayedFocus = () => {\n    // focus within `requestAnimationFrame` breaks focus on iOS\n    // so we have to call this\n    if (isiOS()) {\n      (view.dom as HTMLElement).focus()\n    }\n\n    // For React we have to focus asynchronously. Otherwise wild things happen.\n    // see: https://github.com/ueberdosis/tiptap/issues/1520\n    requestAnimationFrame(() => {\n      if (!editor.isDestroyed) {\n        view.focus()\n\n        if (options?.scrollIntoView) {\n          editor.commands.scrollIntoView()\n        }\n      }\n    })\n  }\n\n  if ((view.hasFocus() && position === null) || position === false) {\n    return true\n  }\n\n  // we don’t try to resolve a NodeSelection or CellSelection\n  if (dispatch && position === null && !isTextSelection(editor.state.selection)) {\n    delayedFocus()\n    return true\n  }\n\n  const selection = resolveFocusPosition(editor.state.doc, position) || editor.state.selection\n  const isSameSelection = editor.state.selection.eq(selection)\n\n  if (dispatch) {\n    if (!isSameSelection) {\n      tr.setSelection(selection)\n    }\n\n    // `tr.setSelection` resets the stored marks\n    // so we’ll restore them if the selection is the same as before\n    if (isSameSelection && tr.storedMarks) {\n      tr.setStoredMarks(tr.storedMarks)\n    }\n\n    delayedFocus()\n  }\n\n  return true\n}\n","import { CommandProps, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    forEach: {\n      /**\n       * Loop through an array of items.\n       */\n      forEach: <T>(\n        items: T[],\n        fn: (\n          item: T,\n          props: CommandProps & {\n            index: number,\n          },\n        ) => boolean,\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const forEach: RawCommands['forEach'] = (items, fn) => props => {\n  return items.every((item, index) => fn(item, { ...props, index }))\n}\n","import { ParseOptions } from 'prosemirror-model'\nimport { RawCommands, Content } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    insertContent: {\n      /**\n       * Insert a node or string of HTML at the current position.\n       */\n      insertContent: (\n        value: Content,\n        options?: {\n          parseOptions?: ParseOptions,\n          updateSelection?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const insertContent: RawCommands['insertContent'] = (value, options) => ({ tr, commands }) => {\n  return commands.insertContentAt({ from: tr.selection.from, to: tr.selection.to }, value, options)\n}\n","export function elementFromString(value: string): HTMLElement {\n  // add a wrapper to preserve leading and trailing whitespace\n  const wrappedValue = `<body>${value}</body>`\n\n  return new window.DOMParser().parseFromString(wrappedValue, 'text/html').body\n}\n","import {\n  Schema,\n  DOMParser,\n  Node as ProseMirrorNode,\n  Fragment,\n  ParseOptions,\n} from 'prosemirror-model'\nimport { elementFromString } from '../utilities/elementFromString'\nimport { Content } from '../types'\n\nexport type CreateNodeFromContentOptions = {\n  slice?: boolean,\n  parseOptions?: ParseOptions,\n}\n\nexport function createNodeFromContent(\n  content: Content,\n  schema: Schema,\n  options?: CreateNodeFromContentOptions,\n): ProseMirrorNode | Fragment {\n  options = {\n    slice: true,\n    parseOptions: {},\n    ...options,\n  }\n\n  if (typeof content === 'object' && content !== null) {\n    try {\n      if (Array.isArray(content)) {\n        return Fragment.fromArray(content.map(item => schema.nodeFromJSON(item)))\n      }\n\n      return schema.nodeFromJSON(content)\n    } catch (error) {\n      console.warn(\n        '[tiptap warn]: Invalid content.',\n        'Passed value:',\n        content,\n        'Error:',\n        error,\n      )\n\n      return createNodeFromContent('', schema, options)\n    }\n  }\n\n  if (typeof content === 'string') {\n    const parser = DOMParser.fromSchema(schema)\n\n    return options.slice\n      ? parser.parseSlice(elementFromString(content), options.parseOptions).content\n      : parser.parse(elementFromString(content), options.parseOptions)\n  }\n\n  return createNodeFromContent('', schema, options)\n}\n","import { Selection, Transaction } from 'prosemirror-state'\nimport { ReplaceStep, ReplaceAroundStep } from 'prosemirror-transform'\n\n// source: https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.js#L466\nexport function selectionToInsertionEnd(tr: Transaction, startLen: number, bias: number) {\n  const last = tr.steps.length - 1\n\n  if (last < startLen) {\n    return\n  }\n\n  const step = tr.steps[last]\n\n  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) {\n    return\n  }\n\n  const map = tr.mapping.maps[last]\n  let end = 0\n\n  map.forEach((_from, _to, _newFrom, newTo) => {\n    if (end === 0) {\n      end = newTo\n    }\n  })\n\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias))\n}\n","import { Fragment, Node as ProseMirrorNode, ParseOptions } from 'prosemirror-model'\nimport { createNodeFromContent } from '../helpers/createNodeFromContent'\nimport { selectionToInsertionEnd } from '../helpers/selectionToInsertionEnd'\nimport {\n  RawCommands,\n  Content,\n  Range,\n} from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    insertContentAt: {\n      /**\n       * Insert a node or string of HTML at a specific position.\n       */\n      insertContentAt: (\n        position: number | Range,\n        value: Content,\n        options?: {\n          parseOptions?: ParseOptions,\n          updateSelection?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nconst isFragment = (nodeOrFragment: ProseMirrorNode | Fragment): nodeOrFragment is Fragment => {\n  return nodeOrFragment.toString().startsWith('<')\n}\n\nexport const insertContentAt: RawCommands['insertContentAt'] = (position, value, options) => ({ tr, dispatch, editor }) => {\n  if (dispatch) {\n    options = {\n      parseOptions: {},\n      updateSelection: true,\n      ...options,\n    }\n\n    const content = createNodeFromContent(value, editor.schema, {\n      parseOptions: {\n        preserveWhitespace: 'full',\n        ...options.parseOptions,\n      },\n    })\n\n    // don’t dispatch an empty fragment because this can lead to strange errors\n    if (content.toString() === '<>') {\n      return true\n    }\n\n    let { from, to } = typeof position === 'number'\n      ? { from: position, to: position }\n      : position\n\n    let isOnlyBlockContent = true\n    const nodes = isFragment(content)\n      ? content\n      : [content]\n\n    nodes.forEach(node => {\n      // check if added node is valid\n      node.check()\n\n      isOnlyBlockContent = isOnlyBlockContent\n        ? node.isBlock\n        : false\n    })\n\n    // check if we can replace the wrapping node by\n    // the newly inserted content\n    // example:\n    // replace an empty paragraph by an inserted image\n    // instead of inserting the image below the paragraph\n    if (from === to && isOnlyBlockContent) {\n      const { parent } = tr.doc.resolve(from)\n      const isEmptyTextBlock = parent.isTextblock\n        && !parent.type.spec.code\n        && !parent.childCount\n\n      if (isEmptyTextBlock) {\n        from -= 1\n        to += 1\n      }\n    }\n\n    tr.replaceWith(from, to, content)\n\n    // set cursor at end of inserted content\n    if (options.updateSelection) {\n      selectionToInsertionEnd(tr, tr.steps.length - 1, -1)\n    }\n  }\n\n  return true\n}\n","import { joinBackward as originalJoinBackward } from 'prosemirror-commands'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    joinBackward: {\n      /**\n       * Join two nodes backward.\n       */\n      joinBackward: () => ReturnType,\n    }\n  }\n}\n\nexport const joinBackward: RawCommands['joinBackward'] = () => ({ state, dispatch }) => {\n  return originalJoinBackward(state, dispatch)\n}\n","import { joinForward as originalJoinForward } from 'prosemirror-commands'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    joinForward: {\n      /**\n       * Join two nodes forward.\n       */\n      joinForward: () => ReturnType,\n    }\n  }\n}\n\nexport const joinForward: RawCommands['joinForward'] = () => ({ state, dispatch }) => {\n  return originalJoinForward(state, dispatch)\n}\n","import { RawCommands } from '../types'\n\nconst mac = typeof navigator !== 'undefined' ? /Mac/.test(navigator.platform) : false\n\nfunction normalizeKeyName(name: string) {\n  const parts = name.split(/-(?!$)/)\n  let result = parts[parts.length - 1]\n\n  if (result === 'Space') {\n    result = ' '\n  }\n\n  let alt\n  let ctrl\n  let shift\n  let meta\n\n  for (let i = 0; i < parts.length - 1; i += 1) {\n    const mod = parts[i]\n\n    if (/^(cmd|meta|m)$/i.test(mod)) {\n      meta = true\n    } else if (/^a(lt)?$/i.test(mod)) {\n      alt = true\n    } else if (/^(c|ctrl|control)$/i.test(mod)) {\n      ctrl = true\n    } else if (/^s(hift)?$/i.test(mod)) {\n      shift = true\n    } else if (/^mod$/i.test(mod)) {\n      if (mac) {\n        meta = true\n      } else {\n        ctrl = true\n      }\n    } else {\n      throw new Error(`Unrecognized modifier name: ${mod}`)\n    }\n  }\n\n  if (alt) {\n    result = `Alt-${result}`\n  }\n\n  if (ctrl) {\n    result = `Ctrl-${result}`\n  }\n\n  if (meta) {\n    result = `Meta-${result}`\n  }\n\n  if (shift) {\n    result = `Shift-${result}`\n  }\n\n  return result\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    keyboardShortcut: {\n      /**\n       * Trigger a keyboard shortcut.\n       */\n      keyboardShortcut: (name: string) => ReturnType,\n    }\n  }\n}\n\nexport const keyboardShortcut: RawCommands['keyboardShortcut'] = name => ({\n  editor,\n  view,\n  tr,\n  dispatch,\n}) => {\n  const keys = normalizeKeyName(name).split(/-(?!$)/)\n  const key = keys.find(item => !['Alt', 'Ctrl', 'Meta', 'Shift'].includes(item))\n  const event = new KeyboardEvent('keydown', {\n    key: key === 'Space'\n      ? ' '\n      : key,\n    altKey: keys.includes('Alt'),\n    ctrlKey: keys.includes('Ctrl'),\n    metaKey: keys.includes('Meta'),\n    shiftKey: keys.includes('Shift'),\n    bubbles: true,\n    cancelable: true,\n  })\n\n  const capturedTransaction = editor.captureTransaction(() => {\n    view.someProp('handleKeyDown', f => f(view, event))\n  })\n\n  capturedTransaction?.steps.forEach(step => {\n    const newStep = step.map(tr.mapping)\n\n    if (newStep && dispatch) {\n      tr.maybeStep(newStep)\n    }\n  })\n\n  return true\n}\n","import { EditorState } from 'prosemirror-state'\nimport { NodeType } from 'prosemirror-model'\nimport { objectIncludes } from '../utilities/objectIncludes'\nimport { getNodeType } from './getNodeType'\nimport { NodeRange } from '../types'\n\nexport function isNodeActive(\n  state: EditorState,\n  typeOrName: NodeType | string | null,\n  attributes: Record<string, any> = {},\n): boolean {\n  const { from, to, empty } = state.selection\n  const type = typeOrName\n    ? getNodeType(typeOrName, state.schema)\n    : null\n\n  const nodeRanges: NodeRange[] = []\n\n  state.doc.nodesBetween(from, to, (node, pos) => {\n    if (node.isText) {\n      return\n    }\n\n    const relativeFrom = Math.max(from, pos)\n    const relativeTo = Math.min(to, pos + node.nodeSize)\n\n    nodeRanges.push({\n      node,\n      from: relativeFrom,\n      to: relativeTo,\n    })\n  })\n\n  const selectionRange = to - from\n  const matchedNodeRanges = nodeRanges\n    .filter(nodeRange => {\n      if (!type) {\n        return true\n      }\n\n      return type.name === nodeRange.node.type.name\n    })\n    .filter(nodeRange => objectIncludes(nodeRange.node.attrs, attributes, { strict: false }))\n\n  if (empty) {\n    return !!matchedNodeRanges.length\n  }\n\n  const range = matchedNodeRanges\n    .reduce((sum, nodeRange) => sum + nodeRange.to - nodeRange.from, 0)\n\n  return range >= selectionRange\n}\n","import { lift as originalLift } from 'prosemirror-commands'\nimport { NodeType } from 'prosemirror-model'\nimport { RawCommands } from '../types'\nimport { isNodeActive } from '../helpers/isNodeActive'\nimport { getNodeType } from '../helpers/getNodeType'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    lift: {\n      /**\n       * Removes an existing wrap.\n       */\n      lift: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const lift: RawCommands['lift'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  if (!isActive) {\n    return false\n  }\n\n  return originalLift(state, dispatch)\n}\n","import { liftEmptyBlock as originalLiftEmptyBlock } from 'prosemirror-commands'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    liftEmptyBlock: {\n      /**\n       * Lift block if empty.\n       */\n      liftEmptyBlock: () => ReturnType,\n    }\n  }\n}\n\nexport const liftEmptyBlock: RawCommands['liftEmptyBlock'] = () => ({ state, dispatch }) => {\n  return originalLiftEmptyBlock(state, dispatch)\n}\n","import { liftListItem as originalLiftListItem } from 'prosemirror-schema-list'\nimport { NodeType } from 'prosemirror-model'\nimport { RawCommands } from '../types'\nimport { getNodeType } from '../helpers/getNodeType'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    liftListItem: {\n      /**\n       * Lift the list item into a wrapping list.\n       */\n      liftListItem: (typeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const liftListItem: RawCommands['liftListItem'] = typeOrName => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalLiftListItem(type)(state, dispatch)\n}\n","import { newlineInCode as originalNewlineInCode } from 'prosemirror-commands'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    newlineInCode: {\n      /**\n       * Add a newline character in code.\n       */\n      newlineInCode: () => ReturnType,\n    }\n  }\n}\n\nexport const newlineInCode: RawCommands['newlineInCode'] = () => ({ state, dispatch }) => {\n  return originalNewlineInCode(state, dispatch)\n}\n","import { Schema } from 'prosemirror-model'\n\nexport function getSchemaTypeNameByName(name: string, schema: Schema): 'node' | 'mark' | null {\n  if (schema.nodes[name]) {\n    return 'node'\n  }\n\n  if (schema.marks[name]) {\n    return 'mark'\n  }\n\n  return null\n}\n","/**\n * Remove a property or an array of properties from an object\n * @param obj Object\n * @param key Key to remove\n */\nexport function deleteProps(obj: Record<string, any>, propOrProps: string | string[]): Record<string, any> {\n  const props = typeof propOrProps === 'string'\n    ? [propOrProps]\n    : propOrProps\n\n  return Object\n    .keys(obj)\n    .reduce((newObj: Record<string, any>, prop) => {\n      if (!props.includes(prop)) {\n        newObj[prop] = obj[prop]\n      }\n\n      return newObj\n    }, {})\n}\n","import { NodeType, MarkType } from 'prosemirror-model'\nimport { getNodeType } from '../helpers/getNodeType'\nimport { getMarkType } from '../helpers/getMarkType'\nimport { getSchemaTypeNameByName } from '../helpers/getSchemaTypeNameByName'\nimport { deleteProps } from '../utilities/deleteProps'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    resetAttributes: {\n      /**\n       * Resets some node attributes to the default value.\n       */\n      resetAttributes: (typeOrName: string | NodeType | MarkType, attributes: string | string[]) => ReturnType,\n    }\n  }\n}\n\nexport const resetAttributes: RawCommands['resetAttributes'] = (typeOrName, attributes) => ({ tr, state, dispatch }) => {\n  let nodeType: NodeType | null = null\n  let markType: MarkType | null = null\n\n  const schemaType = getSchemaTypeNameByName(\n    typeof typeOrName === 'string'\n      ? typeOrName\n      : typeOrName.name,\n    state.schema,\n  )\n\n  if (!schemaType) {\n    return false\n  }\n\n  if (schemaType === 'node') {\n    nodeType = getNodeType(typeOrName as NodeType, state.schema)\n  }\n\n  if (schemaType === 'mark') {\n    markType = getMarkType(typeOrName as MarkType, state.schema)\n  }\n\n  if (dispatch) {\n    tr.selection.ranges.forEach(range => {\n      state.doc.nodesBetween(range.$from.pos, range.$to.pos, (node, pos) => {\n        if (nodeType && nodeType === node.type) {\n          tr.setNodeMarkup(pos, undefined, deleteProps(node.attrs, attributes))\n        }\n\n        if (markType && node.marks.length) {\n          node.marks.forEach(mark => {\n            if (markType === mark.type) {\n              tr.addMark(pos, pos + node.nodeSize, markType.create(deleteProps(mark.attrs, attributes)))\n            }\n          })\n        }\n      })\n    })\n  }\n\n  return true\n}\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    scrollIntoView: {\n      /**\n       * Scroll the selection into view.\n       */\n      scrollIntoView: () => ReturnType,\n    }\n  }\n}\n\nexport const scrollIntoView: RawCommands['scrollIntoView'] = () => ({ tr, dispatch }) => {\n  if (dispatch) {\n    tr.scrollIntoView()\n  }\n\n  return true\n}\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectAll: {\n      /**\n       * Select the whole document.\n       */\n      selectAll: () => ReturnType,\n    }\n  }\n}\n\nexport const selectAll: RawCommands['selectAll'] = () => ({ tr, commands }) => {\n  return commands.setTextSelection({\n    from: 0,\n    to: tr.doc.content.size,\n  })\n}\n","import { selectNodeBackward as originalSelectNodeBackward } from 'prosemirror-commands'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectNodeBackward: {\n      /**\n       * Select a node backward.\n       */\n      selectNodeBackward: () => ReturnType,\n    }\n  }\n}\n\nexport const selectNodeBackward: RawCommands['selectNodeBackward'] = () => ({ state, dispatch }) => {\n  return originalSelectNodeBackward(state, dispatch)\n}\n","import { selectNodeForward as originalSelectNodeForward } from 'prosemirror-commands'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectNodeForward: {\n      /**\n       * Select a node forward.\n       */\n      selectNodeForward: () => ReturnType,\n    }\n  }\n}\n\nexport const selectNodeForward: RawCommands['selectNodeForward'] = () => ({ state, dispatch }) => {\n  return originalSelectNodeForward(state, dispatch)\n}\n","import { selectParentNode as originalSelectParentNode } from 'prosemirror-commands'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectParentNode: {\n      /**\n       * Select the parent node.\n       */\n      selectParentNode: () => ReturnType,\n    }\n  }\n}\n\nexport const selectParentNode: RawCommands['selectParentNode'] = () => ({ state, dispatch }) => {\n  return originalSelectParentNode(state, dispatch)\n}\n","import { Schema, Node as ProseMirrorNode, ParseOptions } from 'prosemirror-model'\nimport { Content } from '../types'\nimport { createNodeFromContent } from './createNodeFromContent'\n\nexport function createDocument(\n  content: Content,\n  schema: Schema,\n  parseOptions: ParseOptions = {},\n): ProseMirrorNode {\n  return createNodeFromContent(content, schema, { slice: false, parseOptions }) as ProseMirrorNode\n}\n","import { TextSelection } from 'prosemirror-state'\nimport { ParseOptions } from 'prosemirror-model'\nimport { createDocument } from '../helpers/createDocument'\nimport { RawCommands, Content } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setContent: {\n      /**\n       * Replace the whole document with new content.\n       */\n      setContent: (\n        content: Content,\n        emitUpdate?: boolean,\n        parseOptions?: ParseOptions,\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const setContent: RawCommands['setContent'] = (content, emitUpdate = false, parseOptions = {}) => ({ tr, editor, dispatch }) => {\n  const { doc } = tr\n  const document = createDocument(content, editor.schema, parseOptions)\n  const selection = TextSelection.create(doc, 0, doc.content.size)\n\n  if (dispatch) {\n    tr.setSelection(selection)\n      .replaceSelectionWith(document, false)\n      .setMeta('preventUpdate', !emitUpdate)\n  }\n\n  return true\n}\n","import { EditorState } from 'prosemirror-state'\nimport { Mark, MarkType } from 'prosemirror-model'\nimport { getMarkType } from './getMarkType'\n\nexport function getMarkAttributes(state: EditorState, typeOrName: string | MarkType): Record<string, any> {\n  const type = getMarkType(typeOrName, state.schema)\n  const { from, to, empty } = state.selection\n  const marks: Mark[] = []\n\n  if (empty) {\n    if (state.storedMarks) {\n      marks.push(...state.storedMarks)\n    }\n\n    marks.push(...state.selection.$head.marks())\n  } else {\n    state.doc.nodesBetween(from, to, node => {\n      marks.push(...node.marks)\n    })\n  }\n\n  const mark = marks.find(markItem => markItem.type.name === type.name)\n\n  if (!mark) {\n    return {}\n  }\n\n  return { ...mark.attrs }\n}\n","import { MarkType } from 'prosemirror-model'\nimport { RawCommands } from '../types'\nimport { getMarkType } from '../helpers/getMarkType'\nimport { getMarkAttributes } from '../helpers/getMarkAttributes'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setMark: {\n      /**\n       * Add a mark with new attributes.\n       */\n      setMark: (typeOrName: string | MarkType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const setMark: RawCommands['setMark'] = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n  const { selection } = tr\n  const { empty, ranges } = selection\n  const type = getMarkType(typeOrName, state.schema)\n\n  if (dispatch) {\n    if (empty) {\n      const oldAttributes = getMarkAttributes(state, type)\n\n      tr.addStoredMark(type.create({\n        ...oldAttributes,\n        ...attributes,\n      }))\n    } else {\n      ranges.forEach(range => {\n        const from = range.$from.pos\n        const to = range.$to.pos\n\n        state.doc.nodesBetween(from, to, (node, pos) => {\n          const trimmedFrom = Math.max(pos, from)\n          const trimmedTo = Math.min(pos + node.nodeSize, to)\n          const someHasMark = node.marks.find(mark => mark.type === type)\n\n          // if there is already a mark of this type\n          // we know that we have to merge its attributes\n          // otherwise we add a fresh new mark\n          if (someHasMark) {\n            node.marks.forEach(mark => {\n              if (type === mark.type) {\n                tr.addMark(trimmedFrom, trimmedTo, type.create({\n                  ...mark.attrs,\n                  ...attributes,\n                }))\n              }\n            })\n          } else {\n            tr.addMark(trimmedFrom, trimmedTo, type.create(attributes))\n          }\n        })\n      })\n    }\n  }\n\n  return true\n}\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setMeta: {\n      /**\n       * Store a metadata property in the current transaction.\n       */\n      setMeta: (key: string, value: any) => ReturnType,\n    }\n  }\n}\n\nexport const setMeta: RawCommands['setMeta'] = (key, value) => ({ tr }) => {\n  tr.setMeta(key, value)\n\n  return true\n}\n","import { NodeType } from 'prosemirror-model'\nimport { setBlockType } from 'prosemirror-commands'\nimport { RawCommands } from '../types'\nimport { getNodeType } from '../helpers/getNodeType'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setNode: {\n      /**\n       * Replace a given range with a node.\n       */\n      setNode: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const setNode: RawCommands['setNode'] = (typeOrName, attributes = {}) => ({ state, dispatch, chain }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  // TODO: use a fallback like insertContent?\n  if (!type.isTextblock) {\n    console.warn('[tiptap warn]: Currently \"setNode()\" only supports text block nodes.')\n\n    return false\n  }\n\n  return chain()\n    // try to convert node to default node if needed\n    .command(({ commands }) => {\n      const canSetBlock = setBlockType(type, attributes)(state)\n\n      if (canSetBlock) {\n        return true\n      }\n\n      return commands.clearNodes()\n    })\n    .command(({ state: updatedState }) => {\n      return setBlockType(type, attributes)(updatedState, dispatch)\n    })\n    .run()\n}\n","import { Selection, NodeSelection } from 'prosemirror-state'\nimport { minMax } from '../utilities/minMax'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setNodeSelection: {\n      /**\n       * Creates a NodeSelection.\n       */\n      setNodeSelection: (position: number) => ReturnType,\n    }\n  }\n}\n\nexport const setNodeSelection: RawCommands['setNodeSelection'] = position => ({ tr, dispatch }) => {\n  if (dispatch) {\n    const { doc } = tr\n    const minPos = Selection.atStart(doc).from\n    const maxPos = Selection.atEnd(doc).to\n    const resolvedPos = minMax(position, minPos, maxPos)\n    const selection = NodeSelection.create(doc, resolvedPos)\n\n    tr.setSelection(selection)\n  }\n\n  return true\n}\n","import { Selection, TextSelection } from 'prosemirror-state'\nimport { minMax } from '../utilities/minMax'\nimport { RawCommands, Range } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setTextSelection: {\n      /**\n       * Creates a TextSelection.\n       */\n      setTextSelection: (position: number | Range) => ReturnType,\n    }\n  }\n}\n\nexport const setTextSelection: RawCommands['setTextSelection'] = position => ({ tr, dispatch }) => {\n  if (dispatch) {\n    const { doc } = tr\n    const { from, to } = typeof position === 'number'\n      ? { from: position, to: position }\n      : position\n    const minPos = Selection.atStart(doc).from\n    const maxPos = Selection.atEnd(doc).to\n    const resolvedFrom = minMax(from, minPos, maxPos)\n    const resolvedEnd = minMax(to, minPos, maxPos)\n    const selection = TextSelection.create(doc, resolvedFrom, resolvedEnd)\n\n    tr.setSelection(selection)\n  }\n\n  return true\n}\n","import { sinkListItem as originalSinkListItem } from 'prosemirror-schema-list'\nimport { NodeType } from 'prosemirror-model'\nimport { RawCommands } from '../types'\nimport { getNodeType } from '../helpers/getNodeType'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    sinkListItem: {\n      /**\n       * Sink the list item down into an inner list.\n       */\n      sinkListItem: (typeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const sinkListItem: RawCommands['sinkListItem'] = typeOrName => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalSinkListItem(type)(state, dispatch)\n}\n","import { ExtensionAttribute } from '../types'\n\nexport function getSplittedAttributes(\n  extensionAttributes: ExtensionAttribute[],\n  typeName: string,\n  attributes: Record<string, any>,\n): Record<string, any> {\n  return Object.fromEntries(Object\n    .entries(attributes)\n    .filter(([name]) => {\n      const extensionAttribute = extensionAttributes.find(item => {\n        return item.type === typeName && item.name === name\n      })\n\n      if (!extensionAttribute) {\n        return false\n      }\n\n      return extensionAttribute.attribute.keepOnSplit\n    }))\n}\n","import { canSplit } from 'prosemirror-transform'\nimport { ContentMatch } from 'prosemirror-model'\nimport { EditorState, NodeSelection, TextSelection } from 'prosemirror-state'\nimport { RawCommands } from '../types'\nimport { getSplittedAttributes } from '../helpers/getSplittedAttributes'\n\nfunction defaultBlockAt(match: ContentMatch) {\n  for (let i = 0; i < match.edgeCount; i += 1) {\n    const { type } = match.edge(i)\n\n    if (type.isTextblock && !type.hasRequiredAttrs()) {\n      return type\n    }\n  }\n  return null\n}\n\nfunction ensureMarks(state: EditorState, splittableMarks?: string[]) {\n  const marks = state.storedMarks\n    || (state.selection.$to.parentOffset && state.selection.$from.marks())\n\n  if (marks) {\n    const filteredMarks = marks.filter(mark => splittableMarks?.includes(mark.type.name))\n\n    state.tr.ensureMarks(filteredMarks)\n  }\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    splitBlock: {\n      /**\n       * Forks a new node from an existing node.\n       */\n      splitBlock: (options?: { keepMarks?: boolean }) => ReturnType,\n    }\n  }\n}\n\nexport const splitBlock: RawCommands['splitBlock'] = ({ keepMarks = true } = {}) => ({\n  tr,\n  state,\n  dispatch,\n  editor,\n}) => {\n  const { selection, doc } = tr\n  const { $from, $to } = selection\n  const extensionAttributes = editor.extensionManager.attributes\n  const newAttributes = getSplittedAttributes(\n    extensionAttributes,\n    $from.node().type.name,\n    $from.node().attrs,\n  )\n\n  if (selection instanceof NodeSelection && selection.node.isBlock) {\n    if (!$from.parentOffset || !canSplit(doc, $from.pos)) {\n      return false\n    }\n\n    if (dispatch) {\n      if (keepMarks) {\n        ensureMarks(state, editor.extensionManager.splittableMarks)\n      }\n\n      tr.split($from.pos).scrollIntoView()\n    }\n\n    return true\n  }\n\n  if (!$from.parent.isBlock) {\n    return false\n  }\n\n  if (dispatch) {\n    const atEnd = $to.parentOffset === $to.parent.content.size\n\n    if (selection instanceof TextSelection) {\n      tr.deleteSelection()\n    }\n\n    const deflt = $from.depth === 0\n      ? undefined\n      : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)))\n\n    let types = atEnd && deflt\n      ? [{\n        type: deflt,\n        attrs: newAttributes,\n      }]\n      : undefined\n\n    let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types)\n\n    if (\n      !types\n      && !can\n      && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : undefined)\n    ) {\n      can = true\n      types = deflt\n        ? [{\n          type: deflt,\n          attrs: newAttributes,\n        }]\n        : undefined\n    }\n\n    if (can) {\n      tr.split(tr.mapping.map($from.pos), 1, types)\n\n      if (\n        deflt\n        && !atEnd\n        && !$from.parentOffset\n        && $from.parent.type !== deflt\n      ) {\n        const first = tr.mapping.map($from.before())\n        const $first = tr.doc.resolve(first)\n\n        if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt)) {\n          tr.setNodeMarkup(tr.mapping.map($from.before()), deflt)\n        }\n      }\n    }\n\n    if (keepMarks) {\n      ensureMarks(state, editor.extensionManager.splittableMarks)\n    }\n\n    tr.scrollIntoView()\n  }\n\n  return true\n}\n","import {\n  NodeType,\n  Node as ProseMirrorNode,\n  Fragment,\n  Slice,\n} from 'prosemirror-model'\nimport { canSplit } from 'prosemirror-transform'\nimport { TextSelection } from 'prosemirror-state'\nimport { RawCommands } from '../types'\nimport { getNodeType } from '../helpers/getNodeType'\nimport { getSplittedAttributes } from '../helpers/getSplittedAttributes'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    splitListItem: {\n      /**\n       * Splits one list item into two list items.\n       */\n      splitListItem: (typeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const splitListItem: RawCommands['splitListItem'] = typeOrName => ({\n  tr, state, dispatch, editor,\n}) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const { $from, $to } = state.selection\n\n  // @ts-ignore\n  // eslint-disable-next-line\n  const node: ProseMirrorNode = state.selection.node\n\n  if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to)) {\n    return false\n  }\n\n  const grandParent = $from.node(-1)\n\n  if (grandParent.type !== type) {\n    return false\n  }\n\n  const extensionAttributes = editor.extensionManager.attributes\n\n  if ($from.parent.content.size === 0 && $from.node(-1).childCount === $from.indexAfter(-1)) {\n    // In an empty block. If this is a nested list, the wrapping\n    // list item should be split. Otherwise, bail out and let next\n    // command handle lifting.\n    if (\n      $from.depth === 2\n      || $from.node(-3).type !== type\n      || $from.index(-2) !== $from.node(-2).childCount - 1\n    ) {\n      return false\n    }\n\n    if (dispatch) {\n      let wrap = Fragment.empty\n      // eslint-disable-next-line\n      const depthBefore = $from.index(-1)\n        ? 1\n        : $from.index(-2)\n          ? 2\n          : 3\n\n      // Build a fragment containing empty versions of the structure\n      // from the outer list item to the parent node of the cursor\n      for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d -= 1) {\n        wrap = Fragment.from($from.node(d).copy(wrap))\n      }\n\n      // eslint-disable-next-line\n      const depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount\n        ? 1\n        : $from.indexAfter(-2) < $from.node(-3).childCount\n          ? 2\n          : 3\n\n      // Add a second list item with an empty default start node\n      const newNextTypeAttributes = getSplittedAttributes(\n        extensionAttributes,\n        $from.node().type.name,\n        $from.node().attrs,\n      )\n      const nextType = type.contentMatch.defaultType?.createAndFill(newNextTypeAttributes) || undefined\n\n      wrap = wrap.append(Fragment.from(type.createAndFill(null, nextType) || undefined))\n\n      const start = $from.before($from.depth - (depthBefore - 1))\n\n      tr.replace(start, $from.after(-depthAfter), new Slice(wrap, 4 - depthBefore, 0))\n\n      let sel = -1\n\n      tr.doc.nodesBetween(start, tr.doc.content.size, (n, pos) => {\n        if (sel > -1) {\n          return false\n        }\n\n        if (n.isTextblock && n.content.size === 0) {\n          sel = pos + 1\n        }\n      })\n\n      if (sel > -1) {\n        tr.setSelection(TextSelection.near(tr.doc.resolve(sel)))\n      }\n\n      tr.scrollIntoView()\n    }\n\n    return true\n  }\n\n  const nextType = $to.pos === $from.end()\n    ? grandParent.contentMatchAt(0).defaultType\n    : null\n\n  const newTypeAttributes = getSplittedAttributes(\n    extensionAttributes,\n    grandParent.type.name,\n    grandParent.attrs,\n  )\n  const newNextTypeAttributes = getSplittedAttributes(\n    extensionAttributes,\n    $from.node().type.name,\n    $from.node().attrs,\n  )\n\n  tr.delete($from.pos, $to.pos)\n\n  const types = nextType\n    ? [{ type, attrs: newTypeAttributes }, { type: nextType, attrs: newNextTypeAttributes }]\n    : [{ type, attrs: newTypeAttributes }]\n\n  if (!canSplit(tr.doc, $from.pos, 2)) {\n    return false\n  }\n\n  if (dispatch) {\n    tr.split($from.pos, 2, types).scrollIntoView()\n  }\n\n  return true\n}\n","import { ResolvedPos, Node as ProseMirrorNode } from 'prosemirror-model'\nimport { Predicate } from '../types'\n\nexport function findParentNodeClosestToPos($pos: ResolvedPos, predicate: Predicate): ({\n  pos: number,\n  start: number,\n  depth: number,\n  node: ProseMirrorNode,\n} | undefined) {\n  for (let i = $pos.depth; i > 0; i -= 1) {\n    const node = $pos.node(i)\n\n    if (predicate(node)) {\n      return {\n        pos: i > 0 ? $pos.before(i) : 0,\n        start: $pos.start(i),\n        depth: i,\n        node,\n      }\n    }\n  }\n}\n","import { Selection } from 'prosemirror-state'\nimport { findParentNodeClosestToPos } from './findParentNodeClosestToPos'\nimport { Predicate } from '../types'\n\nexport function findParentNode(predicate: Predicate) {\n  return (selection: Selection) => findParentNodeClosestToPos(selection.$from, predicate)\n}\n","import { Extensions } from '../types'\nimport { Extension } from '../Extension'\nimport { Node } from '../Node'\nimport { Mark } from '../Mark'\n\nexport function splitExtensions(extensions: Extensions) {\n  const baseExtensions = extensions.filter(extension => extension.type === 'extension') as Extension[]\n  const nodeExtensions = extensions.filter(extension => extension.type === 'node') as Node[]\n  const markExtensions = extensions.filter(extension => extension.type === 'mark') as Mark[]\n\n  return {\n    baseExtensions,\n    nodeExtensions,\n    markExtensions,\n  }\n}\n","import { Extensions } from '../types'\nimport { NodeConfig } from '..'\nimport { splitExtensions } from './splitExtensions'\nimport { callOrReturn } from '../utilities/callOrReturn'\nimport { getExtensionField } from '../helpers/getExtensionField'\n\nexport function isList(name: string, extensions: Extensions): boolean {\n  const { nodeExtensions } = splitExtensions(extensions)\n  const extension = nodeExtensions.find(item => item.name === name)\n\n  if (!extension) {\n    return false\n  }\n\n  const context = {\n    name: extension.name,\n    options: extension.options,\n    storage: extension.storage,\n  }\n  const group = callOrReturn(getExtensionField<NodeConfig['group']>(extension, 'group', context))\n\n  if (typeof group !== 'string') {\n    return false\n  }\n\n  return group.split(' ').includes('list')\n}\n","import { NodeType } from 'prosemirror-model'\nimport { Transaction } from 'prosemirror-state'\nimport { canJoin } from 'prosemirror-transform'\nimport { RawCommands } from '../types'\nimport { getNodeType } from '../helpers/getNodeType'\nimport { findParentNode } from '../helpers/findParentNode'\nimport { isList } from '../helpers/isList'\n\nconst joinListBackwards = (tr: Transaction, listType: NodeType): boolean => {\n  const list = findParentNode(node => node.type === listType)(tr.selection)\n\n  if (!list) {\n    return true\n  }\n\n  const before = tr.doc.resolve(Math.max(0, list.pos - 1)).before(list.depth)\n\n  if (before === undefined) {\n    return true\n  }\n\n  const nodeBefore = tr.doc.nodeAt(before)\n  const canJoinBackwards = list.node.type === nodeBefore?.type\n    && canJoin(tr.doc, list.pos)\n\n  if (!canJoinBackwards) {\n    return true\n  }\n\n  tr.join(list.pos)\n\n  return true\n}\n\nconst joinListForwards = (tr: Transaction, listType: NodeType): boolean => {\n  const list = findParentNode(node => node.type === listType)(tr.selection)\n\n  if (!list) {\n    return true\n  }\n\n  const after = tr.doc.resolve(list.start).after(list.depth)\n\n  if (after === undefined) {\n    return true\n  }\n\n  const nodeAfter = tr.doc.nodeAt(after)\n  const canJoinForwards = list.node.type === nodeAfter?.type\n    && canJoin(tr.doc, after)\n\n  if (!canJoinForwards) {\n    return true\n  }\n\n  tr.join(after)\n\n  return true\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleList: {\n      /**\n       * Toggle between different list types.\n       */\n      toggleList: (listTypeOrName: string | NodeType, itemTypeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const toggleList: RawCommands['toggleList'] = (listTypeOrName, itemTypeOrName) => ({\n  editor, tr, state, dispatch, chain, commands, can,\n}) => {\n  const { extensions } = editor.extensionManager\n  const listType = getNodeType(listTypeOrName, state.schema)\n  const itemType = getNodeType(itemTypeOrName, state.schema)\n  const { selection } = state\n  const { $from, $to } = selection\n  const range = $from.blockRange($to)\n\n  if (!range) {\n    return false\n  }\n\n  const parentList = findParentNode(node => isList(node.type.name, extensions))(selection)\n\n  if (range.depth >= 1 && parentList && range.depth - parentList.depth <= 1) {\n    // remove list\n    if (parentList.node.type === listType) {\n      return commands.liftListItem(itemType)\n    }\n\n    // change list type\n    if (\n      isList(parentList.node.type.name, extensions)\n      && listType.validContent(parentList.node.content)\n      && dispatch\n    ) {\n      return chain()\n        .command(() => {\n          tr.setNodeMarkup(parentList.pos, listType)\n\n          return true\n        })\n        .command(() => joinListBackwards(tr, listType))\n        .command(() => joinListForwards(tr, listType))\n        .run()\n    }\n  }\n\n  return chain()\n    // try to convert node to default node if needed\n    .command(() => {\n      const canWrapInList = can().wrapInList(listType)\n\n      if (canWrapInList) {\n        return true\n      }\n\n      return commands.clearNodes()\n    })\n    .wrapInList(listType)\n    .command(() => joinListBackwards(tr, listType))\n    .command(() => joinListForwards(tr, listType))\n    .run()\n}\n","import { EditorState } from 'prosemirror-state'\nimport { MarkType } from 'prosemirror-model'\nimport { objectIncludes } from '../utilities/objectIncludes'\nimport { getMarkType } from './getMarkType'\nimport { MarkRange } from '../types'\n\nexport function isMarkActive(\n  state: EditorState,\n  typeOrName: MarkType | string | null,\n  attributes: Record<string, any> = {},\n): boolean {\n  const { empty, ranges } = state.selection\n  const type = typeOrName\n    ? getMarkType(typeOrName, state.schema)\n    : null\n\n  if (empty) {\n    return !!(state.storedMarks || state.selection.$from.marks())\n      .filter(mark => {\n        if (!type) {\n          return true\n        }\n\n        return type.name === mark.type.name\n      })\n      .find(mark => objectIncludes(mark.attrs, attributes, { strict: false }))\n  }\n\n  let selectionRange = 0\n  const markRanges: MarkRange[] = []\n\n  ranges.forEach(({ $from, $to }) => {\n    const from = $from.pos\n    const to = $to.pos\n\n    state.doc.nodesBetween(from, to, (node, pos) => {\n      if (!node.isText && !node.marks.length) {\n        return\n      }\n\n      const relativeFrom = Math.max(from, pos)\n      const relativeTo = Math.min(to, pos + node.nodeSize)\n      const range = relativeTo - relativeFrom\n\n      selectionRange += range\n\n      markRanges.push(...node.marks.map(mark => ({\n        mark,\n        from: relativeFrom,\n        to: relativeTo,\n      })))\n    })\n  })\n\n  if (selectionRange === 0) {\n    return false\n  }\n\n  // calculate range of matched mark\n  const matchedRange = markRanges\n    .filter(markRange => {\n      if (!type) {\n        return true\n      }\n\n      return type.name === markRange.mark.type.name\n    })\n    .filter(markRange => objectIncludes(markRange.mark.attrs, attributes, { strict: false }))\n    .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0)\n\n  // calculate range of marks that excludes the searched mark\n  // for example `code` doesn’t allow any other marks\n  const excludedRange = markRanges\n    .filter(markRange => {\n      if (!type) {\n        return true\n      }\n\n      return markRange.mark.type !== type\n        && markRange.mark.type.excludes(type)\n    })\n    .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0)\n\n  // we only include the result of `excludedRange`\n  // if there is a match at all\n  const range = matchedRange > 0\n    ? matchedRange + excludedRange\n    : matchedRange\n\n  return range >= selectionRange\n}\n","import { MarkType } from 'prosemirror-model'\nimport { RawCommands } from '../types'\nimport { getMarkType } from '../helpers/getMarkType'\nimport { isMarkActive } from '../helpers/isMarkActive'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleMark: {\n      /**\n       * Toggle a mark on and off.\n       */\n      toggleMark: (\n        typeOrName: string | MarkType,\n        attributes?: Record<string, any>,\n        options?: {\n          /**\n           * Removes the mark even across the current selection. Defaults to `false`.\n           */\n          extendEmptyMarkRange?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const toggleMark: RawCommands['toggleMark'] = (typeOrName, attributes = {}, options = {}) => ({ state, commands }) => {\n  const { extendEmptyMarkRange = false } = options\n  const type = getMarkType(typeOrName, state.schema)\n  const isActive = isMarkActive(state, type, attributes)\n\n  if (isActive) {\n    return commands.unsetMark(type, { extendEmptyMarkRange })\n  }\n\n  return commands.setMark(type, attributes)\n}\n","import { NodeType } from 'prosemirror-model'\nimport { RawCommands } from '../types'\nimport { isNodeActive } from '../helpers/isNodeActive'\nimport { getNodeType } from '../helpers/getNodeType'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleNode: {\n      /**\n       * Toggle a node with another node.\n       */\n      toggleNode: (typeOrName: string | NodeType, toggleTypeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const toggleNode: RawCommands['toggleNode'] = (typeOrName, toggleTypeOrName, attributes = {}) => ({ state, commands }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const toggleType = getNodeType(toggleTypeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  if (isActive) {\n    return commands.setNode(toggleType)\n  }\n\n  return commands.setNode(type, attributes)\n}\n","import { NodeType } from 'prosemirror-model'\nimport { RawCommands } from '../types'\nimport { isNodeActive } from '../helpers/isNodeActive'\nimport { getNodeType } from '../helpers/getNodeType'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleWrap: {\n      /**\n       * Wraps nodes in another node, or removes an existing wrap.\n       */\n      toggleWrap: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const toggleWrap: RawCommands['toggleWrap'] = (typeOrName, attributes = {}) => ({ state, commands }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  if (isActive) {\n    return commands.lift(type)\n  }\n\n  return commands.wrapIn(type, attributes)\n}\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    undoInputRule: {\n      /**\n       * Undo an input rule.\n       */\n      undoInputRule: () => ReturnType,\n    }\n  }\n}\n\nexport const undoInputRule: RawCommands['undoInputRule'] = () => ({ state, dispatch }) => {\n  const plugins = state.plugins\n\n  for (let i = 0; i < plugins.length; i += 1) {\n    const plugin = plugins[i]\n    let undoable\n\n    // @ts-ignore\n    // eslint-disable-next-line\n    if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {\n      if (dispatch) {\n        const tr = state.tr\n        const toUndo = undoable.transform\n\n        for (let j = toUndo.steps.length - 1; j >= 0; j -= 1) {\n          tr.step(toUndo.steps[j].invert(toUndo.docs[j]))\n        }\n\n        if (undoable.text) {\n          const marks = tr.doc.resolve(undoable.from).marks()\n\n          tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks))\n        } else {\n          tr.delete(undoable.from, undoable.to)\n        }\n      }\n\n      return true\n    }\n  }\n\n  return false\n}\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    unsetAllMarks: {\n      /**\n       * Remove all marks in the current selection.\n       */\n      unsetAllMarks: () => ReturnType,\n    }\n  }\n}\n\nexport const unsetAllMarks: RawCommands['unsetAllMarks'] = () => ({ tr, dispatch }) => {\n  const { selection } = tr\n  const { empty, ranges } = selection\n\n  if (empty) {\n    return true\n  }\n\n  if (dispatch) {\n    ranges.forEach(range => {\n      tr.removeMark(range.$from.pos, range.$to.pos)\n    })\n  }\n\n  return true\n}\n","import { MarkType } from 'prosemirror-model'\nimport { RawCommands } from '../types'\nimport { getMarkType } from '../helpers/getMarkType'\nimport { getMarkRange } from '../helpers/getMarkRange'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    unsetMark: {\n      /**\n       * Remove all marks in the current selection.\n       */\n      unsetMark: (\n        typeOrName: string | MarkType,\n        options?: {\n          /**\n           * Removes the mark even across the current selection. Defaults to `false`.\n           */\n          extendEmptyMarkRange?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const unsetMark: RawCommands['unsetMark'] = (typeOrName, options = {}) => ({ tr, state, dispatch }) => {\n  const { extendEmptyMarkRange = false } = options\n  const { selection } = tr\n  const type = getMarkType(typeOrName, state.schema)\n  const { $from, empty, ranges } = selection\n\n  if (!dispatch) {\n    return true\n  }\n\n  if (empty && extendEmptyMarkRange) {\n    let { from, to } = selection\n    const attrs = $from.marks().find(mark => mark.type === type)?.attrs\n    const range = getMarkRange($from, type, attrs)\n\n    if (range) {\n      from = range.from\n      to = range.to\n    }\n\n    tr.removeMark(from, to, type)\n  } else {\n    ranges.forEach(range => {\n      tr.removeMark(range.$from.pos, range.$to.pos, type)\n    })\n  }\n\n  tr.removeStoredMark(type)\n\n  return true\n}\n","import { NodeType, MarkType } from 'prosemirror-model'\nimport { getNodeType } from '../helpers/getNodeType'\nimport { getMarkType } from '../helpers/getMarkType'\nimport { getSchemaTypeNameByName } from '../helpers/getSchemaTypeNameByName'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    updateAttributes: {\n      /**\n       * Update attributes of a node or mark.\n       */\n      updateAttributes: (typeOrName: string | NodeType | MarkType, attributes: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const updateAttributes: RawCommands['updateAttributes'] = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n  let nodeType: NodeType | null = null\n  let markType: MarkType | null = null\n\n  const schemaType = getSchemaTypeNameByName(\n    typeof typeOrName === 'string'\n      ? typeOrName\n      : typeOrName.name,\n    state.schema,\n  )\n\n  if (!schemaType) {\n    return false\n  }\n\n  if (schemaType === 'node') {\n    nodeType = getNodeType(typeOrName as NodeType, state.schema)\n  }\n\n  if (schemaType === 'mark') {\n    markType = getMarkType(typeOrName as MarkType, state.schema)\n  }\n\n  if (dispatch) {\n    tr.selection.ranges.forEach(range => {\n      const from = range.$from.pos\n      const to = range.$to.pos\n\n      state.doc.nodesBetween(from, to, (node, pos) => {\n        if (nodeType && nodeType === node.type) {\n          tr.setNodeMarkup(pos, undefined, {\n            ...node.attrs,\n            ...attributes,\n          })\n        }\n\n        if (markType && node.marks.length) {\n          node.marks.forEach(mark => {\n            if (markType === mark.type) {\n              const trimmedFrom = Math.max(pos, from)\n              const trimmedTo = Math.min(pos + node.nodeSize, to)\n\n              tr.addMark(trimmedFrom, trimmedTo, markType.create({\n                ...mark.attrs,\n                ...attributes,\n              }))\n            }\n          })\n        }\n      })\n    })\n  }\n\n  return true\n}\n","import { wrapIn as originalWrapIn } from 'prosemirror-commands'\nimport { NodeType } from 'prosemirror-model'\nimport { RawCommands } from '../types'\nimport { getNodeType } from '../helpers/getNodeType'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    wrapIn: {\n      /**\n       * Wraps nodes in another node.\n       */\n      wrapIn: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const wrapIn: RawCommands['wrapIn'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalWrapIn(type, attributes)(state, dispatch)\n}\n","import { wrapInList as originalWrapInList } from 'prosemirror-schema-list'\nimport { NodeType } from 'prosemirror-model'\nimport { RawCommands } from '../types'\nimport { getNodeType } from '../helpers/getNodeType'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    wrapInList: {\n      /**\n       * Wrap a node in a list.\n       */\n      wrapInList: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const wrapInList: RawCommands['wrapInList'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalWrapInList(type, attributes)(state, dispatch)\n}\n","import { Extension } from '../Extension'\nimport * as blur from '../commands/blur'\nimport * as clearContent from '../commands/clearContent'\nimport * as clearNodes from '../commands/clearNodes'\nimport * as command from '../commands/command'\nimport * as createParagraphNear from '../commands/createParagraphNear'\nimport * as deleteNode from '../commands/deleteNode'\nimport * as deleteRange from '../commands/deleteRange'\nimport * as deleteSelection from '../commands/deleteSelection'\nimport * as enter from '../commands/enter'\nimport * as exitCode from '../commands/exitCode'\nimport * as extendMarkRange from '../commands/extendMarkRange'\nimport * as first from '../commands/first'\nimport * as focus from '../commands/focus'\nimport * as forEach from '../commands/forEach'\nimport * as insertContent from '../commands/insertContent'\nimport * as insertContentAt from '../commands/insertContentAt'\nimport * as joinBackward from '../commands/joinBackward'\nimport * as joinForward from '../commands/joinForward'\nimport * as keyboardShortcut from '../commands/keyboardShortcut'\nimport * as lift from '../commands/lift'\nimport * as liftEmptyBlock from '../commands/liftEmptyBlock'\nimport * as liftListItem from '../commands/liftListItem'\nimport * as newlineInCode from '../commands/newlineInCode'\nimport * as resetAttributes from '../commands/resetAttributes'\nimport * as scrollIntoView from '../commands/scrollIntoView'\nimport * as selectAll from '../commands/selectAll'\nimport * as selectNodeBackward from '../commands/selectNodeBackward'\nimport * as selectNodeForward from '../commands/selectNodeForward'\nimport * as selectParentNode from '../commands/selectParentNode'\nimport * as setContent from '../commands/setContent'\nimport * as setMark from '../commands/setMark'\nimport * as setMeta from '../commands/setMeta'\nimport * as setNode from '../commands/setNode'\nimport * as setNodeSelection from '../commands/setNodeSelection'\nimport * as setTextSelection from '../commands/setTextSelection'\nimport * as sinkListItem from '../commands/sinkListItem'\nimport * as splitBlock from '../commands/splitBlock'\nimport * as splitListItem from '../commands/splitListItem'\nimport * as toggleList from '../commands/toggleList'\nimport * as toggleMark from '../commands/toggleMark'\nimport * as toggleNode from '../commands/toggleNode'\nimport * as toggleWrap from '../commands/toggleWrap'\nimport * as undoInputRule from '../commands/undoInputRule'\nimport * as unsetAllMarks from '../commands/unsetAllMarks'\nimport * as unsetMark from '../commands/unsetMark'\nimport * as updateAttributes from '../commands/updateAttributes'\nimport * as wrapIn from '../commands/wrapIn'\nimport * as wrapInList from '../commands/wrapInList'\n\nexport { blur }\nexport { clearContent }\nexport { clearNodes }\nexport { command }\nexport { createParagraphNear }\nexport { deleteNode }\nexport { deleteRange }\nexport { deleteSelection }\nexport { enter }\nexport { exitCode }\nexport { extendMarkRange }\nexport { first }\nexport { focus }\nexport { forEach }\nexport { insertContent }\nexport { insertContentAt }\nexport { joinBackward }\nexport { joinForward }\nexport { keyboardShortcut }\nexport { lift }\nexport { liftEmptyBlock }\nexport { liftListItem }\nexport { newlineInCode }\nexport { resetAttributes }\nexport { scrollIntoView }\nexport { selectAll }\nexport { selectNodeBackward }\nexport { selectNodeForward }\nexport { selectParentNode }\nexport { setContent }\nexport { setMark }\nexport { setMeta }\nexport { setNode }\nexport { setNodeSelection }\nexport { setTextSelection }\nexport { sinkListItem }\nexport { splitBlock }\nexport { splitListItem }\nexport { toggleList }\nexport { toggleMark }\nexport { toggleNode }\nexport { toggleWrap }\nexport { undoInputRule }\nexport { unsetAllMarks }\nexport { unsetMark }\nexport { updateAttributes }\nexport { wrapIn }\nexport { wrapInList }\n\nexport const Commands = Extension.create({\n  name: 'commands',\n\n  addCommands() {\n    return {\n      ...blur,\n      ...clearContent,\n      ...clearNodes,\n      ...command,\n      ...createParagraphNear,\n      ...deleteNode,\n      ...deleteRange,\n      ...deleteSelection,\n      ...enter,\n      ...exitCode,\n      ...extendMarkRange,\n      ...first,\n      ...focus,\n      ...forEach,\n      ...insertContent,\n      ...insertContentAt,\n      ...joinBackward,\n      ...joinForward,\n      ...keyboardShortcut,\n      ...lift,\n      ...liftEmptyBlock,\n      ...liftListItem,\n      ...newlineInCode,\n      ...resetAttributes,\n      ...scrollIntoView,\n      ...selectAll,\n      ...selectNodeBackward,\n      ...selectNodeForward,\n      ...selectParentNode,\n      ...setContent,\n      ...setMark,\n      ...setMeta,\n      ...setNode,\n      ...setNodeSelection,\n      ...setTextSelection,\n      ...sinkListItem,\n      ...splitBlock,\n      ...splitListItem,\n      ...toggleList,\n      ...toggleMark,\n      ...toggleNode,\n      ...toggleWrap,\n      ...undoInputRule,\n      ...unsetAllMarks,\n      ...unsetMark,\n      ...updateAttributes,\n      ...wrapIn,\n      ...wrapInList,\n    }\n  },\n})\n","import { Plugin, PluginKey } from 'prosemirror-state'\nimport { Extension } from '../Extension'\n\nexport const Editable = Extension.create({\n  name: 'editable',\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('editable'),\n        props: {\n          editable: () => this.editor.options.editable,\n        },\n      }),\n    ]\n  },\n})\n","import { Plugin, PluginKey } from 'prosemirror-state'\nimport { Extension } from '../Extension'\n\nexport const FocusEvents = Extension.create({\n  name: 'focusEvents',\n\n  addProseMirrorPlugins() {\n    const { editor } = this\n\n    return [\n      new Plugin({\n        key: new PluginKey('focusEvents'),\n        props: {\n          handleDOMEvents: {\n            focus: (view, event) => {\n              editor.isFocused = true\n\n              const transaction = editor.state.tr\n                .setMeta('focus', { event })\n                .setMeta('addToHistory', false)\n\n              view.dispatch(transaction)\n\n              return false\n            },\n            blur: (view, event) => {\n              editor.isFocused = false\n\n              const transaction = editor.state.tr\n                .setMeta('blur', { event })\n                .setMeta('addToHistory', false)\n\n              view.dispatch(transaction)\n\n              return false\n            },\n          },\n        },\n      }),\n    ]\n  },\n})\n","import { EditorState, Transaction } from 'prosemirror-state'\n\nexport function createChainableState(config: {\n  transaction: Transaction,\n  state: EditorState,\n}): EditorState {\n  const { state, transaction } = config\n  let { selection } = transaction\n  let { doc } = transaction\n  let { storedMarks } = transaction\n\n  return {\n    ...state,\n    schema: state.schema,\n    plugins: state.plugins,\n    apply: state.apply.bind(state),\n    applyTransaction: state.applyTransaction.bind(state),\n    reconfigure: state.reconfigure.bind(state),\n    toJSON: state.toJSON.bind(state),\n    get storedMarks() {\n      return storedMarks\n    },\n    get selection() {\n      return selection\n    },\n    get doc() {\n      return doc\n    },\n    get tr() {\n      selection = transaction.selection\n      doc = transaction.doc\n      storedMarks = transaction.storedMarks\n\n      return transaction\n    },\n  }\n}\n","import { EditorState, Transaction } from 'prosemirror-state'\nimport { Editor } from './Editor'\nimport { createChainableState } from './helpers/createChainableState'\nimport {\n  SingleCommands,\n  ChainedCommands,\n  CanCommands,\n  AnyCommands,\n  CommandProps,\n} from './types'\n\nexport class CommandManager {\n\n  editor: Editor\n\n  rawCommands: AnyCommands\n\n  customState?: EditorState\n\n  constructor(props: {\n    editor: Editor,\n    state?: EditorState,\n  }) {\n    this.editor = props.editor\n    this.rawCommands = this.editor.extensionManager.commands\n    this.customState = props.state\n  }\n\n  get hasCustomState(): boolean {\n    return !!this.customState\n  }\n\n  get state(): EditorState {\n    return this.customState || this.editor.state\n  }\n\n  get commands(): SingleCommands {\n    const { rawCommands, editor, state } = this\n    const { view } = editor\n    const { tr } = state\n    const props = this.buildProps(tr)\n\n    return Object.fromEntries(Object\n      .entries(rawCommands)\n      .map(([name, command]) => {\n        const method = (...args: any[]) => {\n          const callback = command(...args)(props)\n\n          if (!tr.getMeta('preventDispatch') && !this.hasCustomState) {\n            view.dispatch(tr)\n          }\n\n          return callback\n        }\n\n        return [name, method]\n      })) as unknown as SingleCommands\n  }\n\n  get chain(): () => ChainedCommands {\n    return () => this.createChain()\n  }\n\n  get can(): () => CanCommands {\n    return () => this.createCan()\n  }\n\n  public createChain(startTr?: Transaction, shouldDispatch = true): ChainedCommands {\n    const { rawCommands, editor, state } = this\n    const { view } = editor\n    const callbacks: boolean[] = []\n    const hasStartTransaction = !!startTr\n    const tr = startTr || state.tr\n\n    const run = () => {\n      if (\n        !hasStartTransaction\n        && shouldDispatch\n        && !tr.getMeta('preventDispatch')\n        && !this.hasCustomState\n      ) {\n        view.dispatch(tr)\n      }\n\n      return callbacks.every(callback => callback === true)\n    }\n\n    const chain = {\n      ...Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\n        const chainedCommand = (...args: never[]) => {\n          const props = this.buildProps(tr, shouldDispatch)\n          const callback = command(...args)(props)\n\n          callbacks.push(callback)\n\n          return chain\n        }\n\n        return [name, chainedCommand]\n      })),\n      run,\n    } as unknown as ChainedCommands\n\n    return chain\n  }\n\n  public createCan(startTr?: Transaction): CanCommands {\n    const { rawCommands, state } = this\n    const dispatch = undefined\n    const tr = startTr || state.tr\n    const props = this.buildProps(tr, dispatch)\n    const formattedCommands = Object.fromEntries(Object\n      .entries(rawCommands)\n      .map(([name, command]) => {\n        return [name, (...args: never[]) => command(...args)({ ...props, dispatch })]\n      })) as unknown as SingleCommands\n\n    return {\n      ...formattedCommands,\n      chain: () => this.createChain(tr, dispatch),\n    } as CanCommands\n  }\n\n  public buildProps(tr: Transaction, shouldDispatch = true): CommandProps {\n    const { rawCommands, editor, state } = this\n    const { view } = editor\n\n    if (state.storedMarks) {\n      tr.setStoredMarks(state.storedMarks)\n    }\n\n    const props: CommandProps = {\n      tr,\n      editor,\n      view,\n      state: createChainableState({\n        state,\n        transaction: tr,\n      }),\n      dispatch: shouldDispatch\n        ? () => undefined\n        : undefined,\n      chain: () => this.createChain(tr),\n      can: () => this.createCan(tr),\n      get commands() {\n        return Object.fromEntries(Object\n          .entries(rawCommands)\n          .map(([name, command]) => {\n            return [name, (...args: never[]) => command(...args)(props)]\n          })) as unknown as SingleCommands\n      },\n    }\n\n    return props\n  }\n\n}\n","import { Plugin, PluginKey, Selection } from 'prosemirror-state'\nimport { createChainableState } from '../helpers/createChainableState'\nimport { CommandManager } from '../CommandManager'\nimport { Extension } from '../Extension'\n\nexport const Keymap = Extension.create({\n  name: 'keymap',\n\n  addKeyboardShortcuts() {\n    const handleBackspace = () => this.editor.commands.first(({ commands }) => [\n      () => commands.undoInputRule(),\n      // maybe convert first text block node to default node\n      () => commands.command(({ tr }) => {\n        const { selection, doc } = tr\n        const { empty, $anchor } = selection\n        const { pos, parent } = $anchor\n        const isAtStart = Selection.atStart(doc).from === pos\n\n        if (\n          !empty\n          || !isAtStart\n          || !parent.type.isTextblock\n          || parent.textContent.length\n        ) {\n          return false\n        }\n\n        return commands.clearNodes()\n      }),\n      () => commands.deleteSelection(),\n      () => commands.joinBackward(),\n      () => commands.selectNodeBackward(),\n    ])\n\n    const handleDelete = () => this.editor.commands.first(({ commands }) => [\n      () => commands.deleteSelection(),\n      () => commands.joinForward(),\n      () => commands.selectNodeForward(),\n    ])\n\n    return {\n      Enter: () => this.editor.commands.first(({ commands }) => [\n        () => commands.newlineInCode(),\n        () => commands.createParagraphNear(),\n        () => commands.liftEmptyBlock(),\n        () => commands.splitBlock(),\n      ]),\n      'Mod-Enter': () => this.editor.commands.exitCode(),\n      Backspace: handleBackspace,\n      'Mod-Backspace': handleBackspace,\n      'Shift-Backspace': handleBackspace,\n      Delete: handleDelete,\n      'Mod-Delete': handleDelete,\n      'Mod-a': () => this.editor.commands.selectAll(),\n    }\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      // With this plugin we check if the whole document was selected and deleted.\n      // In this case we will additionally call `clearNodes()` to convert e.g. a heading\n      // to a paragraph if necessary.\n      // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well\n      // with many other commands.\n      new Plugin({\n        key: new PluginKey('clearDocument'),\n        appendTransaction: (transactions, oldState, newState) => {\n          const docChanges = transactions.some(transaction => transaction.docChanged)\n            && !oldState.doc.eq(newState.doc)\n\n          if (!docChanges) {\n            return\n          }\n\n          const { empty, from, to } = oldState.selection\n          const allFrom = Selection.atStart(oldState.doc).from\n          const allEnd = Selection.atEnd(oldState.doc).to\n          const allWasSelected = from === allFrom && to === allEnd\n          const isEmpty = newState.doc.textBetween(0, newState.doc.content.size, ' ', ' ').length === 0\n\n          if (empty || !allWasSelected || !isEmpty) {\n            return\n          }\n\n          const tr = newState.tr\n          const state = createChainableState({\n            state: newState,\n            transaction: tr,\n          })\n          const { commands } = new CommandManager({\n            editor: this.editor,\n            state,\n          })\n\n          commands.clearNodes()\n\n          if (!tr.steps.length) {\n            return\n          }\n\n          return tr\n        },\n      }),\n    ]\n  },\n})\n","import { Plugin, PluginKey } from 'prosemirror-state'\nimport { Extension } from '../Extension'\n\nexport const Tabindex = Extension.create({\n  name: 'tabindex',\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('tabindex'),\n        props: {\n          attributes: {\n            tabindex: '0',\n          },\n        },\n      }),\n    ]\n  },\n})\n","import { EditorState } from 'prosemirror-state'\nimport { Node, NodeType } from 'prosemirror-model'\nimport { getNodeType } from './getNodeType'\n\nexport function getNodeAttributes(state: EditorState, typeOrName: string | NodeType): Record<string, any> {\n  const type = getNodeType(typeOrName, state.schema)\n  const { from, to } = state.selection\n  const nodes: Node[] = []\n\n  state.doc.nodesBetween(from, to, node => {\n    nodes.push(node)\n  })\n\n  const node = nodes\n    .reverse()\n    .find(nodeItem => nodeItem.type.name === type.name)\n\n  if (!node) {\n    return {}\n  }\n\n  return { ...node.attrs }\n}\n","import { MarkType, NodeType } from 'prosemirror-model'\nimport { EditorState } from 'prosemirror-state'\nimport { getSchemaTypeNameByName } from './getSchemaTypeNameByName'\nimport { getNodeAttributes } from './getNodeAttributes'\nimport { getMarkAttributes } from './getMarkAttributes'\n\nexport function getAttributes(\n  state: EditorState,\n  typeOrName: string | NodeType | MarkType,\n): Record<string, any> {\n  const schemaType = getSchemaTypeNameByName(\n    typeof typeOrName === 'string'\n      ? typeOrName\n      : typeOrName.name,\n    state.schema,\n  )\n\n  if (schemaType === 'node') {\n    return getNodeAttributes(state, typeOrName as NodeType)\n  }\n\n  if (schemaType === 'mark') {\n    return getMarkAttributes(state, typeOrName as MarkType)\n  }\n\n  return {}\n}\n","import { EditorState } from 'prosemirror-state'\nimport { isNodeActive } from './isNodeActive'\nimport { isMarkActive } from './isMarkActive'\nimport { getSchemaTypeNameByName } from './getSchemaTypeNameByName'\n\nexport function isActive(state: EditorState, name: string | null, attributes: Record<string, any> = {}): boolean {\n  if (!name) {\n    return isNodeActive(state, null, attributes) || isMarkActive(state, null, attributes)\n  }\n\n  const schemaType = getSchemaTypeNameByName(name, state.schema)\n\n  if (schemaType === 'node') {\n    return isNodeActive(state, name, attributes)\n  }\n\n  if (schemaType === 'mark') {\n    return isMarkActive(state, name, attributes)\n  }\n\n  return false\n}\n","import { DOMSerializer, Schema, Fragment } from 'prosemirror-model'\n\nexport function getHTMLFromFragment(fragment: Fragment, schema: Schema): string {\n  const documentFragment = DOMSerializer\n    .fromSchema(schema)\n    .serializeFragment(fragment)\n\n  const temporaryDocument = document.implementation.createHTMLDocument()\n  const container = temporaryDocument.createElement('div')\n\n  container.appendChild(documentFragment)\n\n  return container.innerHTML\n}\n","import { TextSerializer } from '../types'\nimport { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { getTextBetween } from './getTextBetween'\n\nexport function getText(\n  node: ProseMirrorNode,\n  options?: {\n    blockSeparator?: string,\n    textSerializers?: Record<string, TextSerializer>,\n  },\n) {\n  const range = {\n    from: 0,\n    to: node.content.size,\n  }\n\n  return getTextBetween(node, range, options)\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\n\nexport function isNodeEmpty(node: ProseMirrorNode): boolean {\n  const defaultContent = node.type.createAndFill()?.toJSON()\n  const content = node.toJSON()\n\n  return JSON.stringify(defaultContent) === JSON.stringify(content)\n}\n","export function createStyleTag(style: string): HTMLStyleElement {\n  const tipTapStyleTag = (<HTMLStyleElement>document.querySelector('style[data-tiptap-style]'))\n\n  if (tipTapStyleTag !== null) {\n    return tipTapStyleTag\n  }\n\n  const styleNode = document.createElement('style')\n\n  styleNode.setAttribute('data-tiptap-style', '')\n  styleNode.innerHTML = style\n  document.getElementsByTagName('head')[0].appendChild(styleNode)\n\n  return styleNode\n}\n","import { EditorState, Plugin, TextSelection } from 'prosemirror-state'\nimport { Editor } from './Editor'\nimport { CommandManager } from './CommandManager'\nimport { createChainableState } from './helpers/createChainableState'\nimport { isRegExp } from './utilities/isRegExp'\nimport {\n  Range,\n  ExtendedRegExpMatchArray,\n  SingleCommands,\n  ChainedCommands,\n  CanCommands,\n} from './types'\n\nexport type InputRuleMatch = {\n  index: number,\n  text: string,\n  replaceWith?: string,\n  match?: RegExpMatchArray,\n  data?: Record<string, any>,\n}\n\nexport type InputRuleFinder =\n  | RegExp\n  | ((text: string) => InputRuleMatch | null)\n\nexport class InputRule {\n  find: InputRuleFinder\n\n  handler: (props: {\n    state: EditorState,\n    range: Range,\n    match: ExtendedRegExpMatchArray,\n    commands: SingleCommands,\n    chain: () => ChainedCommands,\n    can: () => CanCommands,\n  }) => void\n\n  constructor(config: {\n    find: InputRuleFinder,\n    handler: (props: {\n      state: EditorState,\n      range: Range,\n      match: ExtendedRegExpMatchArray,\n      commands: SingleCommands,\n      chain: () => ChainedCommands,\n      can: () => CanCommands,\n    }) => void,\n  }) {\n    this.find = config.find\n    this.handler = config.handler\n  }\n}\n\nconst inputRuleMatcherHandler = (text: string, find: InputRuleFinder): ExtendedRegExpMatchArray | null => {\n  if (isRegExp(find)) {\n    return find.exec(text)\n  }\n\n  const inputRuleMatch = find(text)\n\n  if (!inputRuleMatch) {\n    return null\n  }\n\n  const result: ExtendedRegExpMatchArray = []\n\n  result.push(inputRuleMatch.text)\n  result.index = inputRuleMatch.index\n  result.input = text\n  result.data = inputRuleMatch.data\n\n  if (inputRuleMatch.replaceWith) {\n    if (!inputRuleMatch.text.includes(inputRuleMatch.replaceWith)) {\n      console.warn('[tiptap warn]: \"inputRuleMatch.replaceWith\" must be part of \"inputRuleMatch.text\".')\n    }\n\n    result.push(inputRuleMatch.replaceWith)\n  }\n\n  return result\n}\n\nfunction run(config: {\n  editor: Editor,\n  from: number,\n  to: number,\n  text: string,\n  rules: InputRule[],\n  plugin: Plugin,\n}): any {\n  const {\n    editor,\n    from,\n    to,\n    text,\n    rules,\n    plugin,\n  } = config\n  const { view } = editor\n\n  if (view.composing) {\n    return false\n  }\n\n  const $from = view.state.doc.resolve(from)\n\n  if (\n    // check for code node\n    $from.parent.type.spec.code\n    // check for code mark\n    || !!($from.nodeBefore || $from.nodeAfter)?.marks.find(mark => mark.type.spec.code)\n  ) {\n    return false\n  }\n\n  let matched = false\n  const maxMatch = 500\n  const textBefore = $from.parent.textBetween(\n    Math.max(0, $from.parentOffset - maxMatch),\n    $from.parentOffset,\n    undefined,\n    ' ',\n  ) + text\n\n  rules.forEach(rule => {\n    if (matched) {\n      return\n    }\n\n    const match = inputRuleMatcherHandler(textBefore, rule.find)\n\n    if (!match) {\n      return\n    }\n\n    const tr = view.state.tr\n    const state = createChainableState({\n      state: view.state,\n      transaction: tr,\n    })\n    const range = {\n      from: from - (match[0].length - text.length),\n      to,\n    }\n\n    const { commands, chain, can } = new CommandManager({\n      editor,\n      state,\n    })\n\n    rule.handler({\n      state,\n      range,\n      match,\n      commands,\n      chain,\n      can,\n    })\n\n    // stop if there are no changes\n    if (!tr.steps.length) {\n      return\n    }\n\n    // store transform as meta data\n    // so we can undo input rules within the `undoInputRules` command\n    tr.setMeta(plugin, {\n      transform: tr,\n      from,\n      to,\n      text,\n    })\n\n    view.dispatch(tr)\n    matched = true\n  })\n\n  return matched\n}\n\n/**\n * Create an input rules plugin. When enabled, it will cause text\n * input that matches any of the given rules to trigger the rule’s\n * action.\n */\nexport function inputRulesPlugin(props: { editor: Editor, rules: InputRule[] }): Plugin {\n  const { editor, rules } = props\n  const plugin = new Plugin({\n    state: {\n      init() {\n        return null\n      },\n      apply(tr, prev) {\n        const stored = tr.getMeta(this)\n\n        if (stored) {\n          return stored\n        }\n\n        return tr.selectionSet || tr.docChanged\n          ? null\n          : prev\n      },\n    },\n\n    props: {\n      handleTextInput(view, from, to, text) {\n        return run({\n          editor,\n          from,\n          to,\n          text,\n          rules,\n          plugin,\n        })\n      },\n\n      handleDOMEvents: {\n        compositionend: view => {\n          setTimeout(() => {\n            const { $cursor } = view.state.selection as TextSelection\n\n            if ($cursor) {\n              run({\n                editor,\n                from: $cursor.pos,\n                to: $cursor.pos,\n                text: '',\n                rules,\n                plugin,\n              })\n            }\n          })\n\n          return false\n        },\n      },\n\n      // add support for input rules to trigger on enter\n      // this is useful for example for code blocks\n      handleKeyDown(view, event) {\n        if (event.key !== 'Enter') {\n          return false\n        }\n\n        const { $cursor } = view.state.selection as TextSelection\n\n        if ($cursor) {\n          return run({\n            editor,\n            from: $cursor.pos,\n            to: $cursor.pos,\n            text: '\\n',\n            rules,\n            plugin,\n          })\n        }\n\n        return false\n      },\n    },\n\n    // @ts-ignore\n    isInputRules: true,\n  }) as Plugin\n\n  return plugin\n}\n","export function isNumber(value: any): value is number {\n  return typeof value === 'number'\n}\n","import { EditorState, Plugin } from 'prosemirror-state'\nimport { Editor } from './Editor'\nimport { CommandManager } from './CommandManager'\nimport { createChainableState } from './helpers/createChainableState'\nimport { isRegExp } from './utilities/isRegExp'\nimport { isNumber } from './utilities/isNumber'\nimport {\n  Range,\n  ExtendedRegExpMatchArray,\n  SingleCommands,\n  ChainedCommands,\n  CanCommands,\n} from './types'\n\nexport type PasteRuleMatch = {\n  index: number,\n  text: string,\n  replaceWith?: string,\n  match?: RegExpMatchArray,\n  data?: Record<string, any>,\n}\n\nexport type PasteRuleFinder =\n  | RegExp\n  | ((text: string) => PasteRuleMatch[] | null | undefined)\n\nexport class PasteRule {\n  find: PasteRuleFinder\n\n  handler: (props: {\n    state: EditorState,\n    range: Range,\n    match: ExtendedRegExpMatchArray,\n    commands: SingleCommands,\n    chain: () => ChainedCommands,\n    can: () => CanCommands,\n  }) => void\n\n  constructor(config: {\n    find: PasteRuleFinder,\n    handler: (props: {\n      state: EditorState,\n      range: Range,\n      match: ExtendedRegExpMatchArray,\n      commands: SingleCommands,\n      chain: () => ChainedCommands,\n      can: () => CanCommands,\n    }) => void,\n  }) {\n    this.find = config.find\n    this.handler = config.handler\n  }\n}\n\nconst pasteRuleMatcherHandler = (text: string, find: PasteRuleFinder): ExtendedRegExpMatchArray[] => {\n  if (isRegExp(find)) {\n    return [...text.matchAll(find)]\n  }\n\n  const matches = find(text)\n\n  if (!matches) {\n    return []\n  }\n\n  return matches.map(pasteRuleMatch => {\n    const result: ExtendedRegExpMatchArray = []\n\n    result.push(pasteRuleMatch.text)\n    result.index = pasteRuleMatch.index\n    result.input = text\n    result.data = pasteRuleMatch.data\n\n    if (pasteRuleMatch.replaceWith) {\n      if (!pasteRuleMatch.text.includes(pasteRuleMatch.replaceWith)) {\n        console.warn('[tiptap warn]: \"pasteRuleMatch.replaceWith\" must be part of \"pasteRuleMatch.text\".')\n      }\n\n      result.push(pasteRuleMatch.replaceWith)\n    }\n\n    return result\n  })\n}\n\nfunction run(config: {\n  editor: Editor,\n  state: EditorState,\n  from: number,\n  to: number,\n  rules: PasteRule[],\n  plugin: Plugin,\n}): any {\n  const {\n    editor,\n    state,\n    from,\n    to,\n    rules,\n  } = config\n\n  const { commands, chain, can } = new CommandManager({\n    editor,\n    state,\n  })\n\n  state.doc.nodesBetween(from, to, (node, pos) => {\n    if (!node.isTextblock || node.type.spec.code) {\n      return\n    }\n\n    const resolvedFrom = Math.max(from, pos)\n    const resolvedTo = Math.min(to, pos + node.content.size)\n    const textToMatch = node.textBetween(\n      resolvedFrom - pos,\n      resolvedTo - pos,\n      undefined,\n      '\\ufffc',\n    )\n\n    rules.forEach(rule => {\n      const matches = pasteRuleMatcherHandler(textToMatch, rule.find)\n\n      matches.forEach(match => {\n        if (match.index === undefined) {\n          return\n        }\n\n        const start = resolvedFrom + match.index + 1\n        const end = start + match[0].length\n        const range = {\n          from: state.tr.mapping.map(start),\n          to: state.tr.mapping.map(end),\n        }\n\n        rule.handler({\n          state,\n          range,\n          match,\n          commands,\n          chain,\n          can,\n        })\n      })\n    })\n  })\n}\n\n/**\n * Create an paste rules plugin. When enabled, it will cause pasted\n * text that matches any of the given rules to trigger the rule’s\n * action.\n */\nexport function pasteRulesPlugin(props: { editor: Editor, rules: PasteRule[] }): Plugin {\n  const { editor, rules } = props\n  let isProseMirrorHTML = false\n\n  const plugin = new Plugin({\n    props: {\n      handlePaste: (view, event) => {\n        const html = event.clipboardData?.getData('text/html')\n\n        isProseMirrorHTML = !!html?.includes('data-pm-slice')\n\n        return false\n      },\n    },\n    appendTransaction: (transactions, oldState, state) => {\n      const transaction = transactions[0]\n\n      // stop if there is not a paste event\n      if (!transaction.getMeta('paste') || isProseMirrorHTML) {\n        return\n      }\n\n      // stop if there is no changed range\n      const { doc, before } = transaction\n      const from = before.content.findDiffStart(doc.content)\n      const to = before.content.findDiffEnd(doc.content)\n\n      if (!isNumber(from) || !to || from === to.b) {\n        return\n      }\n\n      // build a chainable state\n      // so we can use a single transaction for all paste rules\n      const tr = state.tr\n      const chainableState = createChainableState({\n        state,\n        transaction: tr,\n      })\n\n      run({\n        editor,\n        state: chainableState,\n        from: Math.max(from - 1, 0),\n        to: to.b,\n        rules,\n        plugin,\n      })\n\n      // stop if there are no changes\n      if (!tr.steps.length) {\n        return\n      }\n\n      return tr\n    },\n\n    // @ts-ignore\n    isPasteRules: true,\n  })\n\n  return plugin\n}\n","import { splitExtensions } from './splitExtensions'\nimport { getExtensionField } from './getExtensionField'\nimport {\n  Extensions,\n  GlobalAttributes,\n  Attributes,\n  Attribute,\n  ExtensionAttribute,\n  AnyConfig,\n} from '../types'\nimport { NodeConfig, MarkConfig } from '..'\n\n/**\n * Get a list of all extension attributes defined in `addAttribute` and `addGlobalAttribute`.\n * @param extensions List of extensions\n */\nexport function getAttributesFromExtensions(extensions: Extensions): ExtensionAttribute[] {\n  const extensionAttributes: ExtensionAttribute[] = []\n  const { nodeExtensions, markExtensions } = splitExtensions(extensions)\n  const nodeAndMarkExtensions = [...nodeExtensions, ...markExtensions]\n  const defaultAttribute: Required<Attribute> = {\n    default: null,\n    rendered: true,\n    renderHTML: null,\n    parseHTML: null,\n    keepOnSplit: true,\n  }\n\n  extensions.forEach(extension => {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    const addGlobalAttributes = getExtensionField<AnyConfig['addGlobalAttributes']>(\n      extension,\n      'addGlobalAttributes',\n      context,\n    )\n\n    if (!addGlobalAttributes) {\n      return\n    }\n\n    // TODO: remove `as GlobalAttributes`\n    const globalAttributes = addGlobalAttributes() as GlobalAttributes\n\n    globalAttributes.forEach(globalAttribute => {\n      globalAttribute.types.forEach(type => {\n        Object\n          .entries(globalAttribute.attributes)\n          .forEach(([name, attribute]) => {\n            extensionAttributes.push({\n              type,\n              name,\n              attribute: {\n                ...defaultAttribute,\n                ...attribute,\n              },\n            })\n          })\n      })\n    })\n  })\n\n  nodeAndMarkExtensions.forEach(extension => {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    const addAttributes = getExtensionField<NodeConfig['addAttributes'] | MarkConfig['addAttributes']>(\n      extension,\n      'addAttributes',\n      context,\n    )\n\n    if (!addAttributes) {\n      return\n    }\n\n    // TODO: remove `as Attributes`\n    const attributes = addAttributes() as Attributes\n\n    Object\n      .entries(attributes)\n      .forEach(([name, attribute]) => {\n        extensionAttributes.push({\n          type: extension.name,\n          name,\n          attribute: {\n            ...defaultAttribute,\n            ...attribute,\n          },\n        })\n      })\n  })\n\n  return extensionAttributes\n}\n","export function mergeAttributes(...objects: Record<string, any>[]): Record<string, any> {\n  return objects\n    .filter(item => !!item)\n    .reduce((items, item) => {\n      const mergedAttributes = { ...items }\n\n      Object.entries(item).forEach(([key, value]) => {\n        const exists = mergedAttributes[key]\n\n        if (!exists) {\n          mergedAttributes[key] = value\n\n          return\n        }\n\n        if (key === 'class') {\n          mergedAttributes[key] = [mergedAttributes[key], value].join(' ')\n        } else if (key === 'style') {\n          mergedAttributes[key] = [mergedAttributes[key], value].join('; ')\n        } else {\n          mergedAttributes[key] = value\n        }\n      })\n\n      return mergedAttributes\n    }, {})\n}\n","import { Node, Mark } from 'prosemirror-model'\nimport { ExtensionAttribute } from '../types'\nimport { mergeAttributes } from '../utilities/mergeAttributes'\n\nexport function getRenderedAttributes(nodeOrMark: Node | Mark, extensionAttributes: ExtensionAttribute[]): Record<string, any> {\n  return extensionAttributes\n    .filter(item => item.attribute.rendered)\n    .map(item => {\n      if (!item.attribute.renderHTML) {\n        return {\n          [item.name]: nodeOrMark.attrs[item.name],\n        }\n      }\n\n      return item.attribute.renderHTML(nodeOrMark.attrs) || {}\n    })\n    .reduce((attributes, attribute) => mergeAttributes(attributes, attribute), {})\n}\n","export function isEmptyObject(value = {}): boolean {\n  return Object.keys(value).length === 0 && value.constructor === Object\n}\n","export function fromString(value: any): any {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  if (value.match(/^[+-]?(?:\\d*\\.)?\\d+$/)) {\n    return Number(value)\n  }\n\n  if (value === 'true') {\n    return true\n  }\n\n  if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n","import { ParseRule } from 'prosemirror-model'\nimport { ExtensionAttribute } from '../types'\nimport { fromString } from '../utilities/fromString'\nimport { isObject } from '../utilities/isObject'\n\n/**\n * This function merges extension attributes into parserule attributes (`attrs` or `getAttrs`).\n * Cancels when `getAttrs` returned `false`.\n * @param parseRule ProseMirror ParseRule\n * @param extensionAttributes List of attributes to inject\n */\nexport function injectExtensionAttributesToParseRule(parseRule: ParseRule, extensionAttributes: ExtensionAttribute[]): ParseRule {\n  if (parseRule.style) {\n    return parseRule\n  }\n\n  return {\n    ...parseRule,\n    getAttrs: node => {\n      const oldAttributes = parseRule.getAttrs\n        ? parseRule.getAttrs(node)\n        : parseRule.attrs\n\n      if (oldAttributes === false) {\n        return false\n      }\n\n      const newAttributes = extensionAttributes\n        .filter(item => item.attribute.rendered)\n        .reduce((items, item) => {\n          const value = item.attribute.parseHTML\n            ? item.attribute.parseHTML(node as HTMLElement)\n            : fromString((node as HTMLElement).getAttribute(item.name))\n\n          if (isObject(value)) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"parseHTML\" for your attribute \"${item.name}\" returns an object but should return the value itself. If this is expected you can ignore this message. This warning will be removed in one of the next releases. Further information: https://github.com/ueberdosis/tiptap/issues/1863`)\n          }\n\n          if (value === null || value === undefined) {\n            return items\n          }\n\n          return {\n            ...items,\n            [item.name]: value,\n          }\n        }, {})\n\n      return { ...oldAttributes, ...newAttributes }\n    },\n  }\n}\n","import { NodeSpec, MarkSpec, Schema } from 'prosemirror-model'\nimport { AnyConfig, Extensions } from '../types'\nimport { NodeConfig, MarkConfig } from '..'\nimport { splitExtensions } from './splitExtensions'\nimport { getAttributesFromExtensions } from './getAttributesFromExtensions'\nimport { getRenderedAttributes } from './getRenderedAttributes'\nimport { isEmptyObject } from '../utilities/isEmptyObject'\nimport { injectExtensionAttributesToParseRule } from './injectExtensionAttributesToParseRule'\nimport { callOrReturn } from '../utilities/callOrReturn'\nimport { getExtensionField } from './getExtensionField'\n\nfunction cleanUpSchemaItem<T>(data: T) {\n  return Object.fromEntries(Object.entries(data).filter(([key, value]) => {\n    if (key === 'attrs' && isEmptyObject(value)) {\n      return false\n    }\n\n    return value !== null && value !== undefined\n  })) as T\n}\n\nexport function getSchemaByResolvedExtensions(extensions: Extensions): Schema {\n  const allAttributes = getAttributesFromExtensions(extensions)\n  const { nodeExtensions, markExtensions } = splitExtensions(extensions)\n  const topNode = nodeExtensions.find(extension => getExtensionField(extension, 'topNode'))?.name\n\n  const nodes = Object.fromEntries(nodeExtensions.map(extension => {\n    const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name)\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    const extraNodeFields = extensions.reduce((fields, e) => {\n      const extendNodeSchema = getExtensionField<AnyConfig['extendNodeSchema']>(\n        e,\n        'extendNodeSchema',\n        context,\n      )\n\n      return {\n        ...fields,\n        ...(extendNodeSchema ? extendNodeSchema(extension) : {}),\n      }\n    }, {})\n\n    const schema: NodeSpec = cleanUpSchemaItem({\n      ...extraNodeFields,\n      content: callOrReturn(getExtensionField<NodeConfig['content']>(extension, 'content', context)),\n      marks: callOrReturn(getExtensionField<NodeConfig['marks']>(extension, 'marks', context)),\n      group: callOrReturn(getExtensionField<NodeConfig['group']>(extension, 'group', context)),\n      inline: callOrReturn(getExtensionField<NodeConfig['inline']>(extension, 'inline', context)),\n      atom: callOrReturn(getExtensionField<NodeConfig['atom']>(extension, 'atom', context)),\n      selectable: callOrReturn(getExtensionField<NodeConfig['selectable']>(extension, 'selectable', context)),\n      draggable: callOrReturn(getExtensionField<NodeConfig['draggable']>(extension, 'draggable', context)),\n      code: callOrReturn(getExtensionField<NodeConfig['code']>(extension, 'code', context)),\n      defining: callOrReturn(getExtensionField<NodeConfig['defining']>(extension, 'defining', context)),\n      isolating: callOrReturn(getExtensionField<NodeConfig['isolating']>(extension, 'isolating', context)),\n      attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {\n        return [extensionAttribute.name, { default: extensionAttribute?.attribute?.default }]\n      })),\n    })\n\n    const parseHTML = callOrReturn(getExtensionField<NodeConfig['parseHTML']>(extension, 'parseHTML', context))\n\n    if (parseHTML) {\n      schema.parseDOM = parseHTML\n        .map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes))\n    }\n\n    const renderHTML = getExtensionField<NodeConfig['renderHTML']>(extension, 'renderHTML', context)\n\n    if (renderHTML) {\n      schema.toDOM = node => renderHTML({\n        node,\n        HTMLAttributes: getRenderedAttributes(node, extensionAttributes),\n      })\n    }\n\n    const renderText = getExtensionField<NodeConfig['renderText']>(extension, 'renderText', context)\n\n    if (renderText) {\n      schema.toText = renderText\n    }\n\n    return [extension.name, schema]\n  }))\n\n  const marks = Object.fromEntries(markExtensions.map(extension => {\n    const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name)\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    const extraMarkFields = extensions.reduce((fields, e) => {\n      const extendMarkSchema = getExtensionField<AnyConfig['extendMarkSchema']>(\n        e,\n        'extendMarkSchema',\n        context,\n      )\n\n      return {\n        ...fields,\n        ...(extendMarkSchema ? extendMarkSchema(extension) : {}),\n      }\n    }, {})\n\n    const schema: MarkSpec = cleanUpSchemaItem({\n      ...extraMarkFields,\n      inclusive: callOrReturn(getExtensionField<MarkConfig['inclusive']>(extension, 'inclusive', context)),\n      excludes: callOrReturn(getExtensionField<MarkConfig['excludes']>(extension, 'excludes', context)),\n      group: callOrReturn(getExtensionField<MarkConfig['group']>(extension, 'group', context)),\n      spanning: callOrReturn(getExtensionField<MarkConfig['spanning']>(extension, 'spanning', context)),\n      code: callOrReturn(getExtensionField<MarkConfig['code']>(extension, 'code', context)),\n      attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {\n        return [extensionAttribute.name, { default: extensionAttribute?.attribute?.default }]\n      })),\n    })\n\n    const parseHTML = callOrReturn(getExtensionField<MarkConfig['parseHTML']>(extension, 'parseHTML', context))\n\n    if (parseHTML) {\n      schema.parseDOM = parseHTML\n        .map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes))\n    }\n\n    const renderHTML = getExtensionField<MarkConfig['renderHTML']>(extension, 'renderHTML', context)\n\n    if (renderHTML) {\n      schema.toDOM = mark => renderHTML({\n        mark,\n        HTMLAttributes: getRenderedAttributes(mark, extensionAttributes),\n      })\n    }\n\n    return [extension.name, schema]\n  }))\n\n  return new Schema({\n    topNode,\n    nodes,\n    marks,\n  })\n}\n","import { MarkType, NodeType, Schema } from 'prosemirror-model'\n\nexport function getSchemaTypeByName(name: string, schema: Schema): NodeType | MarkType | null {\n  return schema.nodes[name] || schema.marks[name] || null\n}\n","import { AnyExtension, EnableRules } from '../types'\n\nexport function isExtensionRulesEnabled(extension: AnyExtension, enabled: EnableRules): boolean {\n  if (Array.isArray(enabled)) {\n    return enabled.some(enabledExtension => {\n      const name = typeof enabledExtension === 'string'\n        ? enabledExtension\n        : enabledExtension.name\n\n      return name === extension.name\n    })\n  }\n\n  return enabled\n}\n","export function findDuplicates(items: any[]): any[] {\n  const filtered = items.filter((el, index) => items.indexOf(el) !== index)\n\n  return [...new Set(filtered)]\n}\n","import { keymap } from 'prosemirror-keymap'\nimport { Schema, Node as ProsemirrorNode } from 'prosemirror-model'\nimport { inputRulesPlugin } from './InputRule'\nimport { pasteRulesPlugin } from './PasteRule'\nimport { EditorView, Decoration } from 'prosemirror-view'\nimport { Plugin } from 'prosemirror-state'\nimport { Editor } from './Editor'\nimport { Extensions, RawCommands, AnyConfig } from './types'\nimport { getExtensionField } from './helpers/getExtensionField'\nimport { getSchemaByResolvedExtensions } from './helpers/getSchemaByResolvedExtensions'\nimport { getSchemaTypeByName } from './helpers/getSchemaTypeByName'\nimport { getNodeType } from './helpers/getNodeType'\nimport { splitExtensions } from './helpers/splitExtensions'\nimport { getAttributesFromExtensions } from './helpers/getAttributesFromExtensions'\nimport { getRenderedAttributes } from './helpers/getRenderedAttributes'\nimport { isExtensionRulesEnabled } from './helpers/isExtensionRulesEnabled'\nimport { callOrReturn } from './utilities/callOrReturn'\nimport { findDuplicates } from './utilities/findDuplicates'\nimport { NodeConfig } from '.'\n\nexport class ExtensionManager {\n\n  editor: Editor\n\n  schema: Schema\n\n  extensions: Extensions\n\n  splittableMarks: string[] = []\n\n  constructor(extensions: Extensions, editor: Editor) {\n    this.editor = editor\n    this.extensions = ExtensionManager.resolve(extensions)\n    this.schema = getSchemaByResolvedExtensions(this.extensions)\n\n    this.extensions.forEach(extension => {\n      // store extension storage in editor\n      this.editor.extensionStorage[extension.name] = extension.storage\n\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor: this.editor,\n        type: getSchemaTypeByName(extension.name, this.schema),\n      }\n\n      if (extension.type === 'mark') {\n        const keepOnSplit = callOrReturn(getExtensionField(extension, 'keepOnSplit', context)) ?? true\n\n        if (keepOnSplit) {\n          this.splittableMarks.push(extension.name)\n        }\n      }\n\n      const onBeforeCreate = getExtensionField<AnyConfig['onBeforeCreate']>(\n        extension,\n        'onBeforeCreate',\n        context,\n      )\n\n      if (onBeforeCreate) {\n        this.editor.on('beforeCreate', onBeforeCreate)\n      }\n\n      const onCreate = getExtensionField<AnyConfig['onCreate']>(\n        extension,\n        'onCreate',\n        context,\n      )\n\n      if (onCreate) {\n        this.editor.on('create', onCreate)\n      }\n\n      const onUpdate = getExtensionField<AnyConfig['onUpdate']>(\n        extension,\n        'onUpdate',\n        context,\n      )\n\n      if (onUpdate) {\n        this.editor.on('update', onUpdate)\n      }\n\n      const onSelectionUpdate = getExtensionField<AnyConfig['onSelectionUpdate']>(\n        extension,\n        'onSelectionUpdate',\n        context,\n      )\n\n      if (onSelectionUpdate) {\n        this.editor.on('selectionUpdate', onSelectionUpdate)\n      }\n\n      const onTransaction = getExtensionField<AnyConfig['onTransaction']>(\n        extension,\n        'onTransaction',\n        context,\n      )\n\n      if (onTransaction) {\n        this.editor.on('transaction', onTransaction)\n      }\n\n      const onFocus = getExtensionField<AnyConfig['onFocus']>(\n        extension,\n        'onFocus',\n        context,\n      )\n\n      if (onFocus) {\n        this.editor.on('focus', onFocus)\n      }\n\n      const onBlur = getExtensionField<AnyConfig['onBlur']>(\n        extension,\n        'onBlur',\n        context,\n      )\n\n      if (onBlur) {\n        this.editor.on('blur', onBlur)\n      }\n\n      const onDestroy = getExtensionField<AnyConfig['onDestroy']>(\n        extension,\n        'onDestroy',\n        context,\n      )\n\n      if (onDestroy) {\n        this.editor.on('destroy', onDestroy)\n      }\n    })\n  }\n\n  static resolve(extensions: Extensions): Extensions {\n    const resolvedExtensions = ExtensionManager.sort(ExtensionManager.flatten(extensions))\n    const duplicatedNames = findDuplicates(resolvedExtensions.map(extension => extension.name))\n\n    if (duplicatedNames.length) {\n      console.warn(`[tiptap warn]: Duplicate extension names found: [${duplicatedNames.map(item => `'${item}'`).join(', ')}]. This can lead to issues.`)\n    }\n\n    return resolvedExtensions\n  }\n\n  static flatten(extensions: Extensions): Extensions {\n    return extensions\n      .map(extension => {\n        const context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage,\n        }\n\n        const addExtensions = getExtensionField<AnyConfig['addExtensions']>(\n          extension,\n          'addExtensions',\n          context,\n        )\n\n        if (addExtensions) {\n          return [\n            extension,\n            ...this.flatten(addExtensions()),\n          ]\n        }\n\n        return extension\n      })\n      // `Infinity` will break TypeScript so we set a number that is probably high enough\n      .flat(10)\n  }\n\n  static sort(extensions: Extensions): Extensions {\n    const defaultPriority = 100\n\n    return extensions.sort((a, b) => {\n      const priorityA = getExtensionField<AnyConfig['priority']>(a, 'priority') || defaultPriority\n      const priorityB = getExtensionField<AnyConfig['priority']>(b, 'priority') || defaultPriority\n\n      if (priorityA > priorityB) {\n        return -1\n      }\n\n      if (priorityA < priorityB) {\n        return 1\n      }\n\n      return 0\n    })\n  }\n\n  get commands(): RawCommands {\n    return this.extensions.reduce((commands, extension) => {\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor: this.editor,\n        type: getSchemaTypeByName(extension.name, this.schema),\n      }\n\n      const addCommands = getExtensionField<AnyConfig['addCommands']>(\n        extension,\n        'addCommands',\n        context,\n      )\n\n      if (!addCommands) {\n        return commands\n      }\n\n      return {\n        ...commands,\n        ...addCommands(),\n      }\n    }, {} as RawCommands)\n  }\n\n  get plugins(): Plugin[] {\n    const { editor } = this\n\n    // With ProseMirror, first plugins within an array are executed first.\n    // In tiptap, we provide the ability to override plugins,\n    // so it feels more natural to run plugins at the end of an array first.\n    // That’s why we have to reverse the `extensions` array and sort again\n    // based on the `priority` option.\n    const extensions = ExtensionManager.sort([...this.extensions].reverse())\n\n    const inputRules: any[] = []\n    const pasteRules: any[] = []\n\n    const allPlugins = extensions\n      .map(extension => {\n        const context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage,\n          editor,\n          type: getSchemaTypeByName(extension.name, this.schema),\n        }\n\n        const plugins: Plugin[] = []\n\n        const addKeyboardShortcuts = getExtensionField<AnyConfig['addKeyboardShortcuts']>(\n          extension,\n          'addKeyboardShortcuts',\n          context,\n        )\n\n        if (addKeyboardShortcuts) {\n          const bindings = Object.fromEntries(\n            Object\n              .entries(addKeyboardShortcuts())\n              .map(([shortcut, method]) => {\n                return [shortcut, () => method({ editor })]\n              }),\n          )\n\n          const keyMapPlugin = keymap(bindings)\n\n          plugins.push(keyMapPlugin)\n        }\n\n        const addInputRules = getExtensionField<AnyConfig['addInputRules']>(\n          extension,\n          'addInputRules',\n          context,\n        )\n\n        if (isExtensionRulesEnabled(extension, editor.options.enableInputRules) && addInputRules) {\n          inputRules.push(...addInputRules())\n        }\n\n        const addPasteRules = getExtensionField<AnyConfig['addPasteRules']>(\n          extension,\n          'addPasteRules',\n          context,\n        )\n\n        if (isExtensionRulesEnabled(extension, editor.options.enablePasteRules) && addPasteRules) {\n          pasteRules.push(...addPasteRules())\n        }\n\n        const addProseMirrorPlugins = getExtensionField<AnyConfig['addProseMirrorPlugins']>(\n          extension,\n          'addProseMirrorPlugins',\n          context,\n        )\n\n        if (addProseMirrorPlugins) {\n          const proseMirrorPlugins = addProseMirrorPlugins()\n\n          plugins.push(...proseMirrorPlugins)\n        }\n\n        return plugins\n      })\n      .flat()\n\n    return [\n      inputRulesPlugin({\n        editor,\n        rules: inputRules,\n      }),\n      pasteRulesPlugin({\n        editor,\n        rules: pasteRules,\n      }),\n      ...allPlugins,\n    ]\n  }\n\n  get attributes() {\n    return getAttributesFromExtensions(this.extensions)\n  }\n\n  get nodeViews() {\n    const { editor } = this\n    const { nodeExtensions } = splitExtensions(this.extensions)\n\n    return Object.fromEntries(nodeExtensions\n      .filter(extension => !!getExtensionField(extension, 'addNodeView'))\n      .map(extension => {\n        const extensionAttributes = this.attributes.filter(attribute => attribute.type === extension.name)\n        const context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage,\n          editor,\n          type: getNodeType(extension.name, this.schema),\n        }\n        const addNodeView = getExtensionField<NodeConfig['addNodeView']>(\n          extension,\n          'addNodeView',\n          context,\n        )\n\n        if (!addNodeView) {\n          return []\n        }\n\n        const nodeview = (\n          node: ProsemirrorNode,\n          view: EditorView,\n          getPos: (() => number) | boolean,\n          decorations: Decoration[],\n        ) => {\n          const HTMLAttributes = getRenderedAttributes(node, extensionAttributes)\n\n          return addNodeView()({\n            editor,\n            node,\n            getPos,\n            decorations,\n            HTMLAttributes,\n            extension,\n          })\n        }\n\n        return [extension.name, nodeview]\n      }))\n  }\n}\n","type StringKeyOf<T> = Extract<keyof T, string>\ntype CallbackType<\n  T extends Record<string, any>,\n  EventName extends StringKeyOf<T>,\n> = T[EventName] extends any[] ? T[EventName] : [T[EventName]]\ntype CallbackFunction<\n  T extends Record<string, any>,\n  EventName extends StringKeyOf<T>,\n> = (...props: CallbackType<T, EventName>) => any\n\nexport class EventEmitter<T extends Record<string, any>> {\n\n  private callbacks: { [key: string]: Function[] } = {}\n\n  public on<EventName extends StringKeyOf<T>>(event: EventName, fn: CallbackFunction<T, EventName>): this {\n    if (!this.callbacks[event]) {\n      this.callbacks[event] = []\n    }\n\n    this.callbacks[event].push(fn)\n\n    return this\n  }\n\n  protected emit<EventName extends StringKeyOf<T>>(event: EventName, ...args: CallbackType<T, EventName>): this {\n    const callbacks = this.callbacks[event]\n\n    if (callbacks) {\n      callbacks.forEach(callback => callback.apply(this, args))\n    }\n\n    return this\n  }\n\n  public off<EventName extends StringKeyOf<T>>(event: EventName, fn?: CallbackFunction<T, EventName>): this {\n    const callbacks = this.callbacks[event]\n\n    if (callbacks) {\n      if (fn) {\n        this.callbacks[event] = callbacks.filter(callback => callback !== fn)\n      } else {\n        delete this.callbacks[event]\n      }\n    }\n\n    return this\n  }\n\n  protected removeAllListeners(): void {\n    this.callbacks = {}\n  }\n}\n","export const style = `.ProseMirror {\n  position: relative;\n}\n\n.ProseMirror {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  white-space: break-spaces;\n  -webkit-font-variant-ligatures: none;\n  font-variant-ligatures: none;\n  font-feature-settings: \"liga\" 0; /* the above doesn't seem to work in Edge */\n}\n\n.ProseMirror [contenteditable=\"false\"] {\n  white-space: normal;\n}\n\n.ProseMirror [contenteditable=\"false\"] [contenteditable=\"true\"] {\n  white-space: pre-wrap;\n}\n\n.ProseMirror pre {\n  white-space: pre-wrap;\n}\n\nimg.ProseMirror-separator {\n  display: inline !important;\n  border: none !important;\n  margin: 0 !important;\n  width: 1px !important;\n  height: 1px !important;\n}\n\n.ProseMirror-gapcursor {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n  margin: 0;\n}\n\n.ProseMirror-gapcursor:after {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: -2px;\n  width: 20px;\n  border-top: 1px solid black;\n  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;\n}\n\n@keyframes ProseMirror-cursor-blink {\n  to {\n    visibility: hidden;\n  }\n}\n\n.ProseMirror-hideselection *::selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection *::-moz-selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection * {\n  caret-color: transparent;\n}\n\n.ProseMirror-focused .ProseMirror-gapcursor {\n  display: block;\n}\n\n.tippy-box[data-animation=fade][data-state=hidden] {\n  opacity: 0\n}`\n","import {\n  EditorState,\n  Plugin,\n  PluginKey,\n  Transaction,\n} from 'prosemirror-state'\nimport { EditorView } from 'prosemirror-view'\nimport { Schema, MarkType, NodeType } from 'prosemirror-model'\nimport { getAttributes } from './helpers/getAttributes'\nimport { isActive } from './helpers/isActive'\nimport { createDocument } from './helpers/createDocument'\nimport { getHTMLFromFragment } from './helpers/getHTMLFromFragment'\nimport { getText } from './helpers/getText'\nimport { isNodeEmpty } from './helpers/isNodeEmpty'\nimport { resolveFocusPosition } from './helpers/resolveFocusPosition'\nimport { getTextSeralizersFromSchema } from './helpers/getTextSeralizersFromSchema'\nimport { createStyleTag } from './utilities/createStyleTag'\nimport { isFunction } from './utilities/isFunction'\nimport { CommandManager } from './CommandManager'\nimport { ExtensionManager } from './ExtensionManager'\nimport { EventEmitter } from './EventEmitter'\nimport {\n  EditorOptions,\n  CanCommands,\n  ChainedCommands,\n  JSONContent,\n  SingleCommands,\n  TextSerializer,\n  EditorEvents,\n} from './types'\nimport * as extensions from './extensions'\nimport { style } from './style'\n\nexport { extensions }\n\nexport interface HTMLElement {\n  editor?: Editor\n}\n\nexport class Editor extends EventEmitter<EditorEvents> {\n\n  private commandManager!: CommandManager\n\n  public extensionManager!: ExtensionManager\n\n  private css!: HTMLStyleElement\n\n  public schema!: Schema\n\n  public view!: EditorView\n\n  public isFocused = false\n\n  public extensionStorage: Record<string, any> = {}\n\n  public options: EditorOptions = {\n    element: document.createElement('div'),\n    content: '',\n    injectCSS: true,\n    extensions: [],\n    autofocus: false,\n    editable: true,\n    editorProps: {},\n    parseOptions: {},\n    enableInputRules: true,\n    enablePasteRules: true,\n    enableCoreExtensions: true,\n    onBeforeCreate: () => null,\n    onCreate: () => null,\n    onUpdate: () => null,\n    onSelectionUpdate: () => null,\n    onTransaction: () => null,\n    onFocus: () => null,\n    onBlur: () => null,\n    onDestroy: () => null,\n  }\n\n  constructor(options: Partial<EditorOptions> = {}) {\n    super()\n    this.setOptions(options)\n    this.createExtensionManager()\n    this.createCommandManager()\n    this.createSchema()\n    this.on('beforeCreate', this.options.onBeforeCreate)\n    this.emit('beforeCreate', { editor: this })\n    this.createView()\n    this.injectCSS()\n    this.on('create', this.options.onCreate)\n    this.on('update', this.options.onUpdate)\n    this.on('selectionUpdate', this.options.onSelectionUpdate)\n    this.on('transaction', this.options.onTransaction)\n    this.on('focus', this.options.onFocus)\n    this.on('blur', this.options.onBlur)\n    this.on('destroy', this.options.onDestroy)\n\n    window.setTimeout(() => {\n      if (this.isDestroyed) {\n        return\n      }\n\n      this.commands.focus(this.options.autofocus)\n      this.emit('create', { editor: this })\n    }, 0)\n  }\n\n  /**\n   * Returns the editor storage.\n   */\n  public get storage(): Record<string, any> {\n    return this.extensionStorage\n  }\n\n  /**\n   * An object of all registered commands.\n   */\n  public get commands(): SingleCommands {\n    return this.commandManager.commands\n  }\n\n  /**\n   * Create a command chain to call multiple commands at once.\n   */\n  public chain(): ChainedCommands {\n    return this.commandManager.chain()\n  }\n\n  /**\n   * Check if a command or a command chain can be executed. Without executing it.\n   */\n  public can(): CanCommands {\n    return this.commandManager.can()\n  }\n\n  /**\n   * Inject CSS styles.\n   */\n  private injectCSS(): void {\n    if (this.options.injectCSS && document) {\n      this.css = createStyleTag(style)\n    }\n  }\n\n  /**\n   * Update editor options.\n   *\n   * @param options A list of options\n   */\n  public setOptions(options: Partial<EditorOptions> = {}): void {\n    this.options = {\n      ...this.options,\n      ...options,\n    }\n\n    if (!this.view || !this.state || this.isDestroyed) {\n      return\n    }\n\n    if (this.options.editorProps) {\n      this.view.setProps(this.options.editorProps)\n    }\n\n    this.view.updateState(this.state)\n  }\n\n  /**\n   * Update editable state of the editor.\n   */\n  public setEditable(editable: boolean): void {\n    this.setOptions({ editable })\n  }\n\n  /**\n   * Returns whether the editor is editable.\n   */\n  public get isEditable(): boolean {\n    // since plugins are applied after creating the view\n    // `editable` is always `true` for one tick.\n    // that’s why we also have to check for `options.editable`\n    return this.options.editable\n      && this.view\n      && this.view.editable\n  }\n\n  /**\n   * Returns the editor state.\n   */\n  public get state(): EditorState {\n    return this.view.state\n  }\n\n  /**\n   * Register a ProseMirror plugin.\n   *\n   * @param plugin A ProseMirror plugin\n   * @param handlePlugins Control how to merge the plugin into the existing plugins.\n   */\n  public registerPlugin(plugin: Plugin, handlePlugins?: (newPlugin: Plugin, plugins: Plugin[]) => Plugin[]): void {\n    const plugins = isFunction(handlePlugins)\n      ? handlePlugins(plugin, this.state.plugins)\n      : [...this.state.plugins, plugin]\n\n    const state = this.state.reconfigure({ plugins })\n\n    this.view.updateState(state)\n  }\n\n  /**\n   * Unregister a ProseMirror plugin.\n   *\n   * @param nameOrPluginKey The plugins name\n   */\n  public unregisterPlugin(nameOrPluginKey: string | PluginKey): void {\n    if (this.isDestroyed) {\n      return\n    }\n\n    const name = typeof nameOrPluginKey === 'string'\n      ? `${nameOrPluginKey}$`\n      // @ts-ignore\n      : nameOrPluginKey.key\n\n    const state = this.state.reconfigure({\n      // @ts-ignore\n      plugins: this.state.plugins.filter(plugin => !plugin.key.startsWith(name)),\n    })\n\n    this.view.updateState(state)\n  }\n\n  /**\n   * Creates an extension manager.\n   */\n  private createExtensionManager(): void {\n    const coreExtensions = this.options.enableCoreExtensions\n      ? Object.values(extensions)\n      : []\n    const allExtensions = [...coreExtensions, ...this.options.extensions].filter(extension => {\n      return ['extension', 'node', 'mark'].includes(extension?.type)\n    })\n\n    this.extensionManager = new ExtensionManager(allExtensions, this)\n  }\n\n  /**\n   * Creates an command manager.\n   */\n  private createCommandManager(): void {\n    this.commandManager = new CommandManager({\n      editor: this,\n    })\n  }\n\n  /**\n   * Creates a ProseMirror schema.\n   */\n  private createSchema(): void {\n    this.schema = this.extensionManager.schema\n  }\n\n  /**\n   * Creates a ProseMirror view.\n   */\n  private createView(): void {\n    const doc = createDocument(this.options.content, this.schema, this.options.parseOptions)\n    const selection = resolveFocusPosition(doc, this.options.autofocus)\n\n    this.view = new EditorView(this.options.element, {\n      ...this.options.editorProps,\n      dispatchTransaction: this.dispatchTransaction.bind(this),\n      state: EditorState.create({\n        doc,\n        selection,\n      }),\n    })\n\n    // `editor.view` is not yet available at this time.\n    // Therefore we will add all plugins and node views directly afterwards.\n    const newState = this.state.reconfigure({\n      plugins: this.extensionManager.plugins,\n    })\n\n    this.view.updateState(newState)\n\n    this.createNodeViews()\n\n    // Let’s store the editor instance in the DOM element.\n    // So we’ll have access to it for tests.\n    const dom = this.view.dom as HTMLElement\n\n    dom.editor = this\n  }\n\n  /**\n   * Creates all node views.\n   */\n  public createNodeViews(): void {\n    this.view.setProps({\n      nodeViews: this.extensionManager.nodeViews,\n    })\n  }\n\n  public isCapturingTransaction = false\n\n  private capturedTransaction: Transaction | null = null\n\n  public captureTransaction(fn: Function) {\n    this.isCapturingTransaction = true\n    fn()\n    this.isCapturingTransaction = false\n\n    const tr = this.capturedTransaction\n\n    this.capturedTransaction = null\n\n    return tr\n  }\n\n  /**\n   * The callback over which to send transactions (state updates) produced by the view.\n   *\n   * @param transaction An editor state transaction\n   */\n  private dispatchTransaction(transaction: Transaction): void {\n    if (this.isCapturingTransaction) {\n      if (!this.capturedTransaction) {\n        this.capturedTransaction = transaction\n\n        return\n      }\n\n      transaction.steps.forEach(step => this.capturedTransaction?.step(step))\n\n      return\n    }\n\n    const state = this.state.apply(transaction)\n    const selectionHasChanged = !this.state.selection.eq(state.selection)\n\n    this.view.updateState(state)\n    this.emit('transaction', {\n      editor: this,\n      transaction,\n    })\n\n    if (selectionHasChanged) {\n      this.emit('selectionUpdate', {\n        editor: this,\n        transaction,\n      })\n    }\n\n    const focus = transaction.getMeta('focus')\n    const blur = transaction.getMeta('blur')\n\n    if (focus) {\n      this.emit('focus', {\n        editor: this,\n        event: focus.event,\n        transaction,\n      })\n    }\n\n    if (blur) {\n      this.emit('blur', {\n        editor: this,\n        event: blur.event,\n        transaction,\n      })\n    }\n\n    if (!transaction.docChanged || transaction.getMeta('preventUpdate')) {\n      return\n    }\n\n    this.emit('update', {\n      editor: this,\n      transaction,\n    })\n  }\n\n  /**\n   * Get attributes of the currently selected node or mark.\n   */\n  public getAttributes(nameOrType: string | NodeType | MarkType): Record<string, any> {\n    return getAttributes(this.state, nameOrType)\n  }\n\n  /**\n   * Returns if the currently selected node or mark is active.\n   *\n   * @param name Name of the node or mark\n   * @param attributes Attributes of the node or mark\n   */\n  public isActive(name: string, attributes?: {}): boolean;\n  public isActive(attributes: {}): boolean;\n  public isActive(nameOrAttributes: string, attributesOrUndefined?: {}): boolean {\n    const name = typeof nameOrAttributes === 'string'\n      ? nameOrAttributes\n      : null\n\n    const attributes = typeof nameOrAttributes === 'string'\n      ? attributesOrUndefined\n      : nameOrAttributes\n\n    return isActive(this.state, name, attributes)\n  }\n\n  /**\n   * Get the document as JSON.\n   */\n  public getJSON(): JSONContent {\n    return this.state.doc.toJSON()\n  }\n\n  /**\n   * Get the document as HTML.\n   */\n  public getHTML(): string {\n    return getHTMLFromFragment(this.state.doc.content, this.schema)\n  }\n\n  /**\n   * Get the document as text.\n   */\n  public getText(options?: {\n    blockSeparator?: string,\n    textSerializers?: Record<string, TextSerializer>,\n  }): string {\n    const {\n      blockSeparator = '\\n\\n',\n      textSerializers = {},\n    } = options || {}\n\n    return getText(this.state.doc, {\n      blockSeparator,\n      textSerializers: {\n        ...textSerializers,\n        ...getTextSeralizersFromSchema(this.schema),\n      },\n    })\n  }\n\n  /**\n   * Check if there is no content.\n   */\n  public get isEmpty(): boolean {\n    return isNodeEmpty(this.state.doc)\n  }\n\n  /**\n   * Get the number of characters for the current document.\n   *\n   * @deprecated\n   */\n  public getCharacterCount(): number {\n    console.warn('[tiptap warn]: \"editor.getCharacterCount()\" is deprecated. Please use \"editor.storage.characterCount.characters()\" instead.')\n\n    return this.state.doc.content.size - 2\n  }\n\n  /**\n   * Destroy the editor.\n   */\n  public destroy(): void {\n    this.emit('destroy')\n\n    if (this.view) {\n      this.view.destroy()\n    }\n\n    this.removeAllListeners()\n  }\n\n  /**\n   * Check if the editor is already destroyed.\n   */\n  public get isDestroyed(): boolean {\n    // @ts-ignore\n    return !this.view?.docView\n  }\n\n}\n","import {\n  DOMOutputSpec,\n  NodeSpec,\n  Node as ProseMirrorNode,\n  NodeType,\n} from 'prosemirror-model'\nimport { Plugin, Transaction } from 'prosemirror-state'\nimport { InputRule } from './InputRule'\nimport { PasteRule } from './PasteRule'\nimport { mergeDeep } from './utilities/mergeDeep'\nimport { callOrReturn } from './utilities/callOrReturn'\nimport { getExtensionField } from './helpers/getExtensionField'\nimport {\n  AnyConfig,\n  Extensions,\n  Attributes,\n  NodeViewRenderer,\n  GlobalAttributes,\n  RawCommands,\n  ParentConfig,\n  KeyboardShortcutCommand,\n} from './types'\nimport { NodeConfig } from '.'\nimport { Editor } from './Editor'\n\ndeclare module '@tiptap/core' {\n  interface NodeConfig<Options = any, Storage = any> {\n    [key: string]: any;\n\n    /**\n     * Name\n     */\n    name: string,\n\n    /**\n     * Priority\n     */\n    priority?: number,\n\n    /**\n     * Default options\n     */\n    defaultOptions?: Options,\n\n    /**\n     * Default Options\n     */\n    addOptions?: (this: {\n      name: string,\n      parent: Exclude<ParentConfig<NodeConfig<Options, Storage>>['addOptions'], undefined>,\n    }) => Options,\n\n    /**\n     * Default Storage\n     */\n    addStorage?: (this: {\n      name: string,\n      options: Options,\n      parent: Exclude<ParentConfig<NodeConfig<Options, Storage>>['addStorage'], undefined>,\n    }) => Storage,\n\n    /**\n     * Global attributes\n     */\n    addGlobalAttributes?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addGlobalAttributes'],\n    }) => GlobalAttributes | {},\n\n    /**\n     * Raw\n     */\n    addCommands?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addCommands'],\n    }) => Partial<RawCommands>,\n\n    /**\n     * Keyboard shortcuts\n     */\n    addKeyboardShortcuts?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addKeyboardShortcuts'],\n    }) => {\n      [key: string]: KeyboardShortcutCommand,\n    },\n\n    /**\n     * Input rules\n     */\n    addInputRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addInputRules'],\n    }) => InputRule[],\n\n    /**\n     * Paste rules\n     */\n    addPasteRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addPasteRules'],\n    }) => PasteRule[],\n\n    /**\n     * ProseMirror plugins\n     */\n    addProseMirrorPlugins?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addProseMirrorPlugins'],\n    }) => Plugin[],\n\n    /**\n     * Extensions\n     */\n    addExtensions?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addExtensions'],\n    }) => Extensions,\n\n    /**\n     * Extend Node Schema\n     */\n    extendNodeSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['extendNodeSchema'],\n      },\n      extension: Node,\n    ) => Record<string, any>) | null,\n\n    /**\n     * Extend Mark Schema\n     */\n    extendMarkSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['extendMarkSchema'],\n      },\n      extension: Node,\n    ) => Record<string, any>) | null,\n\n    /**\n     * The editor is not ready yet.\n     */\n    onBeforeCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onBeforeCreate'],\n    }) => void) | null,\n\n    /**\n     * The editor is ready.\n     */\n    onCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onCreate'],\n    }) => void) | null,\n\n    /**\n     * The content has changed.\n     */\n    onUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onUpdate'],\n    }) => void) | null,\n\n    /**\n     * The selection has changed.\n     */\n    onSelectionUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onSelectionUpdate'],\n    }) => void) | null,\n\n    /**\n     * The editor state has changed.\n     */\n    onTransaction?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: NodeType,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['onTransaction'],\n      },\n      props: {\n        transaction: Transaction,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is focused.\n     */\n    onFocus?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: NodeType,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['onFocus'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor isn’t focused anymore.\n     */\n    onBlur?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: NodeType,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['onBlur'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is destroyed.\n     */\n    onDestroy?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onDestroy'],\n    }) => void) | null,\n\n    /**\n     * Node View\n     */\n    addNodeView?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addNodeView'],\n    }) => NodeViewRenderer) | null,\n\n    /**\n     * TopNode\n     */\n    topNode?: boolean,\n\n    /**\n     * Content\n     */\n    content?: NodeSpec['content'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['content'],\n    }) => NodeSpec['content']),\n\n    /**\n     * Marks\n     */\n    marks?: NodeSpec['marks'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['marks'],\n    }) => NodeSpec['marks']),\n\n    /**\n     * Group\n     */\n    group?: NodeSpec['group'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['group'],\n    }) => NodeSpec['group']),\n\n    /**\n     * Inline\n     */\n    inline?: NodeSpec['inline'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['inline'],\n    }) => NodeSpec['inline']),\n\n    /**\n     * Atom\n     */\n    atom?: NodeSpec['atom'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['atom'],\n    }) => NodeSpec['atom']),\n\n    /**\n     * Selectable\n     */\n    selectable?: NodeSpec['selectable'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['selectable'],\n    }) => NodeSpec['selectable']),\n\n    /**\n     * Draggable\n     */\n    draggable?: NodeSpec['draggable'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['draggable'],\n    }) => NodeSpec['draggable']),\n\n    /**\n     * Code\n     */\n    code?: NodeSpec['code'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['code'],\n    }) => NodeSpec['code']),\n\n    /**\n     * Defining\n     */\n    defining?: NodeSpec['defining'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['defining'],\n    }) => NodeSpec['defining']),\n\n    /**\n     * Isolating\n     */\n    isolating?: NodeSpec['isolating'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['isolating'],\n    }) => NodeSpec['isolating']),\n\n    /**\n     * Parse HTML\n     */\n    parseHTML?: (\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['parseHTML'],\n      },\n    ) => NodeSpec['parseDOM'],\n\n    /**\n     * Render HTML\n     */\n    renderHTML?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['renderHTML'],\n      },\n      props: {\n        node: ProseMirrorNode,\n        HTMLAttributes: Record<string, any>,\n      }\n    ) => DOMOutputSpec) | null,\n\n    /**\n     * Render Text\n     */\n    renderText?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['renderText'],\n      },\n      props: {\n        node: ProseMirrorNode,\n        pos: number,\n        parent: ProseMirrorNode,\n        index: number,\n      }\n    ) => string) | null,\n\n    /**\n     * Add Attributes\n     */\n    addAttributes?: (\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['addAttributes'],\n      },\n    ) => Attributes | {},\n  }\n}\n\nexport class Node<Options = any, Storage = any> {\n  type = 'node'\n\n  name = 'node'\n\n  parent: Node | null = null\n\n  child: Node | null = null\n\n  options: Options\n\n  storage: Storage\n\n  config: NodeConfig = {\n    name: this.name,\n    defaultOptions: {},\n  }\n\n  constructor(config: Partial<NodeConfig<Options, Storage>> = {}) {\n    this.config = {\n      ...this.config,\n      ...config,\n    }\n\n    this.name = this.config.name\n\n    if (config.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`)\n    }\n\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions\n\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n        this,\n        'addOptions',\n        {\n          name: this.name,\n        },\n      ))\n    }\n\n    this.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      this,\n      'addStorage',\n      {\n        name: this.name,\n        options: this.options,\n      },\n    )) || {}\n  }\n\n  static create<O = any, S = any>(config: Partial<NodeConfig<O, S>> = {}) {\n    return new Node<O, S>(config)\n  }\n\n  configure(options: Partial<Options> = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend()\n\n    extension.options = mergeDeep(this.options, options) as Options\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n\n  extend<ExtendedOptions = Options, ExtendedStorage = Storage>(extendedConfig: Partial<NodeConfig<ExtendedOptions, ExtendedStorage>> = {}) {\n    const extension = new Node<ExtendedOptions, ExtendedStorage>(extendedConfig)\n\n    extension.parent = this\n\n    this.child = extension\n\n    extension.name = extendedConfig.name\n      ? extendedConfig.name\n      : extension.parent.name\n\n    if (extendedConfig.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`)\n    }\n\n    extension.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n      extension,\n      'addOptions',\n      {\n        name: extension.name,\n      },\n    ))\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n}\n","import {\n  DOMOutputSpec,\n  MarkSpec,\n  Mark as ProseMirrorMark,\n  MarkType,\n} from 'prosemirror-model'\nimport { Plugin, Transaction } from 'prosemirror-state'\nimport { InputRule } from './InputRule'\nimport { PasteRule } from './PasteRule'\nimport { mergeDeep } from './utilities/mergeDeep'\nimport { callOrReturn } from './utilities/callOrReturn'\nimport { getExtensionField } from './helpers/getExtensionField'\nimport {\n  AnyConfig,\n  Extensions,\n  Attributes,\n  RawCommands,\n  GlobalAttributes,\n  ParentConfig,\n  KeyboardShortcutCommand,\n} from './types'\nimport { Node } from './Node'\nimport { MarkConfig } from '.'\nimport { Editor } from './Editor'\n\ndeclare module '@tiptap/core' {\n  export interface MarkConfig<Options = any, Storage = any> {\n    [key: string]: any;\n\n    /**\n     * Name\n     */\n    name: string,\n\n    /**\n     * Priority\n     */\n    priority?: number,\n\n    /**\n     * Default options\n     */\n    defaultOptions?: Options,\n\n    /**\n     * Default Options\n     */\n    addOptions?: (this: {\n      name: string,\n      parent: Exclude<ParentConfig<MarkConfig<Options, Storage>>['addOptions'], undefined>,\n    }) => Options,\n\n    /**\n     * Default Storage\n     */\n    addStorage?: (this: {\n      name: string,\n      options: Options,\n      parent: Exclude<ParentConfig<MarkConfig<Options, Storage>>['addStorage'], undefined>,\n    }) => Storage,\n\n    /**\n     * Global attributes\n     */\n    addGlobalAttributes?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addGlobalAttributes'],\n    }) => GlobalAttributes | {},\n\n    /**\n     * Raw\n     */\n    addCommands?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addCommands'],\n    }) => Partial<RawCommands>,\n\n    /**\n     * Keyboard shortcuts\n     */\n    addKeyboardShortcuts?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addKeyboardShortcuts'],\n    }) => {\n      [key: string]: KeyboardShortcutCommand,\n    },\n\n    /**\n     * Input rules\n     */\n    addInputRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addInputRules'],\n    }) => InputRule[],\n\n    /**\n     * Paste rules\n     */\n    addPasteRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addPasteRules'],\n    }) => PasteRule[],\n\n    /**\n     * ProseMirror plugins\n     */\n    addProseMirrorPlugins?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addProseMirrorPlugins'],\n    }) => Plugin[],\n\n    /**\n     * Extensions\n     */\n    addExtensions?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addExtensions'],\n    }) => Extensions,\n\n    /**\n     * Extend Node Schema\n     */\n    extendNodeSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['extendNodeSchema'],\n      },\n      extension: Node,\n    ) => Record<string, any>) | null,\n\n    /**\n     * Extend Mark Schema\n     */\n    extendMarkSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['extendMarkSchema'],\n      },\n      extension: Mark,\n    ) => Record<string, any>) | null,\n\n    /**\n     * The editor is not ready yet.\n     */\n    onBeforeCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onBeforeCreate'],\n    }) => void) | null,\n\n    /**\n     * The editor is ready.\n     */\n    onCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onCreate'],\n    }) => void) | null,\n\n    /**\n     * The content has changed.\n     */\n    onUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onUpdate'],\n    }) => void) | null,\n\n    /**\n     * The selection has changed.\n     */\n    onSelectionUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onSelectionUpdate'],\n    }) => void) | null,\n\n    /**\n     * The editor state has changed.\n     */\n    onTransaction?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: MarkType,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['onTransaction'],\n      },\n      props: {\n        transaction: Transaction,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is focused.\n     */\n    onFocus?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: MarkType,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['onFocus'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor isn’t focused anymore.\n     */\n    onBlur?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: MarkType,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['onBlur'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is destroyed.\n     */\n    onDestroy?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onDestroy'],\n    }) => void) | null,\n\n    /**\n     * Keep mark after split node\n     */\n    keepOnSplit?: boolean | (() => boolean),\n\n    /**\n     * Inclusive\n     */\n    inclusive?: MarkSpec['inclusive'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['inclusive'],\n    }) => MarkSpec['inclusive']),\n\n    /**\n     * Excludes\n     */\n    excludes?: MarkSpec['excludes'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['excludes'],\n    }) => MarkSpec['excludes']),\n\n    /**\n     * Group\n     */\n    group?: MarkSpec['group'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['group'],\n    }) => MarkSpec['group']),\n\n    /**\n     * Spanning\n     */\n    spanning?: MarkSpec['spanning'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['spanning'],\n    }) => MarkSpec['spanning']),\n\n    /**\n     * Code\n     */\n    code?: boolean | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['code'],\n    }) => boolean),\n\n    /**\n     * Parse HTML\n     */\n    parseHTML?: (\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['parseHTML'],\n      },\n    ) => MarkSpec['parseDOM'],\n\n    /**\n     * Render HTML\n     */\n    renderHTML?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['renderHTML'],\n      },\n      props: {\n        mark: ProseMirrorMark,\n        HTMLAttributes: Record<string, any>,\n      },\n    ) => DOMOutputSpec) | null,\n\n    /**\n     * Attributes\n     */\n    addAttributes?: (\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['addAttributes'],\n      },\n    ) => Attributes | {},\n  }\n}\n\nexport class Mark<Options = any, Storage = any> {\n  type = 'mark'\n\n  name = 'mark'\n\n  parent: Mark | null = null\n\n  child: Mark | null = null\n\n  options: Options\n\n  storage: Storage\n\n  config: MarkConfig = {\n    name: this.name,\n    defaultOptions: {},\n  }\n\n  constructor(config: Partial<MarkConfig<Options, Storage>> = {}) {\n    this.config = {\n      ...this.config,\n      ...config,\n    }\n\n    this.name = this.config.name\n\n    if (config.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`)\n    }\n\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions\n\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n        this,\n        'addOptions',\n        {\n          name: this.name,\n        },\n      ))\n    }\n\n    this.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      this,\n      'addStorage',\n      {\n        name: this.name,\n        options: this.options,\n      },\n    )) || {}\n  }\n\n  static create<O = any, S = any>(config: Partial<MarkConfig<O, S>> = {}) {\n    return new Mark<O, S>(config)\n  }\n\n  configure(options: Partial<Options> = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend()\n\n    extension.options = mergeDeep(this.options, options) as Options\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n\n  extend<ExtendedOptions = Options, ExtendedStorage = Storage>(extendedConfig: Partial<MarkConfig<ExtendedOptions, ExtendedStorage>> = {}) {\n    const extension = new Mark<ExtendedOptions, ExtendedStorage>(extendedConfig)\n\n    extension.parent = this\n\n    this.child = extension\n\n    extension.name = extendedConfig.name\n      ? extendedConfig.name\n      : extension.parent.name\n\n    if (extendedConfig.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`)\n    }\n\n    extension.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n      extension,\n      'addOptions',\n      {\n        name: extension.name,\n      },\n    ))\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n}\n","import { Decoration, NodeView as ProseMirrorNodeView } from 'prosemirror-view'\nimport { NodeSelection } from 'prosemirror-state'\nimport { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { Editor as CoreEditor } from './Editor'\nimport { Node } from './Node'\nimport { isiOS } from './utilities/isiOS'\nimport { NodeViewRendererProps, NodeViewRendererOptions } from './types'\n\nexport class NodeView<\n  Component,\n  Editor extends CoreEditor = CoreEditor,\n  Options extends NodeViewRendererOptions = NodeViewRendererOptions,\n> implements ProseMirrorNodeView {\n\n  component: Component\n\n  editor: Editor\n\n  options: Options\n\n  extension: Node\n\n  node: ProseMirrorNode\n\n  decorations: Decoration[]\n\n  getPos: any\n\n  isDragging = false\n\n  constructor(component: Component, props: NodeViewRendererProps, options?: Partial<Options>) {\n    this.component = component\n    this.editor = props.editor as Editor\n    this.options = {\n      stopEvent: null,\n      ignoreMutation: null,\n      ...options,\n    } as Options\n    this.extension = props.extension\n    this.node = props.node\n    this.decorations = props.decorations\n    this.getPos = props.getPos\n    this.mount()\n  }\n\n  mount() {\n    // eslint-disable-next-line\n    return\n  }\n\n  get dom(): Element | null {\n    return null\n  }\n\n  get contentDOM(): Element | null {\n    return null\n  }\n\n  onDragStart(event: DragEvent) {\n    const { view } = this.editor\n    const target = (event.target as HTMLElement)\n\n    // get the drag handle element\n    // `closest` is not available for text nodes so we may have to use its parent\n    const dragHandle = target.nodeType === 3\n      ? target.parentElement?.closest('[data-drag-handle]')\n      : target.closest('[data-drag-handle]')\n\n    if (\n      !this.dom\n      || this.contentDOM?.contains(target)\n      || !dragHandle\n    ) {\n      return\n    }\n\n    let x = 0\n    let y = 0\n\n    // calculate offset for drag element if we use a different drag handle element\n    if (this.dom !== dragHandle) {\n      const domBox = this.dom.getBoundingClientRect()\n      const handleBox = dragHandle.getBoundingClientRect()\n\n      x = handleBox.x - domBox.x + event.offsetX\n      y = handleBox.y - domBox.y + event.offsetY\n    }\n\n    event.dataTransfer?.setDragImage(this.dom, x, y)\n\n    // we need to tell ProseMirror that we want to move the whole node\n    // so we create a NodeSelection\n    const selection = NodeSelection.create(view.state.doc, this.getPos())\n    const transaction = view.state.tr.setSelection(selection)\n\n    view.dispatch(transaction)\n  }\n\n  stopEvent(event: Event) {\n    if (!this.dom) {\n      return false\n    }\n\n    if (typeof this.options.stopEvent === 'function') {\n      return this.options.stopEvent({ event })\n    }\n\n    const target = (event.target as HTMLElement)\n    const isInElement = this.dom.contains(target) && !this.contentDOM?.contains(target)\n\n    // any event from child nodes should be handled by ProseMirror\n    if (!isInElement) {\n      return false\n    }\n\n    const isDropEvent = event.type === 'drop'\n    const isInput = ['INPUT', 'BUTTON', 'SELECT', 'TEXTAREA'].includes(target.tagName)\n      || target.isContentEditable\n\n    // any input event within node views should be ignored by ProseMirror\n    if (isInput && !isDropEvent) {\n      return true\n    }\n\n    const { isEditable } = this.editor\n    const { isDragging } = this\n    const isDraggable = !!this.node.type.spec.draggable\n    const isSelectable = NodeSelection.isSelectable(this.node)\n    const isCopyEvent = event.type === 'copy'\n    const isPasteEvent = event.type === 'paste'\n    const isCutEvent = event.type === 'cut'\n    const isClickEvent = event.type === 'mousedown'\n    const isDragEvent = event.type.startsWith('drag')\n\n    // ProseMirror tries to drag selectable nodes\n    // even if `draggable` is set to `false`\n    // this fix prevents that\n    if (!isDraggable && isSelectable && isDragEvent) {\n      event.preventDefault()\n    }\n\n    if (isDraggable && isDragEvent && !isDragging) {\n      event.preventDefault()\n      return false\n    }\n\n    // we have to store that dragging started\n    if (isDraggable && isEditable && !isDragging && isClickEvent) {\n      const dragHandle = target.closest('[data-drag-handle]')\n      const isValidDragHandle = dragHandle\n        && (this.dom === dragHandle || (this.dom.contains(dragHandle)))\n\n      if (isValidDragHandle) {\n        this.isDragging = true\n\n        document.addEventListener('dragend', () => {\n          this.isDragging = false\n        }, { once: true })\n\n        document.addEventListener('mouseup', () => {\n          this.isDragging = false\n        }, { once: true })\n      }\n    }\n\n    // these events are handled by prosemirror\n    if (\n      isDragging\n      || isDropEvent\n      || isCopyEvent\n      || isPasteEvent\n      || isCutEvent\n      || (isClickEvent && isSelectable)\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  ignoreMutation(mutation: MutationRecord | { type: 'selection', target: Element }) {\n    if (!this.dom || !this.contentDOM) {\n      return true\n    }\n\n    if (typeof this.options.ignoreMutation === 'function') {\n      return this.options.ignoreMutation({ mutation })\n    }\n\n    // a leaf/atom node is like a black box for ProseMirror\n    // and should be fully handled by the node view\n    if (this.node.isLeaf || this.node.isAtom) {\n      return true\n    }\n\n    // ProseMirror should handle any selections\n    if (mutation.type === 'selection') {\n      return false\n    }\n\n    // try to prevent a bug on iOS that will break node views on enter\n    // this is because ProseMirror can’t preventDispatch on enter\n    // this will lead to a re-render of the node view on enter\n    // see: https://github.com/ueberdosis/tiptap/issues/1214\n    if (\n      this.dom.contains(mutation.target)\n      && mutation.type === 'childList'\n      && isiOS()\n      && this.editor.isFocused\n    ) {\n      const changedNodes = [\n        ...Array.from(mutation.addedNodes),\n        ...Array.from(mutation.removedNodes),\n      ] as HTMLElement[]\n\n      // we’ll check if every changed node is contentEditable\n      // to make sure it’s probably mutated by ProseMirror\n      if (changedNodes.every(node => node.isContentEditable)) {\n        return false\n      }\n    }\n\n    // we will allow mutation contentDOM with attributes\n    // so we can for example adding classes within our node view\n    if (this.contentDOM === mutation.target && mutation.type === 'attributes') {\n      return true\n    }\n\n    // ProseMirror should handle any changes within contentDOM\n    if (this.contentDOM.contains(mutation.target)) {\n      return false\n    }\n\n    return true\n  }\n\n  updateAttributes(attributes: {}) {\n    this.editor.commands.command(({ tr }) => {\n      const pos = this.getPos()\n\n      tr.setNodeMarkup(pos, undefined, {\n        ...this.node.attrs,\n        ...attributes,\n      })\n\n      return true\n    })\n  }\n\n  deleteNode(): void {\n    const from = this.getPos()\n    const to = from + this.node.nodeSize\n\n    this.editor.commands.deleteRange({ from, to })\n  }\n}\n","import { Transaction } from 'prosemirror-state'\n\nexport interface TrackerResult {\n  position: number,\n  deleted: boolean,\n}\n\nexport class Tracker {\n\n  transaction: Transaction\n\n  currentStep: number\n\n  constructor(transaction: Transaction) {\n    this.transaction = transaction\n    this.currentStep = this.transaction.steps.length\n  }\n\n  map(position: number): TrackerResult {\n    let deleted = false\n\n    const mappedPosition = this.transaction.steps\n      .slice(this.currentStep)\n      .reduce((newPosition, step) => {\n        const mapResult = step\n          .getMap()\n          .mapResult(newPosition)\n\n        if (mapResult.deleted) {\n          deleted = true\n        }\n\n        return mapResult.pos\n      }, position)\n\n    return {\n      position: mappedPosition,\n      deleted,\n    }\n  }\n\n}\n","import { NodeType } from 'prosemirror-model'\nimport { InputRule, InputRuleFinder } from '../InputRule'\nimport { ExtendedRegExpMatchArray } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\n\n/**\n * Build an input rule that adds a node when the\n * matched text is typed into it.\n */\nexport function nodeInputRule(config: {\n  find: InputRuleFinder,\n  type: NodeType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {}\n      const { tr } = state\n      const start = range.from\n      let end = range.to\n\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1])\n        let matchStart = start + offset\n\n        if (matchStart > end) {\n          matchStart = end\n        } else {\n          end = matchStart + match[1].length\n        }\n\n        // insert last typed character\n        const lastChar = match[0][match[0].length - 1]\n\n        tr.insertText(lastChar, start + match[0].length - 1)\n\n        // insert node from input rule\n        tr.replaceWith(matchStart, end, config.type.create(attributes))\n      } else if (match[0]) {\n        tr.replaceWith(start, end, config.type.create(attributes))\n      }\n    },\n  })\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { MarkRange } from '../types'\nimport { getMarkRange } from './getMarkRange'\n\nexport function getMarksBetween(from: number, to: number, doc: ProseMirrorNode): MarkRange[] {\n  const marks: MarkRange[] = []\n\n  // get all inclusive marks on empty selection\n  if (from === to) {\n    doc\n      .resolve(from)\n      .marks()\n      .forEach(mark => {\n        const $pos = doc.resolve(from - 1)\n        const range = getMarkRange($pos, mark.type)\n\n        if (!range) {\n          return\n        }\n\n        marks.push({\n          mark,\n          ...range,\n        })\n      })\n  } else {\n    doc.nodesBetween(from, to, (node, pos) => {\n      marks.push(...node.marks.map(mark => ({\n        from: pos,\n        to: pos + node.nodeSize,\n        mark,\n      })))\n    })\n  }\n\n  return marks\n}\n","import { InputRule, InputRuleFinder } from '../InputRule'\nimport { MarkType } from 'prosemirror-model'\nimport { getMarksBetween } from '../helpers/getMarksBetween'\nimport { callOrReturn } from '../utilities/callOrReturn'\nimport { ExtendedRegExpMatchArray } from '../types'\n\n/**\n * Build an input rule that adds a mark when the\n * matched text is typed into it.\n */\nexport function markInputRule(config: {\n  find: InputRuleFinder,\n  type: MarkType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match)\n\n      if (attributes === false || attributes === null) {\n        return\n      }\n\n      const { tr } = state\n      const captureGroup = match[match.length - 1]\n      const fullMatch = match[0]\n      let markEnd = range.to\n\n      if (captureGroup) {\n        const startSpaces = fullMatch.search(/\\S/)\n        const textStart = range.from + fullMatch.indexOf(captureGroup)\n        const textEnd = textStart + captureGroup.length\n\n        const excludedMarks = getMarksBetween(range.from, range.to, state.doc)\n          .filter(item => {\n            // @ts-ignore\n            const excluded = item.mark.type.excluded as MarkType[]\n\n            return excluded.find(type => type === config.type && type !== item.mark.type)\n          })\n          .filter(item => item.to > textStart)\n\n        if (excludedMarks.length) {\n          return null\n        }\n\n        if (textEnd < range.to) {\n          tr.delete(textEnd, range.to)\n        }\n\n        if (textStart > range.from) {\n          tr.delete(range.from + startSpaces, textStart)\n        }\n\n        markEnd = range.from + startSpaces + captureGroup.length\n\n        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}))\n\n        tr.removeStoredMark(config.type)\n      }\n    },\n  })\n}\n","import { InputRule, InputRuleFinder } from '../InputRule'\nimport { NodeType } from 'prosemirror-model'\nimport { ExtendedRegExpMatchArray } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\n\n/**\n * Build an input rule that changes the type of a textblock when the\n * matched text is typed into it. When using a regular expresion you’ll\n * probably want the regexp to start with `^`, so that the pattern can\n * only occur at the start of a textblock.\n */\nexport function textblockTypeInputRule(config: {\n  find: InputRuleFinder,\n  type: NodeType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const $start = state.doc.resolve(range.from)\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {}\n\n      if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), config.type)) {\n        return null\n      }\n\n      state.tr\n        .delete(range.from, range.to)\n        .setBlockType(range.from, range.from, config.type, attributes)\n    },\n  })\n}\n","import { InputRule, InputRuleFinder } from '../InputRule'\n\n/**\n * Build an input rule that replaces text when the\n * matched text is typed into it.\n */\nexport function textInputRule(config: {\n  find: InputRuleFinder,\n  replace: string,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      let insert = config.replace\n      let start = range.from\n      const end = range.to\n\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1])\n\n        insert += match[0].slice(offset + match[1].length)\n        start += offset\n\n        const cutOff = start - end\n\n        if (cutOff > 0) {\n          insert = match[0].slice(offset - cutOff, offset) + insert\n          start = end\n        }\n      }\n\n      state.tr.insertText(insert, start, end)\n    },\n  })\n}\n","import { InputRule, InputRuleFinder } from '../InputRule'\nimport { NodeType, Node as ProseMirrorNode } from 'prosemirror-model'\nimport { findWrapping, canJoin } from 'prosemirror-transform'\nimport { ExtendedRegExpMatchArray } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\n\n/**\n * Build an input rule for automatically wrapping a textblock when a\n * given string is typed. When using a regular expresion you’ll\n * probably want the regexp to start with `^`, so that the pattern can\n * only occur at the start of a textblock.\n *\n * `type` is the type of node to wrap in.\n *\n * By default, if there’s a node with the same type above the newly\n * wrapped node, the rule will try to join those\n * two nodes. You can pass a join predicate, which takes a regular\n * expression match and the node before the wrapped node, and can\n * return a boolean to indicate whether a join should happen.\n */\nexport function wrappingInputRule(config: {\n  find: InputRuleFinder,\n  type: NodeType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n  joinPredicate?: (match: ExtendedRegExpMatchArray, node: ProseMirrorNode) => boolean,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {}\n      const tr = state.tr.delete(range.from, range.to)\n      const $start = tr.doc.resolve(range.from)\n      const blockRange = $start.blockRange()\n      const wrapping = blockRange && findWrapping(blockRange, config.type, attributes)\n\n      if (!wrapping) {\n        return null\n      }\n\n      tr.wrap(blockRange, wrapping)\n\n      const before = tr.doc.resolve(range.from - 1).nodeBefore\n\n      if (\n        before\n        && before.type === config.type\n        && canJoin(tr.doc, range.from - 1)\n        && (!config.joinPredicate || config.joinPredicate(match, before))\n      ) {\n        tr.join(range.from - 1)\n      }\n    },\n  })\n}\n","import { PasteRule, PasteRuleFinder } from '../PasteRule'\nimport { MarkType } from 'prosemirror-model'\nimport { getMarksBetween } from '../helpers/getMarksBetween'\nimport { callOrReturn } from '../utilities/callOrReturn'\nimport { ExtendedRegExpMatchArray } from '../types'\n\n/**\n * Build an paste rule that adds a mark when the\n * matched text is pasted into it.\n */\nexport function markPasteRule(config: {\n  find: PasteRuleFinder,\n  type: MarkType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n}) {\n  return new PasteRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match)\n\n      if (attributes === false || attributes === null) {\n        return\n      }\n\n      const { tr } = state\n      const captureGroup = match[match.length - 1]\n      const fullMatch = match[0]\n      let markEnd = range.to\n\n      if (captureGroup) {\n        const startSpaces = fullMatch.search(/\\S/)\n        const textStart = range.from + fullMatch.indexOf(captureGroup)\n        const textEnd = textStart + captureGroup.length\n\n        const excludedMarks = getMarksBetween(range.from, range.to, state.doc)\n          .filter(item => {\n            // @ts-ignore\n            const excluded = item.mark.type.excluded as MarkType[]\n\n            return excluded.find(type => type === config.type && type !== item.mark.type)\n          })\n          .filter(item => item.to > textStart)\n\n        if (excludedMarks.length) {\n          return null\n        }\n\n        if (textEnd < range.to) {\n          tr.delete(textEnd, range.to)\n        }\n\n        if (textStart > range.from) {\n          tr.delete(range.from + startSpaces, textStart)\n        }\n\n        markEnd = range.from + startSpaces + captureGroup.length\n\n        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}))\n\n        tr.removeStoredMark(config.type)\n      }\n    },\n  })\n}\n","import { PasteRule, PasteRuleFinder } from '../PasteRule'\n\n/**\n * Build an paste rule that replaces text when the\n * matched text is pasted into it.\n */\nexport function textPasteRule(config: {\n  find: PasteRuleFinder,\n  replace: string,\n}) {\n  return new PasteRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      let insert = config.replace\n      let start = range.from\n      const end = range.to\n\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1])\n\n        insert += match[0].slice(offset + match[1].length)\n        start += offset\n\n        const cutOff = start - end\n\n        if (cutOff > 0) {\n          insert = match[0].slice(offset - cutOff, offset) + insert\n          start = end\n        }\n      }\n\n      state.tr.insertText(insert, start, end)\n    },\n  })\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { Transaction } from 'prosemirror-state'\nimport { Transform } from 'prosemirror-transform'\n\n/**\n * Returns a new `Transform` based on all steps of the passed transactions.\n */\nexport function combineTransactionSteps(oldDoc: ProseMirrorNode, transactions: Transaction[]): Transform {\n  const transform = new Transform(oldDoc)\n\n  transactions.forEach(transaction => {\n    transaction.steps.forEach(step => {\n      transform.step(step)\n    })\n  })\n\n  return transform\n}\n","import { ContentMatch, NodeType } from 'prosemirror-model'\n\nexport function defaultBlockAt(match: ContentMatch): NodeType | null {\n  for (let i = 0; i < match.edgeCount; i += 1) {\n    const { type } = match.edge(i)\n\n    if (type.isTextblock && !type.hasRequiredAttrs()) {\n      return type\n    }\n  }\n\n  return null\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { Predicate, NodeWithPos } from '../types'\n\nexport function findChildren(node: ProseMirrorNode, predicate: Predicate): NodeWithPos[] {\n  const nodesWithPos: NodeWithPos[] = []\n\n  node.descendants((child, pos) => {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos,\n      })\n    }\n  })\n\n  return nodesWithPos\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { Predicate, Range, NodeWithPos } from '../types'\n\n/**\n * Same as `findChildren` but searches only within a `range`.\n */\nexport function findChildrenInRange(node: ProseMirrorNode, range: Range, predicate: Predicate): NodeWithPos[] {\n  const nodesWithPos: NodeWithPos[] = []\n\n  // if (range.from === range.to) {\n  //   const nodeAt = node.nodeAt(range.from)\n\n  //   if (nodeAt) {\n  //     nodesWithPos.push({\n  //       node: nodeAt,\n  //       pos: range.from,\n  //     })\n  //   }\n  // }\n\n  node.nodesBetween(range.from, range.to, (child, pos) => {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos,\n      })\n    }\n  })\n\n  return nodesWithPos\n}\n","import { Schema } from 'prosemirror-model'\nimport { getSchemaByResolvedExtensions } from './getSchemaByResolvedExtensions'\nimport { ExtensionManager } from '../ExtensionManager'\nimport { Extensions } from '../types'\n\nexport function getSchema(extensions: Extensions): Schema {\n  const resolvedExtensions = ExtensionManager.resolve(extensions)\n\n  return getSchemaByResolvedExtensions(resolvedExtensions)\n}\n","import { Node } from 'prosemirror-model'\nimport { getSchema } from './getSchema'\nimport { getHTMLFromFragment } from './getHTMLFromFragment'\nimport { Extensions, JSONContent } from '../types'\n\nexport function generateHTML(doc: JSONContent, extensions: Extensions): string {\n  const schema = getSchema(extensions)\n  const contentNode = Node.fromJSON(schema, doc)\n\n  return getHTMLFromFragment(contentNode.content, schema)\n}\n","import { DOMParser } from 'prosemirror-model'\nimport { getSchema } from './getSchema'\nimport { elementFromString } from '../utilities/elementFromString'\nimport { Extensions } from '../types'\n\nexport function generateJSON(html: string, extensions: Extensions): Record<string, any> {\n  const schema = getSchema(extensions)\n  const dom = elementFromString(html)\n\n  return DOMParser.fromSchema(schema)\n    .parse(dom)\n    .toJSON()\n}\n","import { Node } from 'prosemirror-model'\nimport { getSchema } from './getSchema'\nimport { Extensions, JSONContent, TextSerializer } from '../types'\nimport { getTextSeralizersFromSchema } from './getTextSeralizersFromSchema'\nimport { getText } from './getText'\n\nexport function generateText(\n  doc: JSONContent,\n  extensions: Extensions,\n  options?: {\n    blockSeparator?: string,\n    textSerializers?: Record<string, TextSerializer>,\n  },\n): string {\n  const {\n    blockSeparator = '\\n\\n',\n    textSerializers = {},\n  } = options || {}\n  const schema = getSchema(extensions)\n  const contentNode = Node.fromJSON(schema, doc)\n\n  return getText(contentNode, {\n    blockSeparator,\n    textSerializers: {\n      ...textSerializers,\n      ...getTextSeralizersFromSchema(schema),\n    },\n  })\n}\n","/**\n * Removes duplicated values within an array.\n * Supports numbers, strings and objects.\n */\nexport function removeDuplicates<T>(array: T[], by = JSON.stringify): T[] {\n  const seen: Record<any, any> = {}\n\n  return array.filter(item => {\n    const key = by(item)\n\n    return Object.prototype.hasOwnProperty.call(seen, key)\n      ? false\n      : (seen[key] = true)\n  })\n}\n","import { Transform, Step } from 'prosemirror-transform'\nimport { Range } from '../types'\nimport { removeDuplicates } from '../utilities/removeDuplicates'\n\nexport type ChangedRange = {\n  oldRange: Range,\n  newRange: Range,\n}\n\n/**\n * Removes duplicated ranges and ranges that are\n * fully captured by other ranges.\n */\nfunction simplifyChangedRanges(changes: ChangedRange[]): ChangedRange[] {\n  const uniqueChanges = removeDuplicates(changes)\n\n  return uniqueChanges.length === 1\n    ? uniqueChanges\n    : uniqueChanges.filter((change, index) => {\n      const rest = uniqueChanges.filter((_, i) => i !== index)\n\n      return !rest.some(otherChange => {\n        return change.oldRange.from >= otherChange.oldRange.from\n          && change.oldRange.to <= otherChange.oldRange.to\n          && change.newRange.from >= otherChange.newRange.from\n          && change.newRange.to <= otherChange.newRange.to\n      })\n    })\n}\n\n/**\n * Returns a list of changed ranges\n * based on the first and last state of all steps.\n */\nexport function getChangedRanges(transform: Transform): ChangedRange[] {\n  const { mapping, steps } = transform\n  const changes: ChangedRange[] = []\n\n  mapping.maps.forEach((stepMap, index) => {\n    const ranges: Range[] = []\n\n    // This accounts for step changes where no range was actually altered\n    // e.g. when setting a mark, node attribute, etc.\n    // @ts-ignore\n    if (!stepMap.ranges.length) {\n      const { from, to } = steps[index] as Step & {\n        from?: number,\n        to?: number,\n      }\n\n      if (from === undefined || to === undefined) {\n        return\n      }\n\n      ranges.push({ from, to })\n    } else {\n      stepMap.forEach((from, to) => {\n        ranges.push({ from, to })\n      })\n    }\n\n    ranges.forEach(({ from, to }) => {\n      const newStart = mapping.slice(index).map(from, -1)\n      const newEnd = mapping.slice(index).map(to)\n      const oldStart = mapping.invert().map(newStart, -1)\n      const oldEnd = mapping.invert().map(newEnd)\n\n      changes.push({\n        oldRange: {\n          from: oldStart,\n          to: oldEnd,\n        },\n        newRange: {\n          from: newStart,\n          to: newEnd,\n        },\n      })\n    })\n  })\n\n  return simplifyChangedRanges(changes)\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { JSONContent } from '../types'\n\ninterface DebugJSONContent extends JSONContent {\n  from: number,\n  to: number,\n}\n\nexport function getDebugJSON(node: ProseMirrorNode, startOffset = 0): DebugJSONContent {\n  const isTopNode = node.type === node.type.schema.topNodeType\n  const increment = isTopNode ? 0 : 1\n  const from = startOffset\n  const to = from + node.nodeSize\n  const marks = node.marks.map(mark => {\n    const output: { type: string, attrs?: Record<string, any> } = {\n      type: mark.type.name,\n    }\n\n    if (Object.keys(mark.attrs).length) {\n      output.attrs = { ...mark.attrs }\n    }\n\n    return output\n  })\n  const attrs = { ...node.attrs }\n  const output: DebugJSONContent = {\n    type: node.type.name,\n    from,\n    to,\n  }\n\n  if (Object.keys(attrs).length) {\n    output.attrs = attrs\n  }\n\n  if (marks.length) {\n    output.marks = marks\n  }\n\n  if (node.content.childCount) {\n    output.content = []\n\n    node.forEach((child, offset) => {\n      output.content?.push(getDebugJSON(child, startOffset + offset + increment))\n    })\n  }\n\n  if (node.text) {\n    output.text = node.text\n  }\n\n  return output\n}\n","import { NodeSelection } from 'prosemirror-state'\nimport { isObject } from '../utilities/isObject'\n\nexport function isNodeSelection(value: unknown): value is NodeSelection {\n  return isObject(value) && value instanceof NodeSelection\n}\n","import { EditorView } from 'prosemirror-view'\nimport { minMax } from '../utilities/minMax'\n\nexport function posToDOMRect(view: EditorView, from: number, to: number): DOMRect {\n  const minPos = 0\n  const maxPos = view.state.doc.content.size\n  const resolvedFrom = minMax(from, minPos, maxPos)\n  const resolvedEnd = minMax(to, minPos, maxPos)\n  const start = view.coordsAtPos(resolvedFrom)\n  const end = view.coordsAtPos(resolvedEnd, -1)\n  const top = Math.min(start.top, end.top)\n  const bottom = Math.max(start.bottom, end.bottom)\n  const left = Math.min(start.left, end.left)\n  const right = Math.max(start.right, end.right)\n  const width = right - left\n  const height = bottom - top\n  const x = left\n  const y = top\n  const data = {\n    top,\n    bottom,\n    left,\n    right,\n    width,\n    height,\n    x,\n    y,\n  }\n\n  return {\n    ...data,\n    toJSON: () => data,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}