{"ast":null,"code":"import { Node, mergeAttributes, nodeInputRule } from '@tiptap/core';\nconst inputRegex = /(!\\[(.+|:?)]\\((\\S+)(?:(?:\\s+)[\"'](\\S+)[\"'])?\\))/;\nconst Image = Node.create({\n  name: 'image',\n\n  addOptions() {\n    return {\n      inline: false,\n      HTMLAttributes: {}\n    };\n  },\n\n  inline() {\n    return this.options.inline;\n  },\n\n  group() {\n    return this.options.inline ? 'inline' : 'block';\n  },\n\n  draggable: true,\n\n  addAttributes() {\n    return {\n      src: {\n        default: null\n      },\n      alt: {\n        default: null\n      },\n      title: {\n        default: null\n      }\n    };\n  },\n\n  parseHTML() {\n    return [{\n      tag: 'img[src]'\n    }];\n  },\n\n  renderHTML(_ref) {\n    let {\n      HTMLAttributes\n    } = _ref;\n    return ['img', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];\n  },\n\n  addCommands() {\n    return {\n      setImage: options => _ref2 => {\n        let {\n          commands\n        } = _ref2;\n        return commands.insertContent({\n          type: this.name,\n          attrs: options\n        });\n      }\n    };\n  },\n\n  addInputRules() {\n    return [nodeInputRule({\n      find: inputRegex,\n      type: this.type,\n      getAttributes: match => {\n        const [,, alt, src, title] = match;\n        return {\n          src,\n          alt,\n          title\n        };\n      }\n    })];\n  }\n\n});\nexport { Image, Image as default, inputRegex };","map":{"version":3,"sources":["../src/image.ts"],"names":[],"mappings":";MAsBa,UAAU,GAAG,iD;MAEb,KAAK,GAAG,IAAI,CAAC,MAAL,CAA0B;AAC7C,EAAA,IAAI,EAAE,OADuC;;AAG7C,EAAA,UAAU,GAAA;AACR,WAAO;AACL,MAAA,MAAM,EAAE,KADH;AAEL,MAAA,cAAc,EAAE;AAFX,KAAP;AAID,GAR4C;;AAU7C,EAAA,MAAM,GAAA;AACJ,WAAO,KAAK,OAAL,CAAa,MAApB;AACD,GAZ4C;;AAc7C,EAAA,KAAK,GAAA;AACH,WAAO,KAAK,OAAL,CAAa,MAAb,GAAsB,QAAtB,GAAiC,OAAxC;AACD,GAhB4C;;AAkB7C,EAAA,SAAS,EAAE,IAlBkC;;AAoB7C,EAAA,aAAa,GAAA;AACX,WAAO;AACL,MAAA,GAAG,EAAE;AACH,QAAA,OAAO,EAAE;AADN,OADA;AAIL,MAAA,GAAG,EAAE;AACH,QAAA,OAAO,EAAE;AADN,OAJA;AAOL,MAAA,KAAK,EAAE;AACL,QAAA,OAAO,EAAE;AADJ;AAPF,KAAP;AAWD,GAhC4C;;AAkC7C,EAAA,SAAS,GAAA;AACP,WAAO,CACL;AACE,MAAA,GAAG,EAAE;AADP,KADK,CAAP;AAKD,GAxC4C;;AA0C7C,EAAA,UAAU,OAAmB;AAAA,QAAlB;AAAE,MAAA;AAAF,KAAkB;AAC3B,WAAO,CAAC,KAAD,EAAQ,eAAe,CAAC,KAAK,OAAL,CAAa,cAAd,EAA8B,cAA9B,CAAvB,CAAP;AACD,GA5C4C;;AA8C7C,EAAA,WAAW,GAAA;AACT,WAAO;AACL,MAAA,QAAQ,EAAE,OAAO,IAAI,SAAa;AAAA,YAAZ;AAAE,UAAA;AAAF,SAAY;AAChC,eAAO,QAAQ,CAAC,aAAT,CAAuB;AAC5B,UAAA,IAAI,EAAE,KAAK,IADiB;AAE5B,UAAA,KAAK,EAAE;AAFqB,SAAvB,CAAP;AAID;AANI,KAAP;AAQD,GAvD4C;;AAyD7C,EAAA,aAAa,GAAA;AACX,WAAO,CACL,aAAa,CAAC;AACZ,MAAA,IAAI,EAAE,UADM;AAEZ,MAAA,IAAI,EAAE,KAAK,IAFC;AAGZ,MAAA,aAAa,EAAE,KAAK,IAAA;AAClB,cAAM,IAAI,GAAJ,EAAS,GAAT,EAAc,KAAd,IAAuB,KAA7B;AAEA,eAAO;AAAE,UAAA,GAAF;AAAO,UAAA,GAAP;AAAY,UAAA;AAAZ,SAAP;AACD;AAPW,KAAD,CADR,CAAP;AAWD;;AArE4C,CAA1B,C","sourcesContent":["import {\n  Node,\n  nodeInputRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface ImageOptions {\n  inline: boolean,\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    image: {\n      /**\n       * Add an image\n       */\n      setImage: (options: { src: string, alt?: string, title?: string }) => ReturnType,\n    }\n  }\n}\n\nexport const inputRegex = /(!\\[(.+|:?)]\\((\\S+)(?:(?:\\s+)[\"'](\\S+)[\"'])?\\))/\n\nexport const Image = Node.create<ImageOptions>({\n  name: 'image',\n\n  addOptions() {\n    return {\n      inline: false,\n      HTMLAttributes: {},\n    }\n  },\n\n  inline() {\n    return this.options.inline\n  },\n\n  group() {\n    return this.options.inline ? 'inline' : 'block'\n  },\n\n  draggable: true,\n\n  addAttributes() {\n    return {\n      src: {\n        default: null,\n      },\n      alt: {\n        default: null,\n      },\n      title: {\n        default: null,\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'img[src]',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['img', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)]\n  },\n\n  addCommands() {\n    return {\n      setImage: options => ({ commands }) => {\n        return commands.insertContent({\n          type: this.name,\n          attrs: options,\n        })\n      },\n    }\n  },\n\n  addInputRules() {\n    return [\n      nodeInputRule({\n        find: inputRegex,\n        type: this.type,\n        getAttributes: match => {\n          const [,, alt, src, title] = match\n\n          return { src, alt, title }\n        },\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}