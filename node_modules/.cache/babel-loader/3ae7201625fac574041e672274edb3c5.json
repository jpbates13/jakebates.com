{"ast":null,"code":"import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\nconst inputRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))$/;\nconst pasteRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))/g;\nconst Strike = Mark.create({\n  name: 'strike',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n\n  parseHTML() {\n    return [{\n      tag: 's'\n    }, {\n      tag: 'del'\n    }, {\n      tag: 'strike'\n    }, {\n      style: 'text-decoration',\n      consuming: false,\n      getAttrs: style => style.includes('line-through') ? {} : false\n    }];\n  },\n\n  renderHTML(_ref) {\n    let {\n      HTMLAttributes\n    } = _ref;\n    return ['s', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n\n  addCommands() {\n    return {\n      setStrike: () => _ref2 => {\n        let {\n          commands\n        } = _ref2;\n        return commands.setMark(this.name);\n      },\n      toggleStrike: () => _ref3 => {\n        let {\n          commands\n        } = _ref3;\n        return commands.toggleMark(this.name);\n      },\n      unsetStrike: () => _ref4 => {\n        let {\n          commands\n        } = _ref4;\n        return commands.unsetMark(this.name);\n      }\n    };\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-x': () => this.editor.commands.toggleStrike()\n    };\n  },\n\n  addInputRules() {\n    return [markInputRule({\n      find: inputRegex,\n      type: this.type\n    })];\n  },\n\n  addPasteRules() {\n    return [markPasteRule({\n      find: pasteRegex,\n      type: this.type\n    })];\n  }\n\n});\nexport { Strike, Strike as default, inputRegex, pasteRegex };","map":{"version":3,"sources":["../src/strike.ts"],"names":[],"mappings":";MA8Ba,UAAU,GAAG,oC;MACb,UAAU,GAAG,oC;MAEb,MAAM,GAAG,IAAI,CAAC,MAAL,CAA2B;AAC/C,EAAA,IAAI,EAAE,QADyC;;AAG/C,EAAA,UAAU,GAAA;AACR,WAAO;AACL,MAAA,cAAc,EAAE;AADX,KAAP;AAGD,GAP8C;;AAS/C,EAAA,SAAS,GAAA;AACP,WAAO,CACL;AACE,MAAA,GAAG,EAAE;AADP,KADK,EAIL;AACE,MAAA,GAAG,EAAE;AADP,KAJK,EAOL;AACE,MAAA,GAAG,EAAE;AADP,KAPK,EAUL;AACE,MAAA,KAAK,EAAE,iBADT;AAEE,MAAA,SAAS,EAAE,KAFb;AAGE,MAAA,QAAQ,EAAE,KAAK,IAAM,KAAgB,CAAC,QAAjB,CAA0B,cAA1B,IAA4C,EAA5C,GAAiD;AAHxE,KAVK,CAAP;AAgBD,GA1B8C;;AA4B/C,EAAA,UAAU,OAAmB;AAAA,QAAlB;AAAE,MAAA;AAAF,KAAkB;AAC3B,WAAO,CAAC,GAAD,EAAM,eAAe,CAAC,KAAK,OAAL,CAAa,cAAd,EAA8B,cAA9B,CAArB,EAAoE,CAApE,CAAP;AACD,GA9B8C;;AAgC/C,EAAA,WAAW,GAAA;AACT,WAAO;AACL,MAAA,SAAS,EAAE,MAAM,SAAa;AAAA,YAAZ;AAAE,UAAA;AAAF,SAAY;AAC5B,eAAO,QAAQ,CAAC,OAAT,CAAiB,KAAK,IAAtB,CAAP;AACD,OAHI;AAIL,MAAA,YAAY,EAAE,MAAM,SAAa;AAAA,YAAZ;AAAE,UAAA;AAAF,SAAY;AAC/B,eAAO,QAAQ,CAAC,UAAT,CAAoB,KAAK,IAAzB,CAAP;AACD,OANI;AAOL,MAAA,WAAW,EAAE,MAAM,SAAa;AAAA,YAAZ;AAAE,UAAA;AAAF,SAAY;AAC9B,eAAO,QAAQ,CAAC,SAAT,CAAmB,KAAK,IAAxB,CAAP;AACD;AATI,KAAP;AAWD,GA5C8C;;AA8C/C,EAAA,oBAAoB,GAAA;AAClB,WAAO;AACL,qBAAe,MAAM,KAAK,MAAL,CAAY,QAAZ,CAAqB,YAArB;AADhB,KAAP;AAGD,GAlD8C;;AAoD/C,EAAA,aAAa,GAAA;AACX,WAAO,CACL,aAAa,CAAC;AACZ,MAAA,IAAI,EAAE,UADM;AAEZ,MAAA,IAAI,EAAE,KAAK;AAFC,KAAD,CADR,CAAP;AAMD,GA3D8C;;AA6D/C,EAAA,aAAa,GAAA;AACX,WAAO,CACL,aAAa,CAAC;AACZ,MAAA,IAAI,EAAE,UADM;AAEZ,MAAA,IAAI,EAAE,KAAK;AAFC,KAAD,CADR,CAAP;AAMD;;AApE8C,CAA3B,C","sourcesContent":["import {\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface StrikeOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    strike: {\n      /**\n       * Set a strike mark\n       */\n      setStrike: () => ReturnType,\n      /**\n       * Toggle a strike mark\n       */\n      toggleStrike: () => ReturnType,\n      /**\n       * Unset a strike mark\n       */\n      unsetStrike: () => ReturnType,\n    }\n  }\n}\n\nexport const inputRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))$/\nexport const pasteRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))/g\n\nexport const Strike = Mark.create<StrikeOptions>({\n  name: 'strike',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 's',\n      },\n      {\n        tag: 'del',\n      },\n      {\n        tag: 'strike',\n      },\n      {\n        style: 'text-decoration',\n        consuming: false,\n        getAttrs: style => ((style as string).includes('line-through') ? {} : false),\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['s', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setStrike: () => ({ commands }) => {\n        return commands.setMark(this.name)\n      },\n      toggleStrike: () => ({ commands }) => {\n        return commands.toggleMark(this.name)\n      },\n      unsetStrike: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-x': () => this.editor.commands.toggleStrike(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: pasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}