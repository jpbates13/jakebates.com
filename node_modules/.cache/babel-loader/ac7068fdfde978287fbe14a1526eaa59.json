{"ast":null,"code":"import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\nconst starInputRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))$/;\nconst starPasteRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))/g;\nconst underscoreInputRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))$/;\nconst underscorePasteRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))/g;\nconst Italic = Mark.create({\n  name: 'italic',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n\n  parseHTML() {\n    return [{\n      tag: 'em'\n    }, {\n      tag: 'i',\n      getAttrs: node => node.style.fontStyle !== 'normal' && null\n    }, {\n      style: 'font-style=italic'\n    }];\n  },\n\n  renderHTML(_ref) {\n    let {\n      HTMLAttributes\n    } = _ref;\n    return ['em', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n\n  addCommands() {\n    return {\n      setItalic: () => _ref2 => {\n        let {\n          commands\n        } = _ref2;\n        return commands.setMark(this.name);\n      },\n      toggleItalic: () => _ref3 => {\n        let {\n          commands\n        } = _ref3;\n        return commands.toggleMark(this.name);\n      },\n      unsetItalic: () => _ref4 => {\n        let {\n          commands\n        } = _ref4;\n        return commands.unsetMark(this.name);\n      }\n    };\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-i': () => this.editor.commands.toggleItalic()\n    };\n  },\n\n  addInputRules() {\n    return [markInputRule({\n      find: starInputRegex,\n      type: this.type\n    }), markInputRule({\n      find: underscoreInputRegex,\n      type: this.type\n    })];\n  },\n\n  addPasteRules() {\n    return [markPasteRule({\n      find: starPasteRegex,\n      type: this.type\n    }), markPasteRule({\n      find: underscorePasteRegex,\n      type: this.type\n    })];\n  }\n\n});\nexport { Italic, Italic as default, starInputRegex, starPasteRegex, underscoreInputRegex, underscorePasteRegex };","map":{"version":3,"sources":["../src/italic.ts"],"names":[],"mappings":";MA8Ba,cAAc,GAAG,oC;MACjB,cAAc,GAAG,oC;MACjB,oBAAoB,GAAG,kC;MACvB,oBAAoB,GAAG,kC;MAEvB,MAAM,GAAG,IAAI,CAAC,MAAL,CAA2B;AAC/C,EAAA,IAAI,EAAE,QADyC;;AAG/C,EAAA,UAAU,GAAA;AACR,WAAO;AACL,MAAA,cAAc,EAAE;AADX,KAAP;AAGD,GAP8C;;AAS/C,EAAA,SAAS,GAAA;AACP,WAAO,CACL;AACE,MAAA,GAAG,EAAE;AADP,KADK,EAIL;AACE,MAAA,GAAG,EAAE,GADP;AAEE,MAAA,QAAQ,EAAE,IAAI,IAAK,IAAoB,CAAC,KAArB,CAA2B,SAA3B,KAAyC,QAAzC,IAAqD;AAF1E,KAJK,EAQL;AACE,MAAA,KAAK,EAAE;AADT,KARK,CAAP;AAYD,GAtB8C;;AAwB/C,EAAA,UAAU,OAAmB;AAAA,QAAlB;AAAE,MAAA;AAAF,KAAkB;AAC3B,WAAO,CAAC,IAAD,EAAO,eAAe,CAAC,KAAK,OAAL,CAAa,cAAd,EAA8B,cAA9B,CAAtB,EAAqE,CAArE,CAAP;AACD,GA1B8C;;AA4B/C,EAAA,WAAW,GAAA;AACT,WAAO;AACL,MAAA,SAAS,EAAE,MAAM,SAAa;AAAA,YAAZ;AAAE,UAAA;AAAF,SAAY;AAC5B,eAAO,QAAQ,CAAC,OAAT,CAAiB,KAAK,IAAtB,CAAP;AACD,OAHI;AAIL,MAAA,YAAY,EAAE,MAAM,SAAa;AAAA,YAAZ;AAAE,UAAA;AAAF,SAAY;AAC/B,eAAO,QAAQ,CAAC,UAAT,CAAoB,KAAK,IAAzB,CAAP;AACD,OANI;AAOL,MAAA,WAAW,EAAE,MAAM,SAAa;AAAA,YAAZ;AAAE,UAAA;AAAF,SAAY;AAC9B,eAAO,QAAQ,CAAC,SAAT,CAAmB,KAAK,IAAxB,CAAP;AACD;AATI,KAAP;AAWD,GAxC8C;;AA0C/C,EAAA,oBAAoB,GAAA;AAClB,WAAO;AACL,eAAS,MAAM,KAAK,MAAL,CAAY,QAAZ,CAAqB,YAArB;AADV,KAAP;AAGD,GA9C8C;;AAgD/C,EAAA,aAAa,GAAA;AACX,WAAO,CACL,aAAa,CAAC;AACZ,MAAA,IAAI,EAAE,cADM;AAEZ,MAAA,IAAI,EAAE,KAAK;AAFC,KAAD,CADR,EAKL,aAAa,CAAC;AACZ,MAAA,IAAI,EAAE,oBADM;AAEZ,MAAA,IAAI,EAAE,KAAK;AAFC,KAAD,CALR,CAAP;AAUD,GA3D8C;;AA6D/C,EAAA,aAAa,GAAA;AACX,WAAO,CACL,aAAa,CAAC;AACZ,MAAA,IAAI,EAAE,cADM;AAEZ,MAAA,IAAI,EAAE,KAAK;AAFC,KAAD,CADR,EAKL,aAAa,CAAC;AACZ,MAAA,IAAI,EAAE,oBADM;AAEZ,MAAA,IAAI,EAAE,KAAK;AAFC,KAAD,CALR,CAAP;AAUD;;AAxE8C,CAA3B,C","sourcesContent":["import {\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface ItalicOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    italic: {\n      /**\n       * Set an italic mark\n       */\n      setItalic: () => ReturnType,\n      /**\n       * Toggle an italic mark\n       */\n      toggleItalic: () => ReturnType,\n      /**\n       * Unset an italic mark\n       */\n      unsetItalic: () => ReturnType,\n    }\n  }\n}\n\nexport const starInputRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))$/\nexport const starPasteRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))/g\nexport const underscoreInputRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))$/\nexport const underscorePasteRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))/g\n\nexport const Italic = Mark.create<ItalicOptions>({\n  name: 'italic',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'em',\n      },\n      {\n        tag: 'i',\n        getAttrs: node => (node as HTMLElement).style.fontStyle !== 'normal' && null,\n      },\n      {\n        style: 'font-style=italic',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['em', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setItalic: () => ({ commands }) => {\n        return commands.setMark(this.name)\n      },\n      toggleItalic: () => ({ commands }) => {\n        return commands.toggleMark(this.name)\n      },\n      unsetItalic: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-i': () => this.editor.commands.toggleItalic(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: starInputRegex,\n        type: this.type,\n      }),\n      markInputRule({\n        find: underscoreInputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: starPasteRegex,\n        type: this.type,\n      }),\n      markPasteRule({\n        find: underscorePasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}